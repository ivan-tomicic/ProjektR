Instructions for compiling programs written in programming language C

1	Introduction
Electronic computer programs are prepared in a symbolic, human-understandable programming language. In the course Introduction to programming, for this purpose will use the C programming language.
The program, written in symbolic language and stored in a file with the extension .c, needs to be converted to commands understandable to the processor, or executable machine code (in Windows operating system, files with the extension .exe, in Unix / Linux operating systems, the format of the extension is not prescribed). The conversion process is carried out in two steps (the concept of preprocessing and assembly code creation will be omitted here because it is indivisible as part of translation):
a)	The translation into object code is done by a program called the compiler. The compiler translates the source file and creates the object code file (usually with the extension .o) that cannot yet be run because it does not yet have links to functions and variables from other object code files and libraries where standard functions (input / output, mathematical functions, etc.) have been prepared.
b)	Linking to the executable code is done by a program called the linker. This program merges all the required object code files with the pre-programmed libraries and creates executable code that can be run directly from the operating system.
Any text editor already installed on the computer can be used to prepare the source code (write the program). The editor must not create additional hidden formatting tags, such as done by Word. An example of such a program is the basic Notepad editor or the slightly improved Notepad++. The compiler and linker are often not part of the operating system and need to be installed. For the purpose of Introduction to programming, ww will install MinGW packages in 32-bit version (https://en.wikipedia.org/wiki/MinGW).


2	Installing MinGW
The installer mingw-get-setup.exe will be downloaded automatically from the page http://sourceforge.net/projects/mingw/files/latest/download?source=files.
The downloaded program must be executed. On the first form shown, press the Install button. On the next form, press Continue. It will initiate download of MinGW Installation Manager. When downloaded, press Continue to start MinGW Installation Manager.
In left column, select Basic Setup. In next column, select (Mark for Installation) item mingw32-base. Next, from the menu, select Installation -> Apply Changes and in the newly opened window, press the button Apply.
After the installation is completed, the system variable Path must be set by adding a path to the folder bin of the MinGW package. This system variable contains a list of folders where the operating system looks for executable programs that the user attempts to run by specifying their name.
If MinGW is installed with the default settings, the path to the folder bin will be C:\MinGW\bin. 
This can be done in several ways, but the simplest way to do it is in the command prompt.

2.1	Opening the Command Prompt
The command prompt is opened by opening the Windows menu (Start menu), then typing and selecting Run, typing cmd in the newly opened window, and pressing OK or typing command in the Start menu and selecting Command Prompt.
It is useful to add the command prompt to the Start menu by right-clicking on Command Prompt and selecting Pin to Start from the pop-up menu.
The command prompt allows you to directly execute operating system commands, which generally looks like this:
program argument1 argument2 … argumentn
program is the name of the program (or internal operating system command) to be executed. If the program is not an internal operating system command (such as a command DIR that prints the contents of the current folder), it must either be in the current folder or in one of the folders listed in the variable Path set as described in the next section. A program can be called without arguments like DIR, or with arguments that define the names of the files over which the program will act or options that modify how the program is executed. Options usually begin with characters /, -, or --. 
In the following example, the file t1.txt will be copied to t2.txt:
copy t1.txt t2.txt 
This requires confirmation if t2.txt already exists, but if option /y is added to the call, the confirmation will not be required:
copy /y t1.txt t2.txt
It should be noted that some operating systems distinguish between uppercase and lowercase letters in the names of programs, options, or files, while others do not. Operating system Windows does not distinguish between upper and lower case letters (is case insensitive), while operating systems Unix and Linux do (are case sensitive).

2.1.1	Setting the system variable Path in the command window
The system variable Path is easily set in a command window by a command
setx Path "%Path%;C:\MinGW\Bin"
The setx command written in this way sets the new value of the variable Path by adding text  ;C:\MinGW\Bin to it's old value.
Unfortunately, the command setx has a built-in restriction on the length of a variable to 1024 characters, so before the call it is necessary to check that the existing content is not too long, which can be checked by the command echo:
echo %Path% 
If the following message appears when setting the variable Path:
WARNING: The data being saved is truncated to 1024 characters.
it means that the setx command limit is exceeded, so the variable Path will need to be set through the GUI and checked for content.

Setting the system variable Path through a graphical interface
The system variable Path can be set in Control Panel:
Control Panel -> System and Security -> System
You need to click the link Advanced system settings in in the left menu.
In the newly opened window, select the tab Advanced in top menu and then press the button Environment Variables.
After that, choose Path from the list System variables and click Edit.
A window will open with all the folders where the operating system looks for executable programs, where you need to click New.
In the newly created blank field at the bottom of the list, enter the path to the folder where the MinGW package is installed to (normally C:\MinGW\bin), and press OK.
In older versions of Windows, a window will open. There, in the Variable value field, the text: ";C:\MinGW\bin\" should be appended to existing text.
Note the sign ; at the beginning of the text to be added to the variable Path. This character separates the paths contained in the variable Path. The above text should be added to the end of the existing contents of the variable, taking care not to delete the existing contents of the variable.
If MinGW is installed in another folder (instead of C:\MinGW), appropriate folder name should be entered.

An alternative way of installation
Students who have problems installing the latest version of MinGW on their Windows computer can try this alternative method:
1.	Create a folder on your computer to place MinGW files (e.g. C:\MinGW)
2.	Download the archive MinGW.zip from the file repository and extract it into the folder created above
3.	Set the system variable Path according to the instructions above


3   Writing programs with a simple editor, compiling and executing programs
The whole process of writing and compiling programs will be illustrated in the command prompt, where you first need to create a folder where the program file will be stored, and then make it current e.g.
mkdir C:\IPRO
cd C:\IPRO
and start editing program there with a text editor:
notepad program.c

The following code should be entered in this file:
#include <stdio.h>

int main(void) {
   printf("Introduction to Programming");
   return 0;
}
and save the changes via the File/Save menu or the standard keyboard shortcut Ctrl-S (press the Ctrl key and then, without releasing it, the S key). After that it is necessary to check whether elementary compilation works:
gcc program.c -o program.exe

This simplest gcc compiler call integrates compiler and linker functions. The program.c file is compiled. Because of the -o (output) option, it creates an executable file named program.exe which can then be executed with the command
program.exe
or
program
If an error occurred while calling the compiler or starting the program, you should look for the solution in the next section.

Basically, the previous compiler call is internally executed in the same way as the following sequence:
gcc -c program.c
gcc program.o -o program.exe
The first call, because of the argument or the -c (compile) option, is just a compilation to program.o, which in this case remains stored in the current folder (in the case of an elementary call, that object code is automatically deleted). The second call links the object code with the program libraries and creates the executable program.exe.

Additional compiler options to use in the Introduction to Programming course are:
-std=c11 – a parameter that ensures compilation compliant to ISO/IEC 9899:2011 standard (there is a newer ISO/IEC 9899:2018 standard, option -c++17, but gcc currently only applies it to C++.
-pedantic-errors – a parameter that ensures generation of errors if the code is not strictly compliant to the standard
-Wall – a parameter that requires printing of detailed warnings

The command that translates the program with the options listed above looks like this:

gcc -std=c11 -pedantic-errors -Wall program.c -o program.exe

3.1	Configuration for MacOS
Install gcc using Homebrew: https://brew.sh/ 
1.	Install Homebrew by executing in terminal: 
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
2.	Install gcc: 
brew install gcc
3.	Check whether elementary compilation works:
gcc -o <output-file-name> <input-file-name>
npr. 
gcc -o output_program program.c
4.	Execute with the command:
./output_program

3.2 Possible problems when compiling or executing a program
Problem with variable Path
If the following error occurs when starting gcc:
'gcc' is not recognized as an internal or external command, operable program or batch file.
then probably the variable Path is not set or refreshed correctly. In this case, the following steps should be taken. After each step, you can check if the problem is resolved.
1.	Check that the variable Path is set correctly by typing the command
echo %Path%
If the error is a path, repair it as described in the previous section.
2.	Close all command prompts and reopen the command prompt.
3.	In Task manageru restart explorer.exe
4.	Restart the computer

3.2.1.1	Problem with antivirus software:
If the following error occurs when starting the compiled program (executable .exe file):
The system cannot execute the specified program
it is possible that the built-in security mechanism (Windows Defender) or other antivirus software automatically blocks the launch of an unknown executable file. It is then necessary to disable the blocking of programs running from the folder where the .exe is created.
For Windows Defender, this can be done as follows:
Select Control Panel -> Windows Defender, and in the upper right corner, click Settings.
In the newly-opened window, under Exclusions, choose Add an exclusion.
In the following window, select Exclude a folder and then select the folder where the program code is located (e.g. C:\IPRO).
You should then reattempt the program compilation using the gcc command and run the executable program (.exe).


4	Writing and compiling programs in an integrated development environment
Knowledge of elementary editing of a program by notepad or a similar text editor, compiling programs from the command line, and running programs from the command line, is mandatory and will be tested during laboratory exercises.
Integrated Development Environments (IDEs) are used to make writing, compiling, and testing programs easier. In the Introduction to Programming course, we will use Visual Studio Code development environment, because it is an open source program, runs on multiple platforms (Windows, Linux, Mac), the installation package is relatively small compared to other similar environments, installation is fast and can be used for programming in any programming language, provided that a suitable compiler is installed on your computer, such as the MinGW package whose installation and use is described in the previous sections. The following assumes that MinGW is installed in accordance with the instructions in the previous sections.
Installation of the environment
Visual Studio Code (VSC) is downloaded from the link
https://code.visualstudio.com/download
After selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.
The VSC desktop treats a single folder within the file system as a project. Therefore, the first action to take is to open the folder in which the program files are or will be located, such as the folder where we tested the compiler gcc (File -> Open Folder...).
The VSC toolbar consists of the following icons:
Explorer (work with files in the currently open folder)
Search (search for content in the currently open folder and subfolders)
Source control (working with GIT version control system)
Debug (running a program and troubleshooting a program)
Extensions (installing a VSC extension)

First, you need to install an extension that allows you to run programs in the C or C ++ programming language. In the extension search box, type C / C ++ and then select the Microsoft extension.
After downloading, it is necessary to restart the VSC by pressing a button Reload.

Configure the environment for simple programs
Unfortunately, VSC is not yet configured to compile C programs. Configuration can be done through menus, but the simplest way is to create a .vscode subfolder (note that the name begins with a dot) and in this colder, create two files written in Java Script Object Notation, JSON:
tasks.json	describes the tasks to be performed as part of the program compilation
launch.json	describes how to run the executable program
Files are created by selecting the folder within which the files should be created, selecting the appropriate icon and typing in the name of the new file.
The following code should be copied to the window on the right in the tasks.json file:
{
    "version": "2.0.0",
    "tasks": [{
        "label": "Build with gcc",
        "type": "shell",
        "command": "gcc",
        "args": ["-g", "-std=c11", "-pedantic-errors",
            "-Wall", "-o", "program.exe", "${file}"
        ]
    }]
}

Basically, we are creating a task that will be called Build with gcc ("label"), which is an operating system command ("type":"Shell"), and the specific command that is executed is gcc ("Command"). "args" is a list of arguments of an external program call. ${file} is the name of the currently open program file, so the program.c is currently open in the window, the previous description will result in the execution of the following operating system command:
gcc -g -std=c11 -pedantic-errors -Wall -o program.exe program.c

that is, a known compiler call which will create program.exe.
The only novelty here is an option -g which adds an interaction with the debugger to the executable code.
It should be noted that this configuration is only good for programs that consist of a single source file, but therefore allows the same folder contain an unlimited number of such simple programs.
The file launch.json should be created in the same way, with the following content
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "C Launch",
            "preLaunchTask": "Build with gcc",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceRoot}/program.exe",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceRoot}",
            "environment": [],
            "externalConsole": true,
            "miDebuggerPath": "gdb.exe",
            "linux": {
                "MIMode": "gdb"
            },
            "osx": {
                "MIMode": "lldb"
            },
            "windows": {
                "MIMode": "gdb"
            }
        }
    ]
}
In short, we have given the name of the job that must be started before our program is started ("preLaunchTask"), the path to our program ("program") and the path to the debugger("miDebuggerPath"). The name of the job ("preLaunchTask") must match the text in the option "label" in tasks.json.  It should be noted that in this case, the character separating the levels of folders in the slash (/) not the backslash (\). 
In the above configuration("miDebuggerPath") it is understood that system variable Path contains the folder in which debugger gdb.exe is installed. If this is not the case, the correct absolute path to the file gdb.exe must be entered.
Now all we have to do is open our source program file (because the configuration specifies that the program currently open in the editor is compiled) select Debug and start the program by pressing Start debugger or simply by pressing the key F5 on the keyboard.
Consequently, the program will be compiled as described in prelaunch task in tasks.json and then, if compilation is successful, the program will be executed described in launch.json.
If the program has been modified in any way in the meantime, mark x after the program name will change into a circle and changes will need to be saved before the compilation with File/Save or Ctrl-S.
This action will print the text Introduction to Programming in a new window, which will then close immediately. To prevent the window from closing immediately, a breakpoint should be placed on the last line of the program by clicking the mouse at the very beginning of the line containing the return command.
If a new folder is created for another program or programs, .vscode folder should be copied there and all the preparatory actions are done.
The basics of working with a debugger
Program behavior is easily monitored using debugger. To demonstrate how such a program works, we will replace the content of program.c with
#include<stdio.h>

int main(void){
   int i;
   i = 0;
   i = i + 1;
   printf("Value of i: %d\n", i);
   return 0;
}
and monitor the execution of that program step by step.
In short, we define one variable here, set it’s initial value, increase it by 1, and finally print its final value in a window with accompanying text.
In the program, we first set a breakpoint at the statement where to pause the execution, by left-clicking at the very beginning of the corresponding line.
After compilation, the program starts executing and then stops at the breakpoint.
Bringing the mouse cursor over a variable name gives you an insight into its value.
Remeber definition of a variable only provides memory space, but not a default value.
Debugger’s toolbar responds with a popup window that lets you see the meaning of each icon together with the keyboard shortcut which triggers the corresponding action and contains the following commands (action names and corresponding shortcuts are listed in parentheses):
Continue running to the end or next breakpoint (Continue, F5)
Execute the following statement without entering the function code (Step over, F10)
Execute the following statement entering the function code (Step into, F11)
Exit the current function (Step out, Shift-F11)
Restart the program with recompilation (Restart, Ctrl-Shift-F5)
Stop the program (Stop, Shift-F5)
If the following statement is executed with the Step over action, the program stops after executing the command, and hovering over the variable name indicates that the content has changed.
The state of several variables in the surrounding of statement where the program stopped can be monitored in the Locals window. In larger programs, some variables that are not in immediate surrounding of the current statement may disappear from the Locals window. In such a case, the variable or expression whose value we want to watch constantly can be added to the Watch window.
If variable i is set to 0 in Watch window, after performing the statement i = i + 1, value of variable i in Watch window will be 1.
If Step into action is triggered at this point, the debugger will enter printf system function and the statements comprising printf will be shown. This is rarely necessary.  Step out action exits such a function, executing the rest of the commands in the function.

Configure the environment for more complex programs
More complex programs regularly consist of multiple source files (modules), because orientation in a large source file is difficult. If the program consists of files (modules) e.g. p1.c, p2.c i p3.c, in tasks.json, in line
"args": ["-g", "-std=c11", "-pedantic-errors",
 "-Wall", "-o",  "program.exe", "${file}"]
"${file}" shoud be replaced with list of modules comprising the program:
"args": ["-g", "-std=c11", "-pedantic-errors",
 "-Wall", "-o",  "program.exe", "p1.c", "p2.c", "p3.c"]
The disadvantage of this approach is that all modules listed here are compiled every timy, regardless of whether they have been modified in the meantime.

Configure the environment for complex programs using make
Unnecessary compilations can be avoided using the program make, which utilizes executable program dependencies on object code files, and object code files on source code files. If the program detects that, for example, the source code file is newer than the object code file that depends on it, it will be compiled. Files whose source code is older than the corresponding object code will not be compiler.
Program make can be found in C: \MinGW\bin (or in the appropriate folder if MinGW is not installed with default destination) under a non-standard name mingw32-make.exe, so it is useful to copy it first to make.exe with copy
copy C:\MinGW\bin\mingw32-make.exe C:\MinGW\bin\make.exe

The dependencies are described by rules in the Makefile file, which should be located in the same folder as the source code files.
Makefile which describes the compilation of program.c to program.exe:
program.exe: program.o
	gcc -o program.exe program.o
program.o: program.c
	gcc -c -g -std=c11 -pedantic-errors -Wall program.c
Here we have defined that program.exe (executable code) depends on program.o (object code), and that program.o  depends on program.c. If program.c is changed, this file will become newer than program.o, wich results, due to the option -c (compile), in compilation into object code, which will make the object code newer than the executable one, causing linking.
It is important to know that the indentation of a command that is executed for an appropriate rule is mandatory, with a tab character, and that the line describing the dependency of the executable code on the object code must be written first.
In practice, there will also be dependencies on the object code file and header (.h) files that are included in the compilation by the preprocessor command #include.
If, for example, a program consists of two modules, p1.c i p2.c where the first includes h1.h i h2.h, and the second includes h3.h, this will be defined in the following Makefile:
program.exe: p1.o p2.o
	gcc -o program.exe program.o
p1.o: p1.c h1.h h2.h
	gcc -c -g -std=c11 -pedantic-errors -Wall p1.c
p2.o: p2.c h3.h
	gcc -c -g -std=c11 -pedantic-errors -Wall p2.c
tasks.json must now describe the call of program make. I can be done by replacing the gcc call with a make program call while deleting the argument list (make does not require arguments if dependencies are described in the file Makefile, otherwise the arguments at the call should be  -f name_of_make_file). Alternatively, in tasks.json a new task can be added as follows:
{
    "version": "2.0.0",
    "tasks": [{
            "label": "Build with gcc",
            "type": "shell",
            "command": "gcc",
            "args": ["-g", "-std=c11", "-pedantic-errors",
                "-Wall", "-o", "program.exe", "${file}"
            ]
        },
        {
            "label": "Build with make",
            "type": "shell",
            "command": "make"
        }
    ]
}
In any case, care should be taken that the option"preLaunchTask" in launch.json references the corresponding task, in this example like this:
"preLaunchTask": "Build with make"

4.1.1	Optional: Universal Makefile
In the previous examples, only the basic functionality of the program make was shown. With knowledge of more advanced functionalities, the details of which we will not dwell into here, it is possible to write Makefile which can be used to compile programs of any complexity, without explicitly specifying individual components and their dependencies. Very superficially explained, all the files with the extension .c are source files for the program, and all the files with the extension .o are object code and are derived from the source code of the same base name. The compiler name and options are stored in variables CC and CFLAGS.
CC = gcc
CFLAGS=-c -g -std=c11 -pedantic-errors -Wall
SRCS=$(wildcard *.c)
INCLUDES=$(wildcard *.h)
OBJS=$(SRCS:.c=.o)

main.exe: $(OBJS)
	$(CC) -o $@ $(OBJS)

$(OBJS) : %.o: %.c $(INCLUDES)
	$(CC) $(CFLAGS) -c $<

clean:
	del *.o *.exe
There last rule allows us to delete all object and executable code files. This, like any other single rule, can be executing by calling the program make specifying the name of the rule to be executed, in this example make clean. The first subsequent make program call will cause all the program modules to be compiled.
Formatting the code
Properly formatted code is a prerequisite for the readability of the program. The C compiler will seamlessly compile the following program:

#include <stdio.h>
int main(void) { if
(1) { printf ("1"); } else { 
printf ("2"); }} 

but such a program it is almost impossible for a human to manage. Let’s compare the previous program with the equivalent but neatly formatted one:

#include <stdio.h>

int main(void) {
   if (1) {
      printf("1");
   } else {
      printf("2");
   }
}
The VSC extension for C/C ++ will format the code with a command Alt-Shift-F.
The automatic code formatting while saving changes is built into this extension, but is turned off by default. The automatic code formatting setting while saving changes can be set in File/Preferences/Settings.
This, as well as all VSC settings, can be set at the user level (User settings, will be valid in any project/folder) or at the folder level (Workspace settings, will only be valid in the current folder). It is therefore necessary to first indicate the level (in the following example User settings to make the setting valid in other projects as well). Then search for the setting by typing the name of the setting in the search box. Some settings can be edited in the appropriate fields, some, for now (the environment is in constant development) by editing the JSON object. The specific setting is edited by editing the JSON object.
Click the pencil icon in the line editor.formatOnSave and select true.
The default formatting style is somewhat wasteful. While saving the above program code, it will be automatically formatted as follows:
#include <stdio.h>
int main(void)
{
	if (1)
	{
		printf("1");
	}
	else
	{
		printf("2");
	}
}
This can be changed by adding a file named .clang-format to the folder containing the source code.
This file should contain the setting IndentWidth by which we determine the depth of indentation of each level of program statements. It is recommended to indent by 3 letters
IndentWidth: 3
The blank behind the colon is required.
The tab width in the VSC settings also needs to be changed to format properly. Go to File -> Preferences -> Settings.
In the search box in the window that opens to the right, type a tab and set the Tab size to 3 (default value is 4).
With the existence of the file .clang-format, the program will be formatted optimally when saved, in terms of the number of program lines consumed and its readability:
#include <stdio.h>
int main(void) {
   if (1) {
      printf("1");
   } else {
      printf("2");
   }
}
It is also possible to enter the BasedOnStyle setting in this file to determine the formatting style. Allowed values are LLVM (this is also the default value), Google, Chromium, Mozilla and WebKit.
We leave it to the readers to experiment with these settings.


5	VSC configuration files
The configuration.zip file contains all the configuration files described in this text. The entire contents of this compressed file should be copied to a folder containing the original programs, for example: C:\IPRO
The folder can then be opened in the VSC and all is ready to edit and compile a program.
There are different configurations built into these configuration files, so you need to select the C Launch configuration to be used for compilation and execution.



Introduction to programming: A guide for students
1	Introduction
The aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.
Lecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform. 
Also, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr. 


2	Forms of teaching 
2.1	Lectures 
The lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.
Lectures take place in two cycles. After the first cycle, midterm exams are held, and after the second
cycle final exams.
    lectures in the 1st cycle, October 2nd - November 15th, 2023.
    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.
During the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment
    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform
    the content of the slides, since they are published in advance, don’t need to be copied, but it is advised to take your own notes during lectures
    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications
    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter

2.2	Independent work 
The course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:
    50 hours will be spent on attending classes, 
    20 hours will be spent participating in laboratory exercises and attending exams, 
    the remaining time, i.e. at least 140 hours, must be spent on independent work. 
It should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. "I won’t do anything for three weeks and then I’ll make up for it all at once") on this subject will almost certainly end in very poor results.
Independent work includes:
    Learning
        Slides from the lectures
        Your own notes
        Reading other literature (see chapter Recommended reading)
        Internet
    Solving tasks
        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam). 
        It is therefore of the utmost importance:
        solve published assignments for exercises in addition to lectures (published at the same time as lectures)
        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)
    Reading other literature (see chapter Other materials - Recommended reading)
    Browsing content on the Internet for additional explanations and examples

2.3	Laboratory exercises with knowledge tests
All students perform laboratory exercises in a FER lab, in precisely prescribed terms:
    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle
    the duration of one laboratory exercise is approximately 110 minutes
    laboratory exercises must be completed by the student in the specified time
    there is no compensation for laboratory exercises in case of absence
    the laboratory exercise consists of two parts:
        solving tasks in which the correct one must be chosen from among several offered answers ("multiple choice questions").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.
        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.
Each student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:
    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system
    VSCode development environment
IMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!
Laboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.

2.4	Consultations 
Students have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.
    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again 
    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late. 

2.5	Knowledge tests 
During the continuous assessment process, two written exams are taken: midterm exam and final exam.
    exact time is TBD 
    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C. 
    tasks are solved on a computer at FER 
    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions
    there is no compensation for midterm exams and final exams in case of absence 
Students who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.
    exact time is TBD
    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive


3	Conditions for obtaining a passing grade 
3.1	During the continuous assessment 
The total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam: 
    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam

Lectures    10 points   there is no threshold
Laboratory exercises	30 points	there is no threshold
Midterm exam	25 points	there is no threshold
Final exam	35 points	treshold is 14 points

Conditions for obtaining a passing grade based on continuous assessment:
    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and
    total points >= 50

3.2	On classical exams 
For students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam
    total number of points = number of lab points + number of points on the exam

Laboratory exercises	30 points	there is no threshold
Exam	70 points	treshold is 35 points

Conditions for obtaining a passing grade in the exam period:
    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and 
    total points  50


4	Scoring thresholds for determining final grades 
Students who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:
[87.5, 100]	Excellent - 5
[75, 87.5)	Very good- 4
[62.5, 75)	Good - 3
[50, 62.5)	Sufficient - 2


5	Other materials 
5.1	Recommended reading 
    V. Mornar: Introduction to programming, working version of the textbook
        The textbook covers the complete material of the subject, and even more than that. The textbook will be available on MS Teams as pdf. An integral part of the textbook is the folder Examples with about ninety programs that can be independently translated and run in the command line or in the development environment VSCode.
    K. N. King, C Programming: A Modern Approach, Second Edition, W. W. Norton & Company
        An extensive work (805 pages) that has been accepted as a textbook at hundreds of universities around the world. 
    B. W. Kernighan, D. M. Ritchie: The C Programming Language, Second Edition, Englewood Cliffs, NJ: Prentice Hall
        A basic book whose authors are the creators of the C programming language from which many generations of programmers have learned the language. 
5.2	Instructions 
    Instructions for compiling programs written in the programming language C 
        contain a detailed description of the software installation procedures and how to compile and execute the program. Based on these instructions, students must learn to use some of the simple editors (Notepad or Notepad ++) and compile programs using the operating system command line. In addition, students can use these instructions, if they wish, to install and learn the basics of using the integrated development environment VSCode, which greatly facilitates error detection because it has a simple interaction with a specialized program - a debugger. 
    Instructions for using the character interface in Windows 
        basics of using the operating system's character interface (command line). Based on these instructions, students are expected to independently learn several operating system commands listed there: basics of positioning in file system folders, creating, renaming files and folders, redirecting inputs and outputs.
    Instructions for laboratory exercises and the Edgar system – will be published in time

5.3	Official reminder (cheat sheet)
The official reminder can be printed on the paper and used freely in lectures and any knowledge test: laboratory exercises, midterm exam, final exam and classical exams. Nothing may be added to the copies of official reminders that you will use in knowledge tests.
    Official reminder for programming language C - 
        a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests. 
        on a copy of the official reminder nothing should be added 
        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system

5.4	Lecturers 
Lecturer
Prof. dr. sc. Vedran Mornar, vedran.mornar@fer.hr

Assistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr
If communicating via email, please start subject with [IPRO2023].



Instructions for performing laboratory exercises and tests via the Edgar system

1	Edgar system 
The Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language. 
The labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.
You can access the Edgar system at:   https://edgar.fer.hr/
Note: The layout of the graphical user interface elements on the current version of the system Edgar may differ in part from the appearance of the user interface shown in the illustrations later in this document. In case of any ambiguities and/or difficulties when using the system, contact the assistant on duty.

1.1	Login to the system 
The username and password from the AAI-Edu system are used to log in to the system. You can access this login mode by clicking on "login here using AAI".
Then you need to enter the AAI username and password in the login fields and click „PRIJAVA“.
Note: The username from the AAI-Edu system is in the form:
your_user_name@your_institution.hr 

1.2	Using Edgar for Introduction to Programming 
In order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.


2	Exams 
Note: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:
•	Cheat sheet for C
Knowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals. 
The system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.
The test is commenced by the option „Start exam“.
To practice working with the system at home, a demo test has been defined. This test is not graded and can be run an unlimited number of times. The password is not needed. The test is available under “Public exams”. 
Links at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.
With each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.
In the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the "Submit" button which is used to submit the entire test for the final assessment (not individual tasks!).
The student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.
In the upper left corner (next to the test name) there is a button for selecting the layout of the screen.

2.1	Tests with program tasks 
Important: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.
In tasks that require writing of a program, in the Edgar system, below the text of the task, there is a field to which the solution (program code) should be pasted. 
The program code transferred to the Edgar system can be run in the following ways:
•	by selecting the option „Run“
•	while the program code field is in focus (the mouse pointer is in the field), by a key combination Ctrl + Enter

If errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.

If the compilation of the program is successful, the program will be run on several pre-prepared test cases. If the printout of the program for a case does not correspond to the expected printout, a certain percentage, determined in advance for that case, is deducted from the total number of points provided for the task. This percentage can be 100% if it is a typical test case, for example if a program that determines whether a given number is within the required interval does not work well for numbers inside or outside the interval, or less than 100% if the test case examines program behavior at the boundaries of the interval. The total deducted percentage of points for a task cannot exceed 100%.
The process of writing tasks in the Edgar system will be illustrated by one of the tasks from the demo test, which reads:
Write a program that prints the message as in the examples that follow, reads integers a and b, prints them separated by a single space, and below that, prints their sum in a new line.

Example 1:
Hello·World!·Now·enter·a·and·b·>·15·20↵
15·20↵
35

Example 2:
Hello·World!·Now·enter·a·and·b·>·-5·20↵
-5·20↵
15

Mark `↵` in the examples indicates that a jump to new line (line feed) should be printed at that place or that the key Enter or Return should be pressed. Mark `·` indicates that a space should be printed at that place.

Try to copy-paste the following program into the solution field:

#include <stdio.h>
int main(void) {
   int a, b;
   printf("Hello World! Now enter a and b > ");
   scanf("%d %d", &a, &b);
   printf("%d  %d", a, b);
   return 0;
}

This program prints the message `Hello·World!·Now·enter·a·i·b·>·`, reads two integers and then prints them separated by two spaces. In addition, it does not print the sum.
If such a program is executed, Edgar will report that the result is incorrect for each of the four pre-prepared test cases.
Each row of the table corresponds to one test case. "Incorrect" indicates that the printout of the program was not as expected for that test case. The percentage next to the test case indicates what percentage of the predefined number of points for that task is lost if the solution does not pass that test. In this particular case, for any of the test cases in the example above, all points for that task are lost. So, in order to achieve 100% points on a task, the solution must be correct for all test cases prepared for that task. 
Now try replacing the statement which prints the results with the following:
printf("%d %d %d", a, b, a + b);

The result of running the program will be 
Hello·World!·Now·enter·a·and·b·>·15·20↵
15·20·35

The program prints the correct values of the entered variables and correctly calculates and prints their sum, but this solution is also evaluated as incorrect in all cases, because there is no transition to a new line. One space more or less than required, or one jump to new line more or less than required, is enough for an almost correct solution to fail on all test cases.

Only if the print statement is corrected to 
printf("%d %d\n%d", a, b, a + b);

the program will return the correct result for all test cases.

In the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:
•	Explicitly - the contents of the field can be explicitly saved by clicking the "Save" button in the upper right corner (below the "Run" button).
•	Implicitly - Edgar automatically saves the contents of the field each time it is started with the "Run" option. Therefore, "Save" should only be used if you have written program code and have not run it.
If an interrupt occurs, the test can later be re-accessed. By selecting the option "Start exam (or continue ongoing exam)" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.

2.2	Completion of writing and submission of the test for assessment 
After completing all the tasks, the test should be submitted for the final assessment by selecting the "Submit" option in the upper right corner of the window. The submission is confirmed once again by selecting "Yes, submit test!", but can also be canceled by selecting "No, continue writing". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.
Then it is necessary to wait for the completion of the evaluation.
After the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option „Review“.
After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.
An overview of the summary results of all tests performed so far can be obtained at any time by selecting the option „My previous exams“.


3	Ticketing system
In order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.
Using the system while writing the test is described below.
	1. Click on the "yellow tools" icon  in the upper right corner of the question page
	2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.
	3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.
After the the problem has been addresses, a message saying "Ticket resolved" appears on the student's screen.
	4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the "green cloud" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.

3.1	View own tickets 
Open and resolved tickets can be viewed the menu option My tickets. 
This option is useful when the question asked by the student cannot be answered quickly (in time
duration of the check) because it provides the possibility of subsequent review of the answers of the teaching staff. For example, there is a (fatal) mistake on the part of the teaching staff, and because of that, it is subsequent to all students answer recognized as correct.
Note: It is not possible to ask questions on the ITP Demo test.


Instructions for compiling programs written in programming language C

1	Introduction
Electronic computer programs are prepared in a symbolic, human-understandable programming language. In the course Introduction to programming, for this purpose will use the C programming language.
The program, written in symbolic language and stored in a file with the extension .c, needs to be converted to commands understandable to the processor, or executable machine code (in Windows operating system, files with the extension .exe, in Unix / Linux operating systems, the format of the extension is not prescribed). The conversion process is carried out in two steps (the concept of preprocessing and assembly code creation will be omitted here because it is indivisible as part of translation):
a)	The translation into object code is done by a program called the compiler. The compiler translates the source file and creates the object code file (usually with the extension .o) that cannot yet be run because it does not yet have links to functions and variables from other object code files and libraries where standard functions (input / output, mathematical functions, etc.) have been prepared.
b)	Linking to the executable code is done by a program called the linker. This program merges all the required object code files with the pre-programmed libraries and creates executable code that can be run directly from the operating system.
Any text editor already installed on the computer can be used to prepare the source code (write the program). The editor must not create additional hidden formatting tags, such as done by Word. An example of such a program is the basic Notepad editor or the slightly improved Notepad++. The compiler and linker are often not part of the operating system and need to be installed. For the purpose of Introduction to programming, ww will install MinGW packages in 32-bit version (https://en.wikipedia.org/wiki/MinGW).


2	Installing MinGW
The installer mingw-get-setup.exe will be downloaded automatically from the page http://sourceforge.net/projects/mingw/files/latest/download?source=files.
The downloaded program must be executed. On the first form shown, press the Install button. On the next form, press Continue. It will initiate download of MinGW Installation Manager. When downloaded, press Continue to start MinGW Installation Manager.
In left column, select Basic Setup. In next column, select (Mark for Installation) item mingw32-base. Next, from the menu, select Installation -> Apply Changes and in the newly opened window, press the button Apply.
After the installation is completed, the system variable Path must be set by adding a path to the folder bin of the MinGW package. This system variable contains a list of folders where the operating system looks for executable programs that the user attempts to run by specifying their name.
If MinGW is installed with the default settings, the path to the folder bin will be C:\MinGW\bin.
This can be done in several ways, but the simplest way to do it is in the command prompt.

2.1	Opening the Command Prompt
The command prompt is opened by opening the Windows menu (Start menu), then typing and selecting Run, typing cmd in the newly opened window, and pressing OK or typing command in the Start menu and selecting Command Prompt.
It is useful to add the command prompt to the Start menu by right-clicking on Command Prompt and selecting Pin to Start from the pop-up menu.
The command prompt allows you to directly execute operating system commands, which generally looks like this:
program argument1 argument2 … argumentn
program is the name of the program (or internal operating system command) to be executed. If the program is not an internal operating system command (such as a command DIR that prints the contents of the current folder), it must either be in the current folder or in one of the folders listed in the variable Path set as described in the next section. A program can be called without arguments like DIR, or with arguments that define the names of the files over which the program will act or options that modify how the program is executed. Options usually begin with characters /, -, or --.
In the following example, the file t1.txt will be copied to t2.txt:
copy t1.txt t2.txt
This requires confirmation if t2.txt already exists, but if option /y is added to the call, the confirmation will not be required:
copy /y t1.txt t2.txt
It should be noted that some operating systems distinguish between uppercase and lowercase letters in the names of programs, options, or files, while others do not. Operating system Windows does not distinguish between upper and lower case letters (is case insensitive), while operating systems Unix and Linux do (are case sensitive).

2.1.1	Setting the system variable Path in the command window
The system variable Path is easily set in a command window by a command
setx Path "%Path%;C:\MinGW\Bin"
The setx command written in this way sets the new value of the variable Path by adding text  ;C:\MinGW\Bin to it's old value.
Unfortunately, the command setx has a built-in restriction on the length of a variable to 1024 characters, so before the call it is necessary to check that the existing content is not too long, which can be checked by the command echo:
echo %Path%
If the following message appears when setting the variable Path:
WARNING: The data being saved is truncated to 1024 characters.
it means that the setx command limit is exceeded, so the variable Path will need to be set through the GUI and checked for content.

Setting the system variable Path through a graphical interface
The system variable Path can be set in Control Panel:
Control Panel -> System and Security -> System
You need to click the link Advanced system settings in in the left menu.
In the newly opened window, select the tab Advanced in top menu and then press the button Environment Variables.
After that, choose Path from the list System variables and click Edit.
A window will open with all the folders where the operating system looks for executable programs, where you need to click New.
In the newly created blank field at the bottom of the list, enter the path to the folder where the MinGW package is installed to (normally C:\MinGW\bin), and press OK.
In older versions of Windows, a window will open. There, in the Variable value field, the text: ";C:\MinGW\bin\" should be appended to existing text.
Note the sign ; at the beginning of the text to be added to the variable Path. This character separates the paths contained in the variable Path. The above text should be added to the end of the existing contents of the variable, taking care not to delete the existing contents of the variable.
If MinGW is installed in another folder (instead of C:\MinGW), appropriate folder name should be entered.

An alternative way of installation
Students who have problems installing the latest version of MinGW on their Windows computer can try this alternative method:
1.	Create a folder on your computer to place MinGW files (e.g. C:\MinGW)
2.	Download the archive MinGW.zip from the file repository and extract it into the folder created above
3.	Set the system variable Path according to the instructions above


3   Writing programs with a simple editor, compiling and executing programs
The whole process of writing and compiling programs will be illustrated in the command prompt, where you first need to create a folder where the program file will be stored, and then make it current e.g.
mkdir C:\IPRO
cd C:\IPRO
and start editing program there with a text editor:
notepad program.c

The following code should be entered in this file:
#include <stdio.h>

int main(void) {
   printf("Introduction to Programming");
   return 0;
}
and save the changes via the File/Save menu or the standard keyboard shortcut Ctrl-S (press the Ctrl key and then, without releasing it, the S key). After that it is necessary to check whether elementary compilation works:
gcc program.c -o program.exe

This simplest gcc compiler call integrates compiler and linker functions. The program.c file is compiled. Because of the -o (output) option, it creates an executable file named program.exe which can then be executed with the command
program.exe
or
program
If an error occurred while calling the compiler or starting the program, you should look for the solution in the next section.

Basically, the previous compiler call is internally executed in the same way as the following sequence:
gcc -c program.c
gcc program.o -o program.exe
The first call, because of the argument or the -c (compile) option, is just a compilation to program.o, which in this case remains stored in the current folder (in the case of an elementary call, that object code is automatically deleted). The second call links the object code with the program libraries and creates the executable program.exe.

Additional compiler options to use in the Introduction to Programming course are:
-std=c11 – a parameter that ensures compilation compliant to ISO/IEC 9899:2011 standard (there is a newer ISO/IEC 9899:2018 standard, option -c++17, but gcc currently only applies it to C++.
-pedantic-errors – a parameter that ensures generation of errors if the code is not strictly compliant to the standard
-Wall – a parameter that requires printing of detailed warnings

The command that translates the program with the options listed above looks like this:

gcc -std=c11 -pedantic-errors -Wall program.c -o program.exe

3.1	Configuration for MacOS
Install gcc using Homebrew: https://brew.sh/
1.	Install Homebrew by executing in terminal:
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
2.	Install gcc:
brew install gcc
3.	Check whether elementary compilation works:
gcc -o <output-file-name> <input-file-name>
npr.
gcc -o output_program program.c
4.	Execute with the command:
./output_program

3.2 Possible problems when compiling or executing a program
Problem with variable Path
If the following error occurs when starting gcc:
'gcc' is not recognized as an internal or external command, operable program or batch file.
then probably the variable Path is not set or refreshed correctly. In this case, the following steps should be taken. After each step, you can check if the problem is resolved.
1.	Check that the variable Path is set correctly by typing the command
echo %Path%
If the error is a path, repair it as described in the previous section.
2.	Close all command prompts and reopen the command prompt.
3.	In Task manageru restart explorer.exe
4.	Restart the computer

3.2.1.1	Problem with antivirus software:
If the following error occurs when starting the compiled program (executable .exe file):
The system cannot execute the specified program
it is possible that the built-in security mechanism (Windows Defender) or other antivirus software automatically blocks the launch of an unknown executable file. It is then necessary to disable the blocking of programs running from the folder where the .exe is created.
For Windows Defender, this can be done as follows:
Select Control Panel -> Windows Defender, and in the upper right corner, click Settings.
In the newly-opened window, under Exclusions, choose Add an exclusion.
In the following window, select Exclude a folder and then select the folder where the program code is located (e.g. C:\IPRO).
You should then reattempt the program compilation using the gcc command and run the executable program (.exe).


4	Writing and compiling programs in an integrated development environment
Knowledge of elementary editing of a program by notepad or a similar text editor, compiling programs from the command line, and running programs from the command line, is mandatory and will be tested during laboratory exercises.
Integrated Development Environments (IDEs) are used to make writing, compiling, and testing programs easier. In the Introduction to Programming course, we will use Visual Studio Code development environment, because it is an open source program, runs on multiple platforms (Windows, Linux, Mac), the installation package is relatively small compared to other similar environments, installation is fast and can be used for programming in any programming language, provided that a suitable compiler is installed on your computer, such as the MinGW package whose installation and use is described in the previous sections. The following assumes that MinGW is installed in accordance with the instructions in the previous sections.
Installation of the environment
Visual Studio Code (VSC) is downloaded from the link
https://code.visualstudio.com/download
After selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.
The VSC desktop treats a single folder within the file system as a project. Therefore, the first action to take is to open the folder in which the program files are or will be located, such as the folder where we tested the compiler gcc (File -> Open Folder...).
The VSC toolbar consists of the following icons:
Explorer (work with files in the currently open folder)
Search (search for content in the currently open folder and subfolders)
Source control (working with GIT version control system)
Debug (running a program and troubleshooting a program)
Extensions (installing a VSC extension)

First, you need to install an extension that allows you to run programs in the C or C ++ programming language. In the extension search box, type C / C ++ and then select the Microsoft extension.
After downloading, it is necessary to restart the VSC by pressing a button Reload.

Configure the environment for simple programs
Unfortunately, VSC is not yet configured to compile C programs. Configuration can be done through menus, but the simplest way is to create a .vscode subfolder (note that the name begins with a dot) and in this colder, create two files written in Java Script Object Notation, JSON:
tasks.json	describes the tasks to be performed as part of the program compilation
launch.json	describes how to run the executable program
Files are created by selecting the folder within which the files should be created, selecting the appropriate icon and typing in the name of the new file.
The following code should be copied to the window on the right in the tasks.json file:
{
    "version": "2.0.0",
    "tasks": [{
        "label": "Build with gcc",
        "type": "shell",
        "command": "gcc",
        "args": ["-g", "-std=c11", "-pedantic-errors",
            "-Wall", "-o", "program.exe", "${file}"
        ]
    }]
}

Basically, we are creating a task that will be called Build with gcc ("label"), which is an operating system command ("type":"Shell"), and the specific command that is executed is gcc ("Command"). "args" is a list of arguments of an external program call. ${file} is the name of the currently open program file, so the program.c is currently open in the window, the previous description will result in the execution of the following operating system command:
gcc -g -std=c11 -pedantic-errors -Wall -o program.exe program.c

that is, a known compiler call which will create program.exe.
The only novelty here is an option -g which adds an interaction with the debugger to the executable code.
It should be noted that this configuration is only good for programs that consist of a single source file, but therefore allows the same folder contain an unlimited number of such simple programs.
The file launch.json should be created in the same way, with the following content
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "C Launch",
            "preLaunchTask": "Build with gcc",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceRoot}/program.exe",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceRoot}",
            "environment": [],
            "externalConsole": true,
            "miDebuggerPath": "gdb.exe",
            "linux": {
                "MIMode": "gdb"
            },
            "osx": {
                "MIMode": "lldb"
            },
            "windows": {
                "MIMode": "gdb"
            }
        }
    ]
}
In short, we have given the name of the job that must be started before our program is started ("preLaunchTask"), the path to our program ("program") and the path to the debugger("miDebuggerPath"). The name of the job ("preLaunchTask") must match the text in the option "label" in tasks.json.  It should be noted that in this case, the character separating the levels of folders in the slash (/) not the backslash (\).
In the above configuration("miDebuggerPath") it is understood that system variable Path contains the folder in which debugger gdb.exe is installed. If this is not the case, the correct absolute path to the file gdb.exe must be entered.
Now all we have to do is open our source program file (because the configuration specifies that the program currently open in the editor is compiled) select Debug and start the program by pressing Start debugger or simply by pressing the key F5 on the keyboard.
Consequently, the program will be compiled as described in prelaunch task in tasks.json and then, if compilation is successful, the program will be executed described in launch.json.
If the program has been modified in any way in the meantime, mark x after the program name will change into a circle and changes will need to be saved before the compilation with File/Save or Ctrl-S.
This action will print the text Introduction to Programming in a new window, which will then close immediately. To prevent the window from closing immediately, a breakpoint should be placed on the last line of the program by clicking the mouse at the very beginning of the line containing the return command.
If a new folder is created for another program or programs, .vscode folder should be copied there and all the preparatory actions are done.
The basics of working with a debugger
Program behavior is easily monitored using debugger. To demonstrate how such a program works, we will replace the content of program.c with
#include<stdio.h>

int main(void){
   int i;
   i = 0;
   i = i + 1;
   printf("Value of i: %d\n", i);
   return 0;
}
and monitor the execution of that program step by step.
In short, we define one variable here, set it’s initial value, increase it by 1, and finally print its final value in a window with accompanying text.
In the program, we first set a breakpoint at the statement where to pause the execution, by left-clicking at the very beginning of the corresponding line.
After compilation, the program starts executing and then stops at the breakpoint.
Bringing the mouse cursor over a variable name gives you an insight into its value.
Remeber definition of a variable only provides memory space, but not a default value.
Debugger’s toolbar responds with a popup window that lets you see the meaning of each icon together with the keyboard shortcut which triggers the corresponding action and contains the following commands (action names and corresponding shortcuts are listed in parentheses):
Continue running to the end or next breakpoint (Continue, F5)
Execute the following statement without entering the function code (Step over, F10)
Execute the following statement entering the function code (Step into, F11)
Exit the current function (Step out, Shift-F11)
Restart the program with recompilation (Restart, Ctrl-Shift-F5)
Stop the program (Stop, Shift-F5)
If the following statement is executed with the Step over action, the program stops after executing the command, and hovering over the variable name indicates that the content has changed.
The state of several variables in the surrounding of statement where the program stopped can be monitored in the Locals window. In larger programs, some variables that are not in immediate surrounding of the current statement may disappear from the Locals window. In such a case, the variable or expression whose value we want to watch constantly can be added to the Watch window.
If variable i is set to 0 in Watch window, after performing the statement i = i + 1, value of variable i in Watch window will be 1.
If Step into action is triggered at this point, the debugger will enter printf system function and the statements comprising printf will be shown. This is rarely necessary.  Step out action exits such a function, executing the rest of the commands in the function.

Configure the environment for more complex programs
More complex programs regularly consist of multiple source files (modules), because orientation in a large source file is difficult. If the program consists of files (modules) e.g. p1.c, p2.c i p3.c, in tasks.json, in line
"args": ["-g", "-std=c11", "-pedantic-errors",
 "-Wall", "-o",  "program.exe", "${file}"]
"${file}" shoud be replaced with list of modules comprising the program:
"args": ["-g", "-std=c11", "-pedantic-errors",
 "-Wall", "-o",  "program.exe", "p1.c", "p2.c", "p3.c"]
The disadvantage of this approach is that all modules listed here are compiled every timy, regardless of whether they have been modified in the meantime.

Configure the environment for complex programs using make
Unnecessary compilations can be avoided using the program make, which utilizes executable program dependencies on object code files, and object code files on source code files. If the program detects that, for example, the source code file is newer than the object code file that depends on it, it will be compiled. Files whose source code is older than the corresponding object code will not be compiler.
Program make can be found in C: \MinGW\bin (or in the appropriate folder if MinGW is not installed with default destination) under a non-standard name mingw32-make.exe, so it is useful to copy it first to make.exe with copy
copy C:\MinGW\bin\mingw32-make.exe C:\MinGW\bin\make.exe

The dependencies are described by rules in the Makefile file, which should be located in the same folder as the source code files.
Makefile which describes the compilation of program.c to program.exe:
program.exe: program.o
	gcc -o program.exe program.o
program.o: program.c
	gcc -c -g -std=c11 -pedantic-errors -Wall program.c
Here we have defined that program.exe (executable code) depends on program.o (object code), and that program.o  depends on program.c. If program.c is changed, this file will become newer than program.o, wich results, due to the option -c (compile), in compilation into object code, which will make the object code newer than the executable one, causing linking.
It is important to know that the indentation of a command that is executed for an appropriate rule is mandatory, with a tab character, and that the line describing the dependency of the executable code on the object code must be written first.
In practice, there will also be dependencies on the object code file and header (.h) files that are included in the compilation by the preprocessor command #include.
If, for example, a program consists of two modules, p1.c i p2.c where the first includes h1.h i h2.h, and the second includes h3.h, this will be defined in the following Makefile:
program.exe: p1.o p2.o
	gcc -o program.exe program.o
p1.o: p1.c h1.h h2.h
	gcc -c -g -std=c11 -pedantic-errors -Wall p1.c
p2.o: p2.c h3.h
	gcc -c -g -std=c11 -pedantic-errors -Wall p2.c
tasks.json must now describe the call of program make. I can be done by replacing the gcc call with a make program call while deleting the argument list (make does not require arguments if dependencies are described in the file Makefile, otherwise the arguments at the call should be  -f name_of_make_file). Alternatively, in tasks.json a new task can be added as follows:
{
    "version": "2.0.0",
    "tasks": [{
            "label": "Build with gcc",
            "type": "shell",
            "command": "gcc",
            "args": ["-g", "-std=c11", "-pedantic-errors",
                "-Wall", "-o", "program.exe", "${file}"
            ]
        },
        {
            "label": "Build with make",
            "type": "shell",
            "command": "make"
        }
    ]
}
In any case, care should be taken that the option"preLaunchTask" in launch.json references the corresponding task, in this example like this:
"preLaunchTask": "Build with make"

4.1.1	Optional: Universal Makefile
In the previous examples, only the basic functionality of the program make was shown. With knowledge of more advanced functionalities, the details of which we will not dwell into here, it is possible to write Makefile which can be used to compile programs of any complexity, without explicitly specifying individual components and their dependencies. Very superficially explained, all the files with the extension .c are source files for the program, and all the files with the extension .o are object code and are derived from the source code of the same base name. The compiler name and options are stored in variables CC and CFLAGS.
CC = gcc
CFLAGS=-c -g -std=c11 -pedantic-errors -Wall
SRCS=$(wildcard *.c)
INCLUDES=$(wildcard *.h)
OBJS=$(SRCS:.c=.o)

main.exe: $(OBJS)
	$(CC) -o $@ $(OBJS)

$(OBJS) : %.o: %.c $(INCLUDES)
	$(CC) $(CFLAGS) -c $<

clean:
	del *.o *.exe
There last rule allows us to delete all object and executable code files. This, like any other single rule, can be executing by calling the program make specifying the name of the rule to be executed, in this example make clean. The first subsequent make program call will cause all the program modules to be compiled.
Formatting the code
Properly formatted code is a prerequisite for the readability of the program. The C compiler will seamlessly compile the following program:

#include <stdio.h>
int main(void) { if
(1) { printf ("1"); } else {
printf ("2"); }}

but such a program it is almost impossible for a human to manage. Let’s compare the previous program with the equivalent but neatly formatted one:

#include <stdio.h>

int main(void) {
   if (1) {
      printf("1");
   } else {
      printf("2");
   }
}
The VSC extension for C/C ++ will format the code with a command Alt-Shift-F.
The automatic code formatting while saving changes is built into this extension, but is turned off by default. The automatic code formatting setting while saving changes can be set in File/Preferences/Settings.
This, as well as all VSC settings, can be set at the user level (User settings, will be valid in any project/folder) or at the folder level (Workspace settings, will only be valid in the current folder). It is therefore necessary to first indicate the level (in the following example User settings to make the setting valid in other projects as well). Then search for the setting by typing the name of the setting in the search box. Some settings can be edited in the appropriate fields, some, for now (the environment is in constant development) by editing the JSON object. The specific setting is edited by editing the JSON object.
Click the pencil icon in the line editor.formatOnSave and select true.
The default formatting style is somewhat wasteful. While saving the above program code, it will be automatically formatted as follows:
#include <stdio.h>
int main(void)
{
	if (1)
	{
		printf("1");
	}
	else
	{
		printf("2");
	}
}
This can be changed by adding a file named .clang-format to the folder containing the source code.
This file should contain the setting IndentWidth by which we determine the depth of indentation of each level of program statements. It is recommended to indent by 3 letters
IndentWidth: 3
The blank behind the colon is required.
The tab width in the VSC settings also needs to be changed to format properly. Go to File -> Preferences -> Settings.
In the search box in the window that opens to the right, type a tab and set the Tab size to 3 (default value is 4).
With the existence of the file .clang-format, the program will be formatted optimally when saved, in terms of the number of program lines consumed and its readability:
#include <stdio.h>
int main(void) {
   if (1) {
      printf("1");
   } else {
      printf("2");
   }
}
It is also possible to enter the BasedOnStyle setting in this file to determine the formatting style. Allowed values are LLVM (this is also the default value), Google, Chromium, Mozilla and WebKit.
We leave it to the readers to experiment with these settings.


5	VSC configuration files
The configuration.zip file contains all the configuration files described in this text. The entire contents of this compressed file should be copied to a folder containing the original programs, for example: C:\IPRO
The folder can then be opened in the VSC and all is ready to edit and compile a program.
There are different configurations built into these configuration files, so you need to select the C Launch configuration to be used for compilation and execution.
