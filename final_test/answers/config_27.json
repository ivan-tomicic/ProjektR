{
    "config": {
        "retriever_type": "rerank",
        "embeddings_func": "embeddings_3",
        "vectorstore_func": "vectorstore_1",
        "rerank_func": "rerank_1",
        "chunk_size": 500,
        "chunk_overlap": 50,
        "number_of_retrievals": 10,
        "top_number_of_retrievals": 4
    },
    "answers": [
        {
            "question_number": "q_1",
            "question": "What does a compiler do? What does a linker do?",
            "answer": "A compiler translates source code into object code. A linker links the object code with required libraries to create an executable program.",
            "source_documents": [
                {
                    "page_content": "b)\tLinking to the executable code is done by a program called the linker. This program merges all the required object code files with the pre-programmed libraries and creates executable code that can be run directly from the operating system.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "a)\tThe translation into object code is done by a program called the compiler. The compiler translates the source file and creates the object code file (usually with the extension .o) that cannot yet be run because it does not yet have links to functions and variables from other object code files and libraries where standard functions (input / output, mathematical functions, etc.) have been prepared.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "Here we have defined that program.exe (executable code) depends on program.o (object code), and that program.o  depends on program.c. If program.c is changed, this file will become newer than program.o, wich results, due to the option -c (compile), in compilation into object code, which will make the object code newer than the executable one, causing linking.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "Instructions for compiling programs written in programming language C",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "b)\tLinking to the executable code is done by a program called the linker. This program merges all the required object code files with the pre-programmed libraries and creates executable code that can be run directly from the operating system.\n\na)\tThe translation into object code is done by a program called the compiler. The compiler translates the source file and creates the object code file (usually with the extension .o) that cannot yet be run because it does not yet have links to functions and variables from other object code files and libraries where standard functions (input / output, mathematical functions, etc.) have been prepared.\n\nHere we have defined that program.exe (executable code) depends on program.o (object code), and that program.o  depends on program.c. If program.c is changed, this file will become newer than program.o, wich results, due to the option -c (compile), in compilation into object code, which will make the object code newer than the executable one, causing linking.\n\nInstructions for compiling programs written in programming language C",
            "time": 44.81,
            "evaluation": {
                "bleu_score": 6.051297874459006e-155,
                "rouge_score": {
                    "precision": 0.24242424242424243,
                    "recall": 0.21153846153846154,
                    "f1": 0.2258454106280193
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "4"
                }
            }
        },
        {
            "question_number": "q_2",
            "question": "How do I install the MinGW package?",
            "answer": "To install the MinGW package, download the installer mingw-get-setup.exe from http://sourceforge.net/projects/mingw/files/latest/download?source=files. Then execute it, press Install on the first form, Continue on the next one, and then Continue again to start MinGW Installation Manager. Alternatively, you can follow these steps:\n1. Create a folder for MinGW files (e.g., C:\\MinGW)\n2. Download the archive MinGW.zip and extract it into the folder\n3. Set the system variable Path according to instructions\n4. Add the path to the folder where the MinGW package is installed (normally C:\\MinGW\\bin) to the list of folders where executable programs are searched",
            "source_documents": [
                {
                    "page_content": "2\tInstalling MinGW\nThe installer mingw-get-setup.exe will be downloaded automatically from the page http://sourceforge.net/projects/mingw/files/latest/download?source=files.\nThe downloaded program must be executed. On the first form shown, press the Install button. On the next form, press Continue. It will initiate download of MinGW Installation Manager. When downloaded, press Continue to start MinGW Installation Manager.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "An alternative way of installation\nStudents who have problems installing the latest version of MinGW on their Windows computer can try this alternative method:\n1.\tCreate a folder on your computer to place MinGW files (e.g. C:\\MinGW)\n2.\tDownload the archive MinGW.zip from the file repository and extract it into the folder created above\n3.\tSet the system variable Path according to the instructions above",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "A window will open with all the folders where the operating system looks for executable programs, where you need to click New.\nIn the newly created blank field at the bottom of the list, enter the path to the folder where the MinGW package is installed to (normally C:\\MinGW\\bin), and press OK.\nIn older versions of Windows, a window will open. There, in the Variable value field, the text: \";C:\\MinGW\\bin\\\" should be appended to existing text.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "In left column, select Basic Setup. In next column, select (Mark for Installation) item mingw32-base. Next, from the menu, select Installation -> Apply Changes and in the newly opened window, press the button Apply.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "2\tInstalling MinGW\nThe installer mingw-get-setup.exe will be downloaded automatically from the page http://sourceforge.net/projects/mingw/files/latest/download?source=files.\nThe downloaded program must be executed. On the first form shown, press the Install button. On the next form, press Continue. It will initiate download of MinGW Installation Manager. When downloaded, press Continue to start MinGW Installation Manager.\n\nAn alternative way of installation\nStudents who have problems installing the latest version of MinGW on their Windows computer can try this alternative method:\n1.\tCreate a folder on your computer to place MinGW files (e.g. C:\\MinGW)\n2.\tDownload the archive MinGW.zip from the file repository and extract it into the folder created above\n3.\tSet the system variable Path according to the instructions above\n\nA window will open with all the folders where the operating system looks for executable programs, where you need to click New.\nIn the newly created blank field at the bottom of the list, enter the path to the folder where the MinGW package is installed to (normally C:\\MinGW\\bin), and press OK.\nIn older versions of Windows, a window will open. There, in the Variable value field, the text: \";C:\\MinGW\\bin\\\" should be appended to existing text.\n\nIn left column, select Basic Setup. In next column, select (Mark for Installation) item mingw32-base. Next, from the menu, select Installation -> Apply Changes and in the newly opened window, press the button Apply.",
            "time": 65.25,
            "evaluation": {
                "bleu_score": 9.026913085000418e-79,
                "rouge_score": {
                    "precision": 0.07807807807807808,
                    "recall": 0.37002128306476134,
                    "f1": 0.12885574869737804
                },
                "diversity": 0.956989247311828,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "4",
                    "overall_quality_and_engagement": "4"
                }
            }
        },
        {
            "question_number": "q_3",
            "question": "What are all the ways I can set the System variable Path?",
            "answer": "There are several ways to set the system variable Path, but two of them are described above:\n1. Through a graphical interface in Control Panel:\nControl Panel -> System and Security -> System -> Advanced system settings -> Environment Variables -> Select Path from the list System variables and click Edit.\n2. In the command window by using the setx command:\nsetx Path \"%Path%;C:\\MinGW\\Bin\"\nRemember to check the length of the existing content before setting the variable, as there is a built-in restriction on the length of a variable to 1024 characters.",
            "source_documents": [
                {
                    "page_content": "Setting the system variable Path through a graphical interface\nThe system variable Path can be set in Control Panel:\nControl Panel -> System and Security -> System\nYou need to click the link Advanced system settings in in the left menu.\nIn the newly opened window, select the tab Advanced in top menu and then press the button Environment Variables.\nAfter that, choose Path from the list System variables and click Edit.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "2.1.1\tSetting the system variable Path in the command window\nThe system variable Path is easily set in a command window by a command\nsetx Path \"%Path%;C:\\MinGW\\Bin\"\nThe setx command written in this way sets the new value of the variable Path by adding text  ;C:\\MinGW\\Bin to it's old value.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "After the installation is completed, the system variable Path must be set by adding a path to the folder bin of the MinGW package. This system variable contains a list of folders where the operating system looks for executable programs that the user attempts to run by specifying their name.\nIf MinGW is installed with the default settings, the path to the folder bin will be C:\\MinGW\\bin.\nThis can be done in several ways, but the simplest way to do it is in the command prompt.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "Unfortunately, the command setx has a built-in restriction on the length of a variable to 1024 characters, so before the call it is necessary to check that the existing content is not too long, which can be checked by the command echo:\necho %Path%\nIf the following message appears when setting the variable Path:\nWARNING: The data being saved is truncated to 1024 characters.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "Setting the system variable Path through a graphical interface\nThe system variable Path can be set in Control Panel:\nControl Panel -> System and Security -> System\nYou need to click the link Advanced system settings in in the left menu.\nIn the newly opened window, select the tab Advanced in top menu and then press the button Environment Variables.\nAfter that, choose Path from the list System variables and click Edit.\n\n2.1.1\tSetting the system variable Path in the command window\nThe system variable Path is easily set in a command window by a command\nsetx Path \"%Path%;C:\\MinGW\\Bin\"\nThe setx command written in this way sets the new value of the variable Path by adding text  ;C:\\MinGW\\Bin to it's old value.\n\nAfter the installation is completed, the system variable Path must be set by adding a path to the folder bin of the MinGW package. This system variable contains a list of folders where the operating system looks for executable programs that the user attempts to run by specifying their name.\nIf MinGW is installed with the default settings, the path to the folder bin will be C:\\MinGW\\bin.\nThis can be done in several ways, but the simplest way to do it is in the command prompt.\n\nUnfortunately, the command setx has a built-in restriction on the length of a variable to 1024 characters, so before the call it is necessary to check that the existing content is not too long, which can be checked by the command echo:\necho %Path%\nIf the following message appears when setting the variable Path:\nWARNING: The data being saved is truncated to 1024 characters.",
            "time": 64.94,
            "evaluation": {
                "bleu_score": 0.041027302762554146,
                "rouge_score": {
                    "precision": 0.11355311355311355,
                    "recall": 0.298338779956427,
                    "f1": 0.16442583701427568
                },
                "diversity": 0.967032967032967,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_4",
            "question": "How do I translate and execute a simple program using shell commands?",
            "answer": "To translate and execute a simple program using shell commands, you can use the gcc compiler with appropriate options. For example, to compile a C program named \"program.c\" with options -std=c11, -pedantic-errors, -Wall, and save the output as \"program.exe\", you would use the command:\ngcc -std=c11 -pedantic-errors -Wall program.c -o program.exe\nTo execute the compiled program, you can simply type its name followed by any necessary arguments in the command prompt:\nprogram argument1 argument2 \u2026 argumentn\nFor example, if your program takes two arguments, you would run it like this:\nprogram argument1 argument2",
            "source_documents": [
                {
                    "page_content": "The command that translates the program with the options listed above looks like this:\n\ngcc -std=c11 -pedantic-errors -Wall program.c -o program.exe",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "The command prompt allows you to directly execute operating system commands, which generally looks like this:\nprogram argument1 argument2 \u2026 argumentn",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n            \"label\": \"Build with gcc\",\n            \"type\": \"shell\",\n            \"command\": \"gcc\",\n            \"args\": [\"-g\", \"-std=c11\", \"-pedantic-errors\",\n                \"-Wall\", \"-o\", \"program.exe\", \"${file}\"\n            ]\n        },\n        {\n            \"label\": \"Build with make\",\n            \"type\": \"shell\",\n            \"command\": \"make\"\n        }\n    ]\n}",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "Basically, we are creating a task that will be called Build with gcc (\"label\"), which is an operating system command (\"type\":\"Shell\"), and the specific command that is executed is gcc (\"Command\"). \"args\" is a list of arguments of an external program call. ${file} is the name of the currently open program file, so the program.c is currently open in the window, the previous description will result in the execution of the following operating system command:",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "The command that translates the program with the options listed above looks like this:\n\ngcc -std=c11 -pedantic-errors -Wall program.c -o program.exe\n\nThe command prompt allows you to directly execute operating system commands, which generally looks like this:\nprogram argument1 argument2 \u2026 argumentn\n\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n            \"label\": \"Build with gcc\",\n            \"type\": \"shell\",\n            \"command\": \"gcc\",\n            \"args\": [\"-g\", \"-std=c11\", \"-pedantic-errors\",\n                \"-Wall\", \"-o\", \"program.exe\", \"${file}\"\n            ]\n        },\n        {\n            \"label\": \"Build with make\",\n            \"type\": \"shell\",\n            \"command\": \"make\"\n        }\n    ]\n}\n\nBasically, we are creating a task that will be called Build with gcc (\"label\"), which is an operating system command (\"type\":\"Shell\"), and the specific command that is executed is gcc (\"Command\"). \"args\" is a list of arguments of an external program call. ${file} is the name of the currently open program file, so the program.c is currently open in the window, the previous description will result in the execution of the following operating system command:",
            "time": 61.59,
            "evaluation": {
                "bleu_score": 2.9450343172727066e-155,
                "rouge_score": {
                    "precision": 0.08333333333333333,
                    "recall": 0.4166666666666667,
                    "f1": 0.13815324858757064
                },
                "diversity": 0.9347826086956522,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_5",
            "question": "Explain me how to setup Visual Studio Code for Linux operating system.",
            "answer": "To set up Visual Studio Code for a Linux operating system, follow these steps:\n1. Download VSC from https://code.visualstudio.com/download.\n2. Select the platform (Linux) and download the installer.\n3. Run the installer and complete the installation process.\n4. Search for \"C / C ++\" in the extension search box, select the Microsoft extension, and download it.\n5. Restart VSC by pressing the \"Reload\" button.\n6. Add a tasks.json file to your project with the following content:\n```json\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n            \"label\": \"Build with gcc\",\n            \"type\": \"shell\",\n            \"command\": \"gcc\",\n            \"args\": [\"-g\", \"-std=c11\", \"-pedantic-errors\",\n                \"-Wall\", \"-o\", \"program.exe\", \"${file}\"\n            ]\n        },\n        {\n            \"label\": \"Build with make\",\n            \"type\": \"shell\",\n            \"command\": \"make\"\n        }\n   ",
            "source_documents": [
                {
                    "page_content": "Installation of the environment\nVisual Studio Code (VSC) is downloaded from the link\nhttps://code.visualstudio.com/download\nAfter selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "First, you need to install an extension that allows you to run programs in the C or C ++ programming language. In the extension search box, type C / C ++ and then select the Microsoft extension.\nAfter downloading, it is necessary to restart the VSC by pressing a button Reload.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n            \"label\": \"Build with gcc\",\n            \"type\": \"shell\",\n            \"command\": \"gcc\",\n            \"args\": [\"-g\", \"-std=c11\", \"-pedantic-errors\",\n                \"-Wall\", \"-o\", \"program.exe\", \"${file}\"\n            ]\n        },\n        {\n            \"label\": \"Build with make\",\n            \"type\": \"shell\",\n            \"command\": \"make\"\n        }\n    ]\n}",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "Instructions for compiling programs written in programming language C",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "Installation of the environment\nVisual Studio Code (VSC) is downloaded from the link\nhttps://code.visualstudio.com/download\nAfter selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.\n\nFirst, you need to install an extension that allows you to run programs in the C or C ++ programming language. In the extension search box, type C / C ++ and then select the Microsoft extension.\nAfter downloading, it is necessary to restart the VSC by pressing a button Reload.\n\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n            \"label\": \"Build with gcc\",\n            \"type\": \"shell\",\n            \"command\": \"gcc\",\n            \"args\": [\"-g\", \"-std=c11\", \"-pedantic-errors\",\n                \"-Wall\", \"-o\", \"program.exe\", \"${file}\"\n            ]\n        },\n        {\n            \"label\": \"Build with make\",\n            \"type\": \"shell\",\n            \"command\": \"make\"\n        }\n    ]\n}\n\nInstructions for compiling programs written in programming language C",
            "time": 74.51,
            "evaluation": {
                "bleu_score": 0.11497570949642517,
                "rouge_score": {
                    "precision": 0.46964285714285714,
                    "recall": 0.2541185313936439,
                    "f1": 0.3297816973547858
                },
                "diversity": 0.9541284403669725,
                "human_eval": {
                    "expression_and_logic": "4",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "4"
                }
            }
        },
        {
            "question_number": "q_6",
            "question": "Give me the basics of using a debugger in Visual Studio Code.",
            "answer": "To use a debugger in Visual Studio Code, follow these steps:\n1. Install a debugger extension like \"miDebuggerPath\" from the Visual Studio Code marketplace.\n2. Set up your configuration by adding the following to your settings.json file:\n   {\n     \"miDebuggerPath\": \"/path/to/gdb.exe\",\n   }\n3. Open your source program file in Visual Studio Code.\n4. Place a breakpoint on the line where you want the debugger to pause execution.\n5. Start the debugger by selecting Debug > Start Debugger or pressing F5 on your keyboard.\n6. The debugger will now stop at the breakpoint, allowing you to step through your code and troubleshoot any issues.",
            "source_documents": [
                {
                    "page_content": "The basics of working with a debugger\nProgram behavior is easily monitored using debugger. To demonstrate how such a program works, we will replace the content of program.c with\n#include<stdio.h>",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "This action will print the text Introduction to Programming in a new window, which will then close immediately. To prevent the window from closing immediately, a breakpoint should be placed on the last line of the program by clicking the mouse at the very beginning of the line containing the return command.\nIf a new folder is created for another program or programs, .vscode folder should be copied there and all the preparatory actions are done.\nThe basics of working with a debugger",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "In the above configuration(\"miDebuggerPath\") it is understood that system variable Path contains the folder in which debugger gdb.exe is installed. If this is not the case, the correct absolute path to the file gdb.exe must be entered.\nNow all we have to do is open our source program file (because the configuration specifies that the program currently open in the editor is compiled) select Debug and start the program by pressing Start debugger or simply by pressing the key F5 on the keyboard.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "Debug (running a program and troubleshooting a program)\nExtensions (installing a VSC extension)",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "The basics of working with a debugger\nProgram behavior is easily monitored using debugger. To demonstrate how such a program works, we will replace the content of program.c with\n#include<stdio.h>\n\nThis action will print the text Introduction to Programming in a new window, which will then close immediately. To prevent the window from closing immediately, a breakpoint should be placed on the last line of the program by clicking the mouse at the very beginning of the line containing the return command.\nIf a new folder is created for another program or programs, .vscode folder should be copied there and all the preparatory actions are done.\nThe basics of working with a debugger\n\nIn the above configuration(\"miDebuggerPath\") it is understood that system variable Path contains the folder in which debugger gdb.exe is installed. If this is not the case, the correct absolute path to the file gdb.exe must be entered.\nNow all we have to do is open our source program file (because the configuration specifies that the program currently open in the editor is compiled) select Debug and start the program by pressing Start debugger or simply by pressing the key F5 on the keyboard.\n\nDebug (running a program and troubleshooting a program)\nExtensions (installing a VSC extension)",
            "time": 59.8,
            "evaluation": {
                "bleu_score": 0.018256282985706602,
                "rouge_score": {
                    "precision": 0.31796116504854366,
                    "recall": 0.09675126587780924,
                    "f1": 0.14834581413210446
                },
                "diversity": 0.9504950495049505,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "4",
                    "overall_quality_and_engagement": "4"
                }
            }
        },
        {
            "question_number": "q_7",
            "question": "How can I create a universal Makefile?",
            "answer": "A universal Makefile is not possible, as it would require knowledge of all source files and their dependencies in any given project. Instead, you should create a Makefile that is specific to your current project and its requirements.",
            "source_documents": [
                {
                    "page_content": "In the previous examples, only the basic functionality of the program make was shown. With knowledge of more advanced functionalities, the details of which we will not dwell into here, it is possible to write Makefile which can be used to compile programs of any complexity, without explicitly specifying individual components and their dependencies. Very superficially explained, all the files with the extension .c are source files for the program, and all the files with the extension .o are",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "If, for example, a program consists of two modules, p1.c i p2.c where the first includes h1.h i h2.h, and the second includes h3.h, this will be defined in the following Makefile:\nprogram.exe: p1.o p2.o\n\tgcc -o program.exe program.o\np1.o: p1.c h1.h h2.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p1.c\np2.o: p2.c h3.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p2.c",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "4.1.1\tOptional: Universal Makefile",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "The dependencies are described by rules in the Makefile file, which should be located in the same folder as the source code files.\nMakefile which describes the compilation of program.c to program.exe:\nprogram.exe: program.o\n\tgcc -o program.exe program.o\nprogram.o: program.c\n\tgcc -c -g -std=c11 -pedantic-errors -Wall program.c",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "In the previous examples, only the basic functionality of the program make was shown. With knowledge of more advanced functionalities, the details of which we will not dwell into here, it is possible to write Makefile which can be used to compile programs of any complexity, without explicitly specifying individual components and their dependencies. Very superficially explained, all the files with the extension .c are source files for the program, and all the files with the extension .o are\n\nIf, for example, a program consists of two modules, p1.c i p2.c where the first includes h1.h i h2.h, and the second includes h3.h, this will be defined in the following Makefile:\nprogram.exe: p1.o p2.o\n\tgcc -o program.exe program.o\np1.o: p1.c h1.h h2.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p1.c\np2.o: p2.c h3.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p2.c\n\n4.1.1\tOptional: Universal Makefile\n\nThe dependencies are described by rules in the Makefile file, which should be located in the same folder as the source code files.\nMakefile which describes the compilation of program.c to program.exe:\nprogram.exe: program.o\n\tgcc -o program.exe program.o\nprogram.o: program.c\n\tgcc -c -g -std=c11 -pedantic-errors -Wall program.c",
            "time": 46.6,
            "evaluation": {
                "bleu_score": 2.3924808060417718e-79,
                "rouge_score": {
                    "precision": 0.2697368421052631,
                    "recall": 0.07647899686792813,
                    "f1": 0.1191619777363829
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "4",
                    "overall_quality_and_engagement": "4"
                }
            }
        },
        {
            "question_number": "q_8",
            "question": "What do I use to log in into Edgar?",
            "answer": "To log in to Edgar, you need your username and password provided by your instructor or administrator.",
            "source_documents": [
                {
                    "page_content": "The labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Note: The layout of the graphical user interface elements on the current version of the system Edgar may differ in part from the appearance of the user interface shown in the illustrations later in this document. In case of any ambiguities and/or difficulties when using the system, contact the assistant on duty.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Important: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Instructions for performing laboratory exercises and tests via the Edgar system",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "The labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/\n\nNote: The layout of the graphical user interface elements on the current version of the system Edgar may differ in part from the appearance of the user interface shown in the illustrations later in this document. In case of any ambiguities and/or difficulties when using the system, contact the assistant on duty.\n\nImportant: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.\n\nInstructions for performing laboratory exercises and tests via the Edgar system",
            "time": 32.64,
            "evaluation": {
                "bleu_score": 4.706864481695115e-78,
                "rouge_score": {
                    "precision": 0.31764705882352945,
                    "recall": 0.22535669586983728,
                    "f1": 0.25115836760236016
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "4",
                    "overall_quality_and_engagement": "4"
                }
            }
        },
        {
            "question_number": "q_9",
            "question": "How does the support system in Edgar work?",
            "answer": "The support system in Edgar is called Ticketing system. It allows students to ask questions related to specific tasks while writing tests. To use the system, click on the \"yellow tools\" icon in the upper right corner of the question page.",
            "source_documents": [
                {
                    "page_content": "3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "1\tEdgar system \nThe Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "The labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "In the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\n1\tEdgar system \nThe Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language.\n\nThe labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.",
            "time": 43.63,
            "evaluation": {
                "bleu_score": 0.025312461901512956,
                "rouge_score": {
                    "precision": 0.3951219512195122,
                    "recall": 0.10958915670754106,
                    "f1": 0.17151429684510117
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_10",
            "question": "Is asking for solutions with the ticketing system ok?",
            "answer": "Yes, asking for solutions with the ticketing system is allowed. The purpose of this system is to facilitate communication between students and teaching staff during the writing of tests. If a student has any doubts or questions about a specific task, they can use the Ticketing system to ask for clarification or assistance.",
            "source_documents": [
                {
                    "page_content": "3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "After the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "on a task, the solution must be correct for all test cases prepared for that task.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "3.1\tView own tickets \nOpen and resolved tickets can be viewed the menu option My tickets. \nThis option is useful when the question asked by the student cannot be answered quickly (in time\nduration of the check) because it provides the possibility of subsequent review of the answers of the teaching staff. For example, there is a (fatal) mistake on the part of the teaching staff, and because of that, it is subsequent to all students answer recognized as correct.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.\n\non a task, the solution must be correct for all test cases prepared for that task.\n\n3.1\tView own tickets \nOpen and resolved tickets can be viewed the menu option My tickets. \nThis option is useful when the question asked by the student cannot be answered quickly (in time\nduration of the check) because it provides the possibility of subsequent review of the answers of the teaching staff. For example, there is a (fatal) mistake on the part of the teaching staff, and because of that, it is subsequent to all students answer recognized as correct.",
            "time": 33.93,
            "evaluation": {
                "bleu_score": 1.660290450065641e-78,
                "rouge_score": {
                    "precision": 0.14150943396226415,
                    "recall": 0.5182719241542771,
                    "f1": 0.22198822541228158
                },
                "diversity": 0.9807692307692307,
                "human_eval": {
                    "expression_and_logic": "3",
                    "accuracy_and_relevance": "1",
                    "overall_quality_and_engagement": "1"
                }
            }
        },
        {
            "question_number": "q_11",
            "question": "What is the duration of the second cycle in weeks?",
            "answer": "The duration of the second cycle is 4 weeks.",
            "source_documents": [
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "It should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "After the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "#include <stdio.h>\nint main(void) { if\n(1) { printf (\"1\"); } else {\nprintf (\"2\"); }}\n\nbut such a program it is almost impossible for a human to manage. Let\u2019s compare the previous program with the equivalent but neatly formatted one:\n\n#include <stdio.h>",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n\nIt should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\n#include <stdio.h>\nint main(void) { if\n(1) { printf (\"1\"); } else {\nprintf (\"2\"); }}\n\nbut such a program it is almost impossible for a human to manage. Let\u2019s compare the previous program with the equivalent but neatly formatted one:\n\n#include <stdio.h>",
            "time": 46.23,
            "evaluation": {
                "bleu_score": 0.7506238537503395,
                "rouge_score": {
                    "precision": 0.5555555555555556,
                    "recall": 0.5242424242424242,
                    "f1": 0.5385964912280702
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "1",
                    "overall_quality_and_engagement": "1"
                }
            }
        },
        {
            "question_number": "q_12",
            "question": "What will happen if i dont work continuously?",
            "answer": "If you do not work continuously, your results may suffer significantly. The layered approach in processing materials requires constant effort every week to ensure progress and understanding. Campaign work, where you plan to do no work for a few weeks and then try to catch up all at once, is likely to result in poor performance.",
            "source_documents": [
                {
                    "page_content": "It should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "The running program can be interrupted by pressing the Ctrl and C (Ctrl+C) keys at the same time. \nProgram execution can be paused by pressing the key Pause or a key combination Ctrl+S. To resume running a program stopped in this way, press any key, for example Enter.\nThe exit command terminates the work with the character interface and closes the corresponding window.\nExample:\nhelp help\t(obtaining instructions on the operation of the program help)",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                },
                {
                    "page_content": "If an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "In the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "It should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n\nThe running program can be interrupted by pressing the Ctrl and C (Ctrl+C) keys at the same time. \nProgram execution can be paused by pressing the key Pause or a key combination Ctrl+S. To resume running a program stopped in this way, press any key, for example Enter.\nThe exit command terminates the work with the character interface and closes the corresponding window.\nExample:\nhelp help\t(obtaining instructions on the operation of the program help)\n\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.",
            "time": 54.24,
            "evaluation": {
                "bleu_score": 0.1656462382381817,
                "rouge_score": {
                    "precision": 0.2589285714285714,
                    "recall": 0.23204885112647208,
                    "f1": 0.24472299439939624
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_13",
            "question": "How should i study outside of the lectures if I want to get a good grade?",
            "answer": "To study outside of lectures for a good grade, you should:\n1. Read other literature (see chapter Recommended reading)\n2. Solve published assignments for exercises in addition to lectures.\n3. Test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications.\n4. Use the internet as a resource for learning.",
            "source_documents": [
                {
                    "page_content": "It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Independent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n\nLectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).",
            "time": 56.73,
            "evaluation": {
                "bleu_score": 0.07507311240430026,
                "rouge_score": {
                    "precision": 0.20982142857142855,
                    "recall": 0.20204517704517705,
                    "f1": 0.1957612871558695
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "4",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_14",
            "question": "Which competences are expected to be acquired after completing the subject?",
            "answer": "After completing the subject, the following competences are expected to be acquired:\n1. Ability to understand and apply basic algorithms and data structures.\n2. Skills in programming languages (e.g., C++, Python).\n3. Problem-solving skills through solving a large number of tasks on your own computer.\n4. Error detection and testing skills.\n5. Time management skills for effective use of the allocated time for independent work.",
            "source_documents": [
                {
                    "page_content": "Independent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "With each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "2.2\tCompletion of writing and submission of the test for assessment \nAfter completing all the tasks, the test should be submitted for the final assessment by selecting the \"Submit\" option in the upper right corner of the window. The submission is confirmed once again by selecting \"Yes, submit test!\", but can also be canceled by selecting \"No, continue writing\". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "Independent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n\n2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\n2.2\tCompletion of writing and submission of the test for assessment \nAfter completing all the tasks, the test should be submitted for the final assessment by selecting the \"Submit\" option in the upper right corner of the window. The submission is confirmed once again by selecting \"Yes, submit test!\", but can also be canceled by selecting \"No, continue writing\". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.",
            "time": 53.63,
            "evaluation": {
                "bleu_score": 2.069383946257531e-78,
                "rouge_score": {
                    "precision": 0.1455223880597015,
                    "recall": 0.23489177489177487,
                    "f1": 0.17813474107591756
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_15",
            "question": "How do laboratory exercises work?",
            "answer": "Laboratory exercises consist of two parts: solving multiple choice questions and creating one or more programs. The schedule, topics, and points for each exercise are published on Teams beforehand. Students submit their solutions during lab exercises using the Edgar system.",
            "source_documents": [
                {
                    "page_content": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Laboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "The system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "The labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\n\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.\n\nThe labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/",
            "time": 40.07,
            "evaluation": {
                "bleu_score": 1.2489788295317644e-155,
                "rouge_score": {
                    "precision": 0.3333333333333333,
                    "recall": 0.11347192487249726,
                    "f1": 0.16914869676872776
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "3"
                }
            }
        },
        {
            "question_number": "q_16",
            "question": "Are there negative points on laboratory exercises?",
            "answer": "Yes, there are negative points in the first part of the laboratory exercise, which involves solving multiple choice questions. An incorrect answer obtains negative points, while an unanswered question does not earn negative points.",
            "source_documents": [
                {
                    "page_content": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Links at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "If the compilation of the program is successful, the program will be run on several pre-prepared test cases. If the printout of the program for a case does not correspond to the expected printout, a certain percentage, determined in advance for that case, is deducted from the total number of points provided for the task. This percentage can be 100% if it is a typical test case, for example if a program that determines whether a given number is within the required interval does not work well for",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "the required interval does not work well for numbers inside or outside the interval, or less than 100% if the test case examines program behavior at the boundaries of the interval. The total deducted percentage of points for a task cannot exceed 100%.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\n\nLinks at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.\n\nIf the compilation of the program is successful, the program will be run on several pre-prepared test cases. If the printout of the program for a case does not correspond to the expected printout, a certain percentage, determined in advance for that case, is deducted from the total number of points provided for the task. This percentage can be 100% if it is a typical test case, for example if a program that determines whether a given number is within the required interval does not work well for\n\nthe required interval does not work well for numbers inside or outside the interval, or less than 100% if the test case examines program behavior at the boundaries of the interval. The total deducted percentage of points for a task cannot exceed 100%.",
            "time": 39.77,
            "evaluation": {
                "bleu_score": 0.1883029688693088,
                "rouge_score": {
                    "precision": 0.5220588235294118,
                    "recall": 0.3656754464325997,
                    "f1": 0.42892494929006086
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_17",
            "question": "What should i do with my code before running it in edgar?",
            "answer": "Before running your code in Edgar, you need to prepare and test it outside of the Edgar system. This involves writing the program (using an editor like Notepad++ or VSC), compiling it (by calling the gcc compiler), resolving any errors and warnings, and thoroughly testing it against different test data. Once you are confident that your solution is correct, you can copy-paste the code into Edgar and run it using the \"Run\" option or by pressing Ctrl + Enter while the program code field is in focus.",
            "source_documents": [
                {
                    "page_content": "Important: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "In tasks that require writing of a program, in the Edgar system, below the text of the task, there is a field to which the solution (program code) should be pasted. \nThe program code transferred to the Edgar system can be run in the following ways:\n\u2022\tby selecting the option \u201eRun\u201c\n\u2022\twhile the program code field is in focus (the mouse pointer is in the field), by a key combination Ctrl + Enter",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "In the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "The labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "Important: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.\n\nIn tasks that require writing of a program, in the Edgar system, below the text of the task, there is a field to which the solution (program code) should be pasted. \nThe program code transferred to the Edgar system can be run in the following ways:\n\u2022\tby selecting the option \u201eRun\u201c\n\u2022\twhile the program code field is in focus (the mouse pointer is in the field), by a key combination Ctrl + Enter\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.\n\nThe labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/",
            "time": 66.12,
            "evaluation": {
                "bleu_score": 0.25163780469437086,
                "rouge_score": {
                    "precision": 0.38850574712643676,
                    "recall": 0.5139980491072671,
                    "f1": 0.43746072902856203
                },
                "diversity": 0.9883720930232558,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_18",
            "question": "Where can I find the schedule of the laboratory exercises?",
            "answer": "The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on Teams at least a week before the exercises.",
            "source_documents": [
                {
                    "page_content": "Laboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Instructions for performing laboratory exercises and tests via the Edgar system",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "Laboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\n2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals.\n\n2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n\nInstructions for performing laboratory exercises and tests via the Edgar system",
            "time": 42.18,
            "evaluation": {
                "bleu_score": 0.3759507698223106,
                "rouge_score": {
                    "precision": 0.5789473684210527,
                    "recall": 0.46550464197076935,
                    "f1": 0.5147728045380813
                },
                "diversity": 0.972972972972973,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_19",
            "question": "If I have 0 points from lab excercises, can I pass with a grade of 5?",
            "answer": "No",
            "source_documents": [
                {
                    "page_content": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Laboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Conditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\n\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\nLectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
            "time": 54.78,
            "evaluation": {
                "bleu_score": 0,
                "rouge_score": {
                    "precision": 0.25,
                    "recall": 0.004629629629629629,
                    "f1": 0.00909090909090909
                },
                "diversity": 0.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "3",
                    "overall_quality_and_engagement": "2"
                }
            }
        },
        {
            "question_number": "q_20",
            "question": "What are my options for consultations?",
            "answer": "Your options for consultations are to use the MS Teams platform, at times agreed with the teacher.",
            "source_documents": [
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "1 Introduction",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                },
                {
                    "page_content": "Solutions\n1)\n1. cd c:\\\n2. mkdir exercise\n3. mkdir exercise\\personal \nmkdir exercise\\ipro \n4. cd exercise\\personal \nmkdir txt \nmkdir pictures\n5. cd c:\\exercise\\personal\\pictures \nnpr: copy c:\\users\\hrvoje\\pictures\\*2013*.jpg  . \n6. cd ..\\txt \n7. dir not.here \n8. notepad life.txt (or notepad++ life.txt)\n9. copy life.txt tmp.txt\ncopy life.txt tmp1.txt\n10. tree \\ \ntemporary suspension of execution: Pause (or Ctrl+S)\nresume execution: any key \n11. tree /f ..\\..\n12. help > help.txt\n13. dir",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                }
            ],
            "combined_documents": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n\nconsultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n1 Introduction\n\nSolutions\n1)\n1. cd c:\\\n2. mkdir exercise\n3. mkdir exercise\\personal \nmkdir exercise\\ipro \n4. cd exercise\\personal \nmkdir txt \nmkdir pictures\n5. cd c:\\exercise\\personal\\pictures \nnpr: copy c:\\users\\hrvoje\\pictures\\*2013*.jpg  . \n6. cd ..\\txt \n7. dir not.here \n8. notepad life.txt (or notepad++ life.txt)\n9. copy life.txt tmp.txt\ncopy life.txt tmp1.txt\n10. tree \\ \ntemporary suspension of execution: Pause (or Ctrl+S)\nresume execution: any key \n11. tree /f ..\\..\n12. help > help.txt\n13. dir",
            "time": 47.74,
            "evaluation": {
                "bleu_score": 2.2339708757427394e-78,
                "rouge_score": {
                    "precision": 0.4411764705882353,
                    "recall": 0.26143288084464555,
                    "f1": 0.32715520646655494
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "4"
                }
            }
        },
        {
            "question_number": "q_21",
            "question": "What happens if I do not pass the course during the continuous monitoring of classes?",
            "answer": "If you fail to pass the course during the continuous monitoring of classes, you can take one or more classical exams. The exact time for these exams is TBD.",
            "source_documents": [
                {
                    "page_content": "tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "If an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "The student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "After the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\nThe student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
            "time": 47.95,
            "evaluation": {
                "bleu_score": 0.3093190662798132,
                "rouge_score": {
                    "precision": 0.4224137931034483,
                    "recall": 0.3200832964764853,
                    "f1": 0.36368292674788366
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "4"
                }
            }
        },
        {
            "question_number": "q_22",
            "question": "What will happen if I do not submit the exam on time?",
            "answer": "If you do not submit the exam on time, you will receive a timeout in the system, which means that the test can be canceled later. However, it is important to note that after the evaluation period, the review of individual tasks will no longer be available, but the summary status of the test will still be displayed.",
            "source_documents": [
                {
                    "page_content": "If an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Then it is necessary to wait for the completion of the evaluation.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "The student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "After the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "If an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\nThen it is necessary to wait for the completion of the evaluation.\n\nThe student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
            "time": 47.34,
            "evaluation": {
                "bleu_score": 0.1659468671317189,
                "rouge_score": {
                    "precision": 0.16379310344827586,
                    "recall": 0.3093092105263158,
                    "f1": 0.2037506256256256
                },
                "diversity": 0.9824561403508771,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_23",
            "question": "Who do I contact if I have questions during the exam?",
            "answer": "If you have any questions or doubts during the exam, you should use the Ticketing system provided by Edgar to communicate with the teaching staff. This system allows you to ask questions related to specific tasks while continuing with the test without waiting for an answer.",
            "source_documents": [
                {
                    "page_content": "consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "After the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\n2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\n\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
            "time": 53.87,
            "evaluation": {
                "bleu_score": 2.8338792031635803e-78,
                "rouge_score": {
                    "precision": 0.2391304347826087,
                    "recall": 0.41671292013567685,
                    "f1": 0.2822461852098805
                },
                "diversity": 0.9777777777777777,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "4",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_24",
            "question": "If I got 23 points on my laboratory exercises, 7 points on my lectures, 35 points on my midterm exam, and 23 points on my final exam, will I pass?",
            "answer": "No",
            "source_documents": [
                {
                    "page_content": "3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam\n\nLectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\nthe laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points",
            "time": 54.3,
            "evaluation": {
                "bleu_score": 0,
                "rouge_score": {
                    "precision": 0.0,
                    "recall": 0.0,
                    "f1": 0.0
                },
                "diversity": 0.0,
                "human_eval": {
                    "expression_and_logic": "3",
                    "accuracy_and_relevance": "3",
                    "overall_quality_and_engagement": "3"
                }
            }
        },
        {
            "question_number": "q_25",
            "question": "List me the recommended literature.",
            "answer": "The recommended literature is not provided in this context.",
            "source_documents": [
                {
                    "page_content": "Browsing content on the Internet for additional explanations and examples",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "1 Introduction",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                },
                {
                    "page_content": "recommended to start the editor by specifying the file name (with the possibility of specifying the absolute or relative path):",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                }
            ],
            "combined_documents": "Browsing content on the Internet for additional explanations and examples\n\nIt is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n\n1 Introduction\n\nrecommended to start the editor by specifying the file name (with the possibility of specifying the absolute or relative path):",
            "time": 28.37,
            "evaluation": {
                "bleu_score": 0.0831908492447653,
                "rouge_score": {
                    "precision": 0.38888888888888884,
                    "recall": 0.09577593524768872,
                    "f1": 0.1466709015622059
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "1",
                    "accuracy_and_relevance": "1",
                    "overall_quality_and_engagement": "1"
                }
            }
        },
        {
            "question_number": "q_26",
            "question": "If i have a question for the lecturers, what should my email consist of?",
            "answer": "When sending an email to your lecturer with a question, make sure to include the following information:\n1. Your name and student number\n2. The subject or topic of your question\n3. A clear and concise explanation of your issue or confusion\n4. Any relevant course materials or resources you have already consulted\n5. If applicable, any attempts you have made to resolve the issue on your own or with the help of colleagues\n6. Your preferred method of contact for a response (email, phone call, etc.)\n7. A polite and professional tone throughout the email\nRemember to proofread your email before sending it to ensure there are no errors or misunderstandings.",
            "source_documents": [
                {
                    "page_content": "Also, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "1 Introduction",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                },
                {
                    "page_content": "consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "Also, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n1 Introduction\n\nconsultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\na very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system",
            "time": 51.42,
            "evaluation": {
                "bleu_score": 3.5962451396008616e-155,
                "rouge_score": {
                    "precision": 0.06964285714285715,
                    "recall": 0.3342642588950474,
                    "f1": 0.11112578979232472
                },
                "diversity": 0.9819819819819819,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "3",
                    "overall_quality_and_engagement": "3"
                }
            }
        },
        {
            "question_number": "q_27",
            "question": "What is the course official email address?",
            "answer": "The course official email address is not provided in the given context.",
            "source_documents": [
                {
                    "page_content": "Also, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "\ufeffUniversity of Zagreb\nFaculty of Electrical Engineering and Computing\nDepartment of Applied Computing\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions for using the character interface in Windows",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                },
                {
                    "page_content": "Solutions\n1)\n1. cd c:\\\n2. mkdir exercise\n3. mkdir exercise\\personal \nmkdir exercise\\ipro \n4. cd exercise\\personal \nmkdir txt \nmkdir pictures\n5. cd c:\\exercise\\personal\\pictures \nnpr: copy c:\\users\\hrvoje\\pictures\\*2013*.jpg  . \n6. cd ..\\txt \n7. dir not.here \n8. notepad life.txt (or notepad++ life.txt)\n9. copy life.txt tmp.txt\ncopy life.txt tmp1.txt\n10. tree \\ \ntemporary suspension of execution: Pause (or Ctrl+S)\nresume execution: any key \n11. tree /f ..\\..\n12. help > help.txt\n13. dir",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                },
                {
                    "page_content": "If an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "Also, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\ufeffUniversity of Zagreb\nFaculty of Electrical Engineering and Computing\nDepartment of Applied Computing\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions for using the character interface in Windows\n\nSolutions\n1)\n1. cd c:\\\n2. mkdir exercise\n3. mkdir exercise\\personal \nmkdir exercise\\ipro \n4. cd exercise\\personal \nmkdir txt \nmkdir pictures\n5. cd c:\\exercise\\personal\\pictures \nnpr: copy c:\\users\\hrvoje\\pictures\\*2013*.jpg  . \n6. cd ..\\txt \n7. dir not.here \n8. notepad life.txt (or notepad++ life.txt)\n9. copy life.txt tmp.txt\ncopy life.txt tmp1.txt\n10. tree \\ \ntemporary suspension of execution: Pause (or Ctrl+S)\nresume execution: any key \n11. tree /f ..\\..\n12. help > help.txt\n13. dir\n\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.",
            "time": 46.19,
            "evaluation": {
                "bleu_score": 4.4594254026474685e-155,
                "rouge_score": {
                    "precision": 0.20833333333333331,
                    "recall": 0.18880534670008353,
                    "f1": 0.191034771679933
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "1",
                    "overall_quality_and_engagement": "2"
                }
            }
        },
        {
            "question_number": "q_28",
            "question": "Give me a list of assistants who conduct laboratory exercises.",
            "answer": "I don't know the names of the assistants who conduct laboratory exercises.",
            "source_documents": [
                {
                    "page_content": "Laboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "The system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "Laboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\n2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n\nthe laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\n\nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.",
            "time": 47.15,
            "evaluation": {
                "bleu_score": 5.791739854583281e-155,
                "rouge_score": {
                    "precision": 0.10256410256410257,
                    "recall": 0.1431013431013431,
                    "f1": 0.11655268482118215
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "1",
                    "overall_quality_and_engagement": "2"
                }
            }
        },
        {
            "question_number": "q_29",
            "question": "What subjects can I enroll in when I finish the introduction to programming?",
            "answer": "After completing the Introduction to Programming, you may consider enrolling in more advanced programming courses or other computer science-related subjects depending on your interests and goals.",
            "source_documents": [
                {
                    "page_content": "1 Introduction",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                },
                {
                    "page_content": "Introduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "1\tIntroduction\nElectronic computer programs are prepared in a symbolic, human-understandable programming language. In the course Introduction to programming, for this purpose will use the C programming language.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "1 Introduction\n\nIntroduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\n\n1\tIntroduction\nElectronic computer programs are prepared in a symbolic, human-understandable programming language. In the course Introduction to programming, for this purpose will use the C programming language.\n\n1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.",
            "time": 35.38,
            "evaluation": {
                "bleu_score": 8.06798322521923e-232,
                "rouge_score": {
                    "precision": 0.030864197530864196,
                    "recall": 0.0681013431013431,
                    "f1": 0.04235276552349723
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "4",
                    "overall_quality_and_engagement": "4"
                }
            }
        },
        {
            "question_number": "q_30",
            "question": "How to get a grade of 6?",
            "answer": "To obtain a grade of 6, you need to achieve at least 50 points in total on the written exam and meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period. This means that you should aim for a score between 35 and 49 out of 70 possible points on the written exam. Additionally, actively participate in lectures, take your own notes, and pay close attention to the content of the Independent work chapter.",
            "source_documents": [
                {
                    "page_content": "With each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Conditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "After the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "With each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2\n\nthe content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
            "time": 66.57,
            "evaluation": {
                "bleu_score": 9.131993195773427e-79,
                "rouge_score": {
                    "precision": 0.05185185185185185,
                    "recall": 0.48888888888888893,
                    "f1": 0.09337288345074775
                },
                "diversity": 0.9625,
                "human_eval": {
                    "expression_and_logic": "1",
                    "accuracy_and_relevance": "1",
                    "overall_quality_and_engagement": "1"
                }
            }
        }
    ]
}