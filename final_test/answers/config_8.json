{
    "config": {
        "retriever_type": "rerank",
        "embeddings_func": "embeddings_1",
        "vectorstore_func": "vectorstore_1",
        "rerank_func": "rerank_1",
        "chunk_size": 2000,
        "chunk_overlap": 400,
        "number_of_retrievals": 10,
        "top_number_of_retrievals": 4
    },
    "answers": [
        {
            "question_number": "q_1",
            "question": "What does a compiler do? What does a linker do?",
            "answer": "A compiler is a program that translates source code written in a programming language into machine code, which can be executed by a computer's processor. A linker is a program that links together object files (files created by the compiler) with libraries to create an executable file that can be run directly from the operating system.",
            "source_documents": [
                {
                    "page_content": "Instructions for compiling programs written in programming language C\n\n1\tIntroduction\nElectronic computer programs are prepared in a symbolic, human-understandable programming language. In the course Introduction to programming, for this purpose will use the C programming language.\nThe program, written in symbolic language and stored in a file with the extension .c, needs to be converted to commands understandable to the processor, or executable machine code (in Windows operating system, files with the extension .exe, in Unix / Linux operating systems, the format of the extension is not prescribed). The conversion process is carried out in two steps (the concept of preprocessing and assembly code creation will be omitted here because it is indivisible as part of translation):\na)\tThe translation into object code is done by a program called the compiler. The compiler translates the source file and creates the object code file (usually with the extension .o) that cannot yet be run because it does not yet have links to functions and variables from other object code files and libraries where standard functions (input / output, mathematical functions, etc.) have been prepared.\nb)\tLinking to the executable code is done by a program called the linker. This program merges all the required object code files with the pre-programmed libraries and creates executable code that can be run directly from the operating system.\nAny text editor already installed on the computer can be used to prepare the source code (write the program). The editor must not create additional hidden formatting tags, such as done by Word. An example of such a program is the basic Notepad editor or the slightly improved Notepad++. The compiler and linker are often not part of the operating system and need to be installed. For the purpose of Introduction to programming, ww will install MinGW packages in 32-bit version (https://en.wikipedia.org/wiki/MinGW).",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "3   Writing programs with a simple editor, compiling and executing programs\nThe whole process of writing and compiling programs will be illustrated in the command prompt, where you first need to create a folder where the program file will be stored, and then make it current e.g.\nmkdir C:\\IPRO\ncd C:\\IPRO\nand start editing program there with a text editor:\nnotepad program.c\n\nThe following code should be entered in this file:\n#include <stdio.h>\n\nint main(void) {\n   printf(\"Introduction to Programming\");\n   return 0;\n}\nand save the changes via the File/Save menu or the standard keyboard shortcut Ctrl-S (press the Ctrl key and then, without releasing it, the S key). After that it is necessary to check whether elementary compilation works:\ngcc program.c -o program.exe\n\nThis simplest gcc compiler call integrates compiler and linker functions. The program.c file is compiled. Because of the -o (output) option, it creates an executable file named program.exe which can then be executed with the command\nprogram.exe\nor\nprogram\nIf an error occurred while calling the compiler or starting the program, you should look for the solution in the next section.\n\nBasically, the previous compiler call is internally executed in the same way as the following sequence:\ngcc -c program.c\ngcc program.o -o program.exe\nThe first call, because of the argument or the -c (compile) option, is just a compilation to program.o, which in this case remains stored in the current folder (in the case of an elementary call, that object code is automatically deleted). The second call links the object code with the program libraries and creates the executable program.exe.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "The dependencies are described by rules in the Makefile file, which should be located in the same folder as the source code files.\nMakefile which describes the compilation of program.c to program.exe:\nprogram.exe: program.o\n\tgcc -o program.exe program.o\nprogram.o: program.c\n\tgcc -c -g -std=c11 -pedantic-errors -Wall program.c\nHere we have defined that program.exe (executable code) depends on program.o (object code), and that program.o  depends on program.c. If program.c is changed, this file will become newer than program.o, wich results, due to the option -c (compile), in compilation into object code, which will make the object code newer than the executable one, causing linking.\nIt is important to know that the indentation of a command that is executed for an appropriate rule is mandatory, with a tab character, and that the line describing the dependency of the executable code on the object code must be written first.\nIn practice, there will also be dependencies on the object code file and header (.h) files that are included in the compilation by the preprocessor command #include.\nIf, for example, a program consists of two modules, p1.c i p2.c where the first includes h1.h i h2.h, and the second includes h3.h, this will be defined in the following Makefile:\nprogram.exe: p1.o p2.o\n\tgcc -o program.exe program.o\np1.o: p1.c h1.h h2.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p1.c\np2.o: p2.c h3.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p2.c\ntasks.json must now describe the call of program make. I can be done by replacing the gcc call with a make program call while deleting the argument list (make does not require arguments if dependencies are described in the file Makefile, otherwise the arguments at the call should be  -f name_of_make_file). Alternatively, in tasks.json a new task can be added as follows:\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n            \"label\": \"Build with gcc\",\n            \"type\": \"shell\",\n            \"command\": \"gcc\",",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "4\tWriting and compiling programs in an integrated development environment\nKnowledge of elementary editing of a program by notepad or a similar text editor, compiling programs from the command line, and running programs from the command line, is mandatory and will be tested during laboratory exercises.\nIntegrated Development Environments (IDEs) are used to make writing, compiling, and testing programs easier. In the Introduction to Programming course, we will use Visual Studio Code development environment, because it is an open source program, runs on multiple platforms (Windows, Linux, Mac), the installation package is relatively small compared to other similar environments, installation is fast and can be used for programming in any programming language, provided that a suitable compiler is installed on your computer, such as the MinGW package whose installation and use is described in the previous sections. The following assumes that MinGW is installed in accordance with the instructions in the previous sections.\nInstallation of the environment\nVisual Studio Code (VSC) is downloaded from the link\nhttps://code.visualstudio.com/download\nAfter selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.\nThe VSC desktop treats a single folder within the file system as a project. Therefore, the first action to take is to open the folder in which the program files are or will be located, such as the folder where we tested the compiler gcc (File -> Open Folder...).\nThe VSC toolbar consists of the following icons:\nExplorer (work with files in the currently open folder)\nSearch (search for content in the currently open folder and subfolders)\nSource control (working with GIT version control system)\nDebug (running a program and troubleshooting a program)\nExtensions (installing a VSC extension)",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "Instructions for compiling programs written in programming language C\n\n1\tIntroduction\nElectronic computer programs are prepared in a symbolic, human-understandable programming language. In the course Introduction to programming, for this purpose will use the C programming language.\nThe program, written in symbolic language and stored in a file with the extension .c, needs to be converted to commands understandable to the processor, or executable machine code (in Windows operating system, files with the extension .exe, in Unix / Linux operating systems, the format of the extension is not prescribed). The conversion process is carried out in two steps (the concept of preprocessing and assembly code creation will be omitted here because it is indivisible as part of translation):\na)\tThe translation into object code is done by a program called the compiler. The compiler translates the source file and creates the object code file (usually with the extension .o) that cannot yet be run because it does not yet have links to functions and variables from other object code files and libraries where standard functions (input / output, mathematical functions, etc.) have been prepared.\nb)\tLinking to the executable code is done by a program called the linker. This program merges all the required object code files with the pre-programmed libraries and creates executable code that can be run directly from the operating system.\nAny text editor already installed on the computer can be used to prepare the source code (write the program). The editor must not create additional hidden formatting tags, such as done by Word. An example of such a program is the basic Notepad editor or the slightly improved Notepad++. The compiler and linker are often not part of the operating system and need to be installed. For the purpose of Introduction to programming, ww will install MinGW packages in 32-bit version (https://en.wikipedia.org/wiki/MinGW).\n\n3   Writing programs with a simple editor, compiling and executing programs\nThe whole process of writing and compiling programs will be illustrated in the command prompt, where you first need to create a folder where the program file will be stored, and then make it current e.g.\nmkdir C:\\IPRO\ncd C:\\IPRO\nand start editing program there with a text editor:\nnotepad program.c\n\nThe following code should be entered in this file:\n#include <stdio.h>\n\nint main(void) {\n   printf(\"Introduction to Programming\");\n   return 0;\n}\nand save the changes via the File/Save menu or the standard keyboard shortcut Ctrl-S (press the Ctrl key and then, without releasing it, the S key). After that it is necessary to check whether elementary compilation works:\ngcc program.c -o program.exe\n\nThis simplest gcc compiler call integrates compiler and linker functions. The program.c file is compiled. Because of the -o (output) option, it creates an executable file named program.exe which can then be executed with the command\nprogram.exe\nor\nprogram\nIf an error occurred while calling the compiler or starting the program, you should look for the solution in the next section.\n\nBasically, the previous compiler call is internally executed in the same way as the following sequence:\ngcc -c program.c\ngcc program.o -o program.exe\nThe first call, because of the argument or the -c (compile) option, is just a compilation to program.o, which in this case remains stored in the current folder (in the case of an elementary call, that object code is automatically deleted). The second call links the object code with the program libraries and creates the executable program.exe.\n\nThe dependencies are described by rules in the Makefile file, which should be located in the same folder as the source code files.\nMakefile which describes the compilation of program.c to program.exe:\nprogram.exe: program.o\n\tgcc -o program.exe program.o\nprogram.o: program.c\n\tgcc -c -g -std=c11 -pedantic-errors -Wall program.c\nHere we have defined that program.exe (executable code) depends on program.o (object code), and that program.o  depends on program.c. If program.c is changed, this file will become newer than program.o, wich results, due to the option -c (compile), in compilation into object code, which will make the object code newer than the executable one, causing linking.\nIt is important to know that the indentation of a command that is executed for an appropriate rule is mandatory, with a tab character, and that the line describing the dependency of the executable code on the object code must be written first.\nIn practice, there will also be dependencies on the object code file and header (.h) files that are included in the compilation by the preprocessor command #include.\nIf, for example, a program consists of two modules, p1.c i p2.c where the first includes h1.h i h2.h, and the second includes h3.h, this will be defined in the following Makefile:\nprogram.exe: p1.o p2.o\n\tgcc -o program.exe program.o\np1.o: p1.c h1.h h2.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p1.c\np2.o: p2.c h3.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p2.c\ntasks.json must now describe the call of program make. I can be done by replacing the gcc call with a make program call while deleting the argument list (make does not require arguments if dependencies are described in the file Makefile, otherwise the arguments at the call should be  -f name_of_make_file). Alternatively, in tasks.json a new task can be added as follows:\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n            \"label\": \"Build with gcc\",\n            \"type\": \"shell\",\n            \"command\": \"gcc\",\n\n4\tWriting and compiling programs in an integrated development environment\nKnowledge of elementary editing of a program by notepad or a similar text editor, compiling programs from the command line, and running programs from the command line, is mandatory and will be tested during laboratory exercises.\nIntegrated Development Environments (IDEs) are used to make writing, compiling, and testing programs easier. In the Introduction to Programming course, we will use Visual Studio Code development environment, because it is an open source program, runs on multiple platforms (Windows, Linux, Mac), the installation package is relatively small compared to other similar environments, installation is fast and can be used for programming in any programming language, provided that a suitable compiler is installed on your computer, such as the MinGW package whose installation and use is described in the previous sections. The following assumes that MinGW is installed in accordance with the instructions in the previous sections.\nInstallation of the environment\nVisual Studio Code (VSC) is downloaded from the link\nhttps://code.visualstudio.com/download\nAfter selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.\nThe VSC desktop treats a single folder within the file system as a project. Therefore, the first action to take is to open the folder in which the program files are or will be located, such as the folder where we tested the compiler gcc (File -> Open Folder...).\nThe VSC toolbar consists of the following icons:\nExplorer (work with files in the currently open folder)\nSearch (search for content in the currently open folder and subfolders)\nSource control (working with GIT version control system)\nDebug (running a program and troubleshooting a program)\nExtensions (installing a VSC extension)",
            "time": 259.69,
            "evaluation": {
                "bleu_score": 4.336508547901975e-155,
                "rouge_score": {
                    "precision": 0.11695906432748537,
                    "recall": 0.2638888888888889,
                    "f1": 0.16203083940701077
                },
                "diversity": 0.9272727272727272,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "3",
                    "overall_quality_and_engagement": "3"
                }
            }
        },
        {
            "question_number": "q_2",
            "question": "How do I install the MinGW package?",
            "answer": "To install the MinGW package, follow these steps:\n1. Download the installer mingw-get-setup.exe from http://sourceforge.net/projects/mingw/files/latest/download?source=files.\n2. Run the downloaded program and press Install on the first form shown.\n3. Press Continue on the next form.\n4. In the left column of the MinGW Installation Manager, select Basic Setup.\n5. Mark (Select for Installation) item mingw32-base in the next column.\n6. Select Installation -> Apply Changes and press Apply in the newly opened window.\n7. After installation is completed, set the system variable Path by adding a path to the folder bin of the MinGW package. This can be done through Control Panel: Control Panel -> System and Security -> System -> Advanced system settings -> Environment Variables -> Path.",
            "source_documents": [
                {
                    "page_content": "2\tInstalling MinGW\nThe installer mingw-get-setup.exe will be downloaded automatically from the page http://sourceforge.net/projects/mingw/files/latest/download?source=files.\nThe downloaded program must be executed. On the first form shown, press the Install button. On the next form, press Continue. It will initiate download of MinGW Installation Manager. When downloaded, press Continue to start MinGW Installation Manager.\nIn left column, select Basic Setup. In next column, select (Mark for Installation) item mingw32-base. Next, from the menu, select Installation -> Apply Changes and in the newly opened window, press the button Apply.\nAfter the installation is completed, the system variable Path must be set by adding a path to the folder bin of the MinGW package. This system variable contains a list of folders where the operating system looks for executable programs that the user attempts to run by specifying their name.\nIf MinGW is installed with the default settings, the path to the folder bin will be C:\\MinGW\\bin.\nThis can be done in several ways, but the simplest way to do it is in the command prompt.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "Setting the system variable Path through a graphical interface\nThe system variable Path can be set in Control Panel:\nControl Panel -> System and Security -> System\nYou need to click the link Advanced system settings in in the left menu.\nIn the newly opened window, select the tab Advanced in top menu and then press the button Environment Variables.\nAfter that, choose Path from the list System variables and click Edit.\nA window will open with all the folders where the operating system looks for executable programs, where you need to click New.\nIn the newly created blank field at the bottom of the list, enter the path to the folder where the MinGW package is installed to (normally C:\\MinGW\\bin), and press OK.\nIn older versions of Windows, a window will open. There, in the Variable value field, the text: \";C:\\MinGW\\bin\\\" should be appended to existing text.\nNote the sign ; at the beginning of the text to be added to the variable Path. This character separates the paths contained in the variable Path. The above text should be added to the end of the existing contents of the variable, taking care not to delete the existing contents of the variable.\nIf MinGW is installed in another folder (instead of C:\\MinGW), appropriate folder name should be entered.\n\nAn alternative way of installation\nStudents who have problems installing the latest version of MinGW on their Windows computer can try this alternative method:\n1.\tCreate a folder on your computer to place MinGW files (e.g. C:\\MinGW)\n2.\tDownload the archive MinGW.zip from the file repository and extract it into the folder created above\n3.\tSet the system variable Path according to the instructions above",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "4\tWriting and compiling programs in an integrated development environment\nKnowledge of elementary editing of a program by notepad or a similar text editor, compiling programs from the command line, and running programs from the command line, is mandatory and will be tested during laboratory exercises.\nIntegrated Development Environments (IDEs) are used to make writing, compiling, and testing programs easier. In the Introduction to Programming course, we will use Visual Studio Code development environment, because it is an open source program, runs on multiple platforms (Windows, Linux, Mac), the installation package is relatively small compared to other similar environments, installation is fast and can be used for programming in any programming language, provided that a suitable compiler is installed on your computer, such as the MinGW package whose installation and use is described in the previous sections. The following assumes that MinGW is installed in accordance with the instructions in the previous sections.\nInstallation of the environment\nVisual Studio Code (VSC) is downloaded from the link\nhttps://code.visualstudio.com/download\nAfter selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.\nThe VSC desktop treats a single folder within the file system as a project. Therefore, the first action to take is to open the folder in which the program files are or will be located, such as the folder where we tested the compiler gcc (File -> Open Folder...).\nThe VSC toolbar consists of the following icons:\nExplorer (work with files in the currently open folder)\nSearch (search for content in the currently open folder and subfolders)\nSource control (working with GIT version control system)\nDebug (running a program and troubleshooting a program)\nExtensions (installing a VSC extension)",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "First, you need to install an extension that allows you to run programs in the C or C ++ programming language. In the extension search box, type C / C ++ and then select the Microsoft extension.\nAfter downloading, it is necessary to restart the VSC by pressing a button Reload.\n\nConfigure the environment for simple programs\nUnfortunately, VSC is not yet configured to compile C programs. Configuration can be done through menus, but the simplest way is to create a .vscode subfolder (note that the name begins with a dot) and in this colder, create two files written in Java Script Object Notation, JSON:\ntasks.json\tdescribes the tasks to be performed as part of the program compilation\nlaunch.json\tdescribes how to run the executable program\nFiles are created by selecting the folder within which the files should be created, selecting the appropriate icon and typing in the name of the new file.\nThe following code should be copied to the window on the right in the tasks.json file:\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n        \"label\": \"Build with gcc\",\n        \"type\": \"shell\",\n        \"command\": \"gcc\",\n        \"args\": [\"-g\", \"-std=c11\", \"-pedantic-errors\",\n            \"-Wall\", \"-o\", \"program.exe\", \"${file}\"\n        ]\n    }]\n}\n\nBasically, we are creating a task that will be called Build with gcc (\"label\"), which is an operating system command (\"type\":\"Shell\"), and the specific command that is executed is gcc (\"Command\"). \"args\" is a list of arguments of an external program call. ${file} is the name of the currently open program file, so the program.c is currently open in the window, the previous description will result in the execution of the following operating system command:\ngcc -g -std=c11 -pedantic-errors -Wall -o program.exe program.c",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "2\tInstalling MinGW\nThe installer mingw-get-setup.exe will be downloaded automatically from the page http://sourceforge.net/projects/mingw/files/latest/download?source=files.\nThe downloaded program must be executed. On the first form shown, press the Install button. On the next form, press Continue. It will initiate download of MinGW Installation Manager. When downloaded, press Continue to start MinGW Installation Manager.\nIn left column, select Basic Setup. In next column, select (Mark for Installation) item mingw32-base. Next, from the menu, select Installation -> Apply Changes and in the newly opened window, press the button Apply.\nAfter the installation is completed, the system variable Path must be set by adding a path to the folder bin of the MinGW package. This system variable contains a list of folders where the operating system looks for executable programs that the user attempts to run by specifying their name.\nIf MinGW is installed with the default settings, the path to the folder bin will be C:\\MinGW\\bin.\nThis can be done in several ways, but the simplest way to do it is in the command prompt.\n\nSetting the system variable Path through a graphical interface\nThe system variable Path can be set in Control Panel:\nControl Panel -> System and Security -> System\nYou need to click the link Advanced system settings in in the left menu.\nIn the newly opened window, select the tab Advanced in top menu and then press the button Environment Variables.\nAfter that, choose Path from the list System variables and click Edit.\nA window will open with all the folders where the operating system looks for executable programs, where you need to click New.\nIn the newly created blank field at the bottom of the list, enter the path to the folder where the MinGW package is installed to (normally C:\\MinGW\\bin), and press OK.\nIn older versions of Windows, a window will open. There, in the Variable value field, the text: \";C:\\MinGW\\bin\\\" should be appended to existing text.\nNote the sign ; at the beginning of the text to be added to the variable Path. This character separates the paths contained in the variable Path. The above text should be added to the end of the existing contents of the variable, taking care not to delete the existing contents of the variable.\nIf MinGW is installed in another folder (instead of C:\\MinGW), appropriate folder name should be entered.\n\nAn alternative way of installation\nStudents who have problems installing the latest version of MinGW on their Windows computer can try this alternative method:\n1.\tCreate a folder on your computer to place MinGW files (e.g. C:\\MinGW)\n2.\tDownload the archive MinGW.zip from the file repository and extract it into the folder created above\n3.\tSet the system variable Path according to the instructions above\n\n4\tWriting and compiling programs in an integrated development environment\nKnowledge of elementary editing of a program by notepad or a similar text editor, compiling programs from the command line, and running programs from the command line, is mandatory and will be tested during laboratory exercises.\nIntegrated Development Environments (IDEs) are used to make writing, compiling, and testing programs easier. In the Introduction to Programming course, we will use Visual Studio Code development environment, because it is an open source program, runs on multiple platforms (Windows, Linux, Mac), the installation package is relatively small compared to other similar environments, installation is fast and can be used for programming in any programming language, provided that a suitable compiler is installed on your computer, such as the MinGW package whose installation and use is described in the previous sections. The following assumes that MinGW is installed in accordance with the instructions in the previous sections.\nInstallation of the environment\nVisual Studio Code (VSC) is downloaded from the link\nhttps://code.visualstudio.com/download\nAfter selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.\nThe VSC desktop treats a single folder within the file system as a project. Therefore, the first action to take is to open the folder in which the program files are or will be located, such as the folder where we tested the compiler gcc (File -> Open Folder...).\nThe VSC toolbar consists of the following icons:\nExplorer (work with files in the currently open folder)\nSearch (search for content in the currently open folder and subfolders)\nSource control (working with GIT version control system)\nDebug (running a program and troubleshooting a program)\nExtensions (installing a VSC extension)\n\nFirst, you need to install an extension that allows you to run programs in the C or C ++ programming language. In the extension search box, type C / C ++ and then select the Microsoft extension.\nAfter downloading, it is necessary to restart the VSC by pressing a button Reload.\n\nConfigure the environment for simple programs\nUnfortunately, VSC is not yet configured to compile C programs. Configuration can be done through menus, but the simplest way is to create a .vscode subfolder (note that the name begins with a dot) and in this colder, create two files written in Java Script Object Notation, JSON:\ntasks.json\tdescribes the tasks to be performed as part of the program compilation\nlaunch.json\tdescribes how to run the executable program\nFiles are created by selecting the folder within which the files should be created, selecting the appropriate icon and typing in the name of the new file.\nThe following code should be copied to the window on the right in the tasks.json file:\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n        \"label\": \"Build with gcc\",\n        \"type\": \"shell\",\n        \"command\": \"gcc\",\n        \"args\": [\"-g\", \"-std=c11\", \"-pedantic-errors\",\n            \"-Wall\", \"-o\", \"program.exe\", \"${file}\"\n        ]\n    }]\n}\n\nBasically, we are creating a task that will be called Build with gcc (\"label\"), which is an operating system command (\"type\":\"Shell\"), and the specific command that is executed is gcc (\"Command\"). \"args\" is a list of arguments of an external program call. ${file} is the name of the currently open program file, so the program.c is currently open in the window, the previous description will result in the execution of the following operating system command:\ngcc -g -std=c11 -pedantic-errors -Wall -o program.exe program.c",
            "time": 234.23,
            "evaluation": {
                "bleu_score": 7.214228588423806e-79,
                "rouge_score": {
                    "precision": 0.06878306878306878,
                    "recall": 0.37169352386743687,
                    "f1": 0.11601525580684889
                },
                "diversity": 0.9322033898305084,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_3",
            "question": "What are all the ways I can set the System variable Path?",
            "answer": "The system variable Path can be set in Control Panel, through a command window by a command setx, or by adding the path to the folder bin of the MinGW package directly to the variable Path in the registry.",
            "source_documents": [
                {
                    "page_content": "Setting the system variable Path through a graphical interface\nThe system variable Path can be set in Control Panel:\nControl Panel -> System and Security -> System\nYou need to click the link Advanced system settings in in the left menu.\nIn the newly opened window, select the tab Advanced in top menu and then press the button Environment Variables.\nAfter that, choose Path from the list System variables and click Edit.\nA window will open with all the folders where the operating system looks for executable programs, where you need to click New.\nIn the newly created blank field at the bottom of the list, enter the path to the folder where the MinGW package is installed to (normally C:\\MinGW\\bin), and press OK.\nIn older versions of Windows, a window will open. There, in the Variable value field, the text: \";C:\\MinGW\\bin\\\" should be appended to existing text.\nNote the sign ; at the beginning of the text to be added to the variable Path. This character separates the paths contained in the variable Path. The above text should be added to the end of the existing contents of the variable, taking care not to delete the existing contents of the variable.\nIf MinGW is installed in another folder (instead of C:\\MinGW), appropriate folder name should be entered.\n\nAn alternative way of installation\nStudents who have problems installing the latest version of MinGW on their Windows computer can try this alternative method:\n1.\tCreate a folder on your computer to place MinGW files (e.g. C:\\MinGW)\n2.\tDownload the archive MinGW.zip from the file repository and extract it into the folder created above\n3.\tSet the system variable Path according to the instructions above",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "2.1.1\tSetting the system variable Path in the command window\nThe system variable Path is easily set in a command window by a command\nsetx Path \"%Path%;C:\\MinGW\\Bin\"\nThe setx command written in this way sets the new value of the variable Path by adding text  ;C:\\MinGW\\Bin to it's old value.\nUnfortunately, the command setx has a built-in restriction on the length of a variable to 1024 characters, so before the call it is necessary to check that the existing content is not too long, which can be checked by the command echo:\necho %Path%\nIf the following message appears when setting the variable Path:\nWARNING: The data being saved is truncated to 1024 characters.\nit means that the setx command limit is exceeded, so the variable Path will need to be set through the GUI and checked for content.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "2\tInstalling MinGW\nThe installer mingw-get-setup.exe will be downloaded automatically from the page http://sourceforge.net/projects/mingw/files/latest/download?source=files.\nThe downloaded program must be executed. On the first form shown, press the Install button. On the next form, press Continue. It will initiate download of MinGW Installation Manager. When downloaded, press Continue to start MinGW Installation Manager.\nIn left column, select Basic Setup. In next column, select (Mark for Installation) item mingw32-base. Next, from the menu, select Installation -> Apply Changes and in the newly opened window, press the button Apply.\nAfter the installation is completed, the system variable Path must be set by adding a path to the folder bin of the MinGW package. This system variable contains a list of folders where the operating system looks for executable programs that the user attempts to run by specifying their name.\nIf MinGW is installed with the default settings, the path to the folder bin will be C:\\MinGW\\bin.\nThis can be done in several ways, but the simplest way to do it is in the command prompt.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "2.1\tOpening the Command Prompt\nThe command prompt is opened by opening the Windows menu (Start menu), then typing and selecting Run, typing cmd in the newly opened window, and pressing OK or typing command in the Start menu and selecting Command Prompt.\nIt is useful to add the command prompt to the Start menu by right-clicking on Command Prompt and selecting Pin to Start from the pop-up menu.\nThe command prompt allows you to directly execute operating system commands, which generally looks like this:\nprogram argument1 argument2 \u2026 argumentn\nprogram is the name of the program (or internal operating system command) to be executed. If the program is not an internal operating system command (such as a command DIR that prints the contents of the current folder), it must either be in the current folder or in one of the folders listed in the variable Path set as described in the next section. A program can be called without arguments like DIR, or with arguments that define the names of the files over which the program will act or options that modify how the program is executed. Options usually begin with characters /, -, or --.\nIn the following example, the file t1.txt will be copied to t2.txt:\ncopy t1.txt t2.txt\nThis requires confirmation if t2.txt already exists, but if option /y is added to the call, the confirmation will not be required:\ncopy /y t1.txt t2.txt\nIt should be noted that some operating systems distinguish between uppercase and lowercase letters in the names of programs, options, or files, while others do not. Operating system Windows does not distinguish between upper and lower case letters (is case insensitive), while operating systems Unix and Linux do (are case sensitive).",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "Setting the system variable Path through a graphical interface\nThe system variable Path can be set in Control Panel:\nControl Panel -> System and Security -> System\nYou need to click the link Advanced system settings in in the left menu.\nIn the newly opened window, select the tab Advanced in top menu and then press the button Environment Variables.\nAfter that, choose Path from the list System variables and click Edit.\nA window will open with all the folders where the operating system looks for executable programs, where you need to click New.\nIn the newly created blank field at the bottom of the list, enter the path to the folder where the MinGW package is installed to (normally C:\\MinGW\\bin), and press OK.\nIn older versions of Windows, a window will open. There, in the Variable value field, the text: \";C:\\MinGW\\bin\\\" should be appended to existing text.\nNote the sign ; at the beginning of the text to be added to the variable Path. This character separates the paths contained in the variable Path. The above text should be added to the end of the existing contents of the variable, taking care not to delete the existing contents of the variable.\nIf MinGW is installed in another folder (instead of C:\\MinGW), appropriate folder name should be entered.\n\nAn alternative way of installation\nStudents who have problems installing the latest version of MinGW on their Windows computer can try this alternative method:\n1.\tCreate a folder on your computer to place MinGW files (e.g. C:\\MinGW)\n2.\tDownload the archive MinGW.zip from the file repository and extract it into the folder created above\n3.\tSet the system variable Path according to the instructions above\n\n2.1.1\tSetting the system variable Path in the command window\nThe system variable Path is easily set in a command window by a command\nsetx Path \"%Path%;C:\\MinGW\\Bin\"\nThe setx command written in this way sets the new value of the variable Path by adding text  ;C:\\MinGW\\Bin to it's old value.\nUnfortunately, the command setx has a built-in restriction on the length of a variable to 1024 characters, so before the call it is necessary to check that the existing content is not too long, which can be checked by the command echo:\necho %Path%\nIf the following message appears when setting the variable Path:\nWARNING: The data being saved is truncated to 1024 characters.\nit means that the setx command limit is exceeded, so the variable Path will need to be set through the GUI and checked for content.\n\n2\tInstalling MinGW\nThe installer mingw-get-setup.exe will be downloaded automatically from the page http://sourceforge.net/projects/mingw/files/latest/download?source=files.\nThe downloaded program must be executed. On the first form shown, press the Install button. On the next form, press Continue. It will initiate download of MinGW Installation Manager. When downloaded, press Continue to start MinGW Installation Manager.\nIn left column, select Basic Setup. In next column, select (Mark for Installation) item mingw32-base. Next, from the menu, select Installation -> Apply Changes and in the newly opened window, press the button Apply.\nAfter the installation is completed, the system variable Path must be set by adding a path to the folder bin of the MinGW package. This system variable contains a list of folders where the operating system looks for executable programs that the user attempts to run by specifying their name.\nIf MinGW is installed with the default settings, the path to the folder bin will be C:\\MinGW\\bin.\nThis can be done in several ways, but the simplest way to do it is in the command prompt.\n\n2.1\tOpening the Command Prompt\nThe command prompt is opened by opening the Windows menu (Start menu), then typing and selecting Run, typing cmd in the newly opened window, and pressing OK or typing command in the Start menu and selecting Command Prompt.\nIt is useful to add the command prompt to the Start menu by right-clicking on Command Prompt and selecting Pin to Start from the pop-up menu.\nThe command prompt allows you to directly execute operating system commands, which generally looks like this:\nprogram argument1 argument2 \u2026 argumentn\nprogram is the name of the program (or internal operating system command) to be executed. If the program is not an internal operating system command (such as a command DIR that prints the contents of the current folder), it must either be in the current folder or in one of the folders listed in the variable Path set as described in the next section. A program can be called without arguments like DIR, or with arguments that define the names of the files over which the program will act or options that modify how the program is executed. Options usually begin with characters /, -, or --.\nIn the following example, the file t1.txt will be copied to t2.txt:\ncopy t1.txt t2.txt\nThis requires confirmation if t2.txt already exists, but if option /y is added to the call, the confirmation will not be required:\ncopy /y t1.txt t2.txt\nIt should be noted that some operating systems distinguish between uppercase and lowercase letters in the names of programs, options, or files, while others do not. Operating system Windows does not distinguish between upper and lower case letters (is case insensitive), while operating systems Unix and Linux do (are case sensitive).",
            "time": 154.73,
            "evaluation": {
                "bleu_score": 4.565054879844424e-155,
                "rouge_score": {
                    "precision": 0.20512820512820515,
                    "recall": 0.23182189542483658,
                    "f1": 0.21754196411344784
                },
                "diversity": 0.9210526315789473,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_4",
            "question": "How do I translate and execute a simple program using shell commands?",
            "answer": "To translate and execute a simple C program, follow these steps:\n1. Create a folder to store your program file. For example, create a folder named \"C:\\IPRO\" on your computer.\n2. Open the command prompt (Start > Type Command > Select Command Prompt).\n3. Change the current directory to the folder you created in step 1 using the 'cd' command: cd C:\\IPRO\n4. Use a text editor, such as Notepad or Notepad++, to create a file named \"program.c\" containing the following code:\n   #include <stdio.h>\n   int main(void) {\n       printf(\"Introduction to Programming\");\n       return 0;\n   }\n5. Save the file using the File/Save menu or the standard keyboard shortcut Ctrl-S.\n6. Compile the program using the 'gcc' compiler command: gcc program.c -o program.exe\n7. Execute the compiled program by typing its name in the command prompt: program.exe or program\n8. If an error occurs, check for solutions in the previous steps and try again.",
            "source_documents": [
                {
                    "page_content": "2) Write a program that will read two integers and print a larger number. Store the source code in the test.c file in the ipro folder created in Task 1. Use the Notepad or Notepad ++ editor to edit the program (specify the file name when starting the editor). Translate the program using the GCC compiler, and name the executable file test.exe. Run the program so that:\n1) the numbers are read from the keyboard and the result is printed on the monitor screen\n2) the numbers are read from the keyboard and the result is printed to the output.txt file\n3) numbers are read from the input.txt file previously prepared using a text editor, and the result is printed to the end of the output.txt file, without deleting its previous contents \n\nSolutions\n1)\n1. cd c:\\\n2. mkdir exercise\n3. mkdir exercise\\personal \nmkdir exercise\\ipro \n4. cd exercise\\personal \nmkdir txt \nmkdir pictures\n5. cd c:\\exercise\\personal\\pictures \nnpr: copy c:\\users\\hrvoje\\pictures\\*2013*.jpg  . \n6. cd ..\\txt \n7. dir not.here \n8. notepad life.txt (or notepad++ life.txt)\n9. copy life.txt tmp.txt\ncopy life.txt tmp1.txt\n10. tree \\ \ntemporary suspension of execution: Pause (or Ctrl+S)\nresume execution: any key \n11. tree /f ..\\..\n12. help > help.txt\n13. dir\n14. move help.txt ..\n15. dir .\ndir ..\n16. type ..\\help.txt\n17. del p*\n18. cd ..\\..\\..\n19. rmdir /s C:\\exercise\\personal\\txt \n20. del C:\\exercise\\personal\\pictures\n21. rmdir /s C:\\exercise\\personal\n\n2) cd c:\\exercise\\ipro\nnotepad test.c (or notepad++ test.c)\nEnter the following code in the test.c text file:\n#include <stdio.h>\nint main(void) {\n   int x,y;\n   printf(\"Enter two integers: \");\n   scanf(\"%d %d\", &x, &y);\n   if (x>y) { \n      printf(\"%d\\n\", x);\n   } else {\n      printf(\"%d\\n\", y);\n   }\n   return 0;\n}\n\ngcc -std=c11 -pedantic-errors -Wall -o test.exe test.c\n1) test.exe\n2) test.exe > output.txt\ntype  output.txt\n3) notepad input.txt (or notepad++ input.txt)\nEnter two integers in the character file input.txt, e.g.:\n10 5",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                },
                {
                    "page_content": "5\tOther materials\n5.1\tRecommended reading\n    V. Mornar: Introduction to programming, working version of the textbook\n        The textbook covers the complete material of the subject, and even more than that. The textbook will be available on MS Teams as pdf. An integral part of the textbook is the folder Examples with about ninety programs that can be independently translated and run in the command line or in the development environment VSCode.\n    K. N. King, C Programming: A Modern Approach, Second Edition, W. W. Norton & Company\n        An extensive work (805 pages) that has been accepted as a textbook at hundreds of universities around the world.\n    B. W. Kernighan, D. M. Ritchie: The C Programming Language, Second Edition, Englewood Cliffs, NJ: Prentice Hall\n        A basic book whose authors are the creators of the C programming language from which many generations of programmers have learned the language.\n5.2\tInstructions\n    Instructions for compiling programs written in the programming language C\n        contain a detailed description of the software installation procedures and how to compile and execute the program. Based on these instructions, students must learn to use some of the simple editors (Notepad or Notepad ++) and compile programs using the operating system command line. In addition, students can use these instructions, if they wish, to install and learn the basics of using the integrated development environment VSCode, which greatly facilitates error detection because it has a simple interaction with a specialized program - a debugger.\n    Instructions for using the character interface in Windows\n        basics of using the operating system's character interface (command line). Based on these instructions, students are expected to independently learn several operating system commands listed there: basics of positioning in file system folders, creating, renaming files and folders, redirecting inputs and outputs.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "\u00d3 University of Zagreb - Faculty of Electrical Engineering and Computing - Department of Applied Computing\t\nIntroduction to programming\t\tInstructions for using the character interface\n\n\n\n1 Introduction \nThe Windows operating system, for communication with the user, in addition to the graphical user interface (GUI), allows the use of the text (character-based) user interface (CLI - command-line interface, command-line user interface, console user interface, CUI-character user interface) in which the computer is controlled by typing a command in the command line. In this way of communication, the computer first prints a message (prompt) to the user that it is ready to accept the command, after which the user enters the command using the keyboard. The character-based user interface is very commonly used in science, engineering, and industry, and is supported by all of today's important operating systems, such as Unix, Linux, Windows, etc.\nWithin the course Introduction to Programming, the character interface will be used when working with files in which the source and executable codes of the C program are stored, and for translating and executing the C program. \n2 Launching the character interface \nThere are several options for launching a character interface (i.e., opening a character interface window). Here are some options: \nWindows 10: \na) Start  \u00ae\u00a0Type Command \u00ae the menu appears \u00ae select Command Prompt:\n                         \nOlder versions of Windows:\na) \tStart \u00ae\u00a0 All Programs \u00ae\u00a0 Accessories\u00ae\u00a0 Command Prompt\nb) \tStart \u00ae\u00a0 All Programs \u00ae\u00a0 Accessories \u00ae\u00a0 Run\nafter which the window displayed below opens in which it is necessary to enter the cmd command in the box and press the OK button: \n\n\nc) \tStart \u00ae\u00a0type cmd in the search box, after which the window shown under b) will open \nd) \tsimultaneous pressing of the Windows and R keys (Win + R), after which the window shown under b) opens\nIn all versions of Windows, the command prompt window then opens:",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                },
                {
                    "page_content": "3   Writing programs with a simple editor, compiling and executing programs\nThe whole process of writing and compiling programs will be illustrated in the command prompt, where you first need to create a folder where the program file will be stored, and then make it current e.g.\nmkdir C:\\IPRO\ncd C:\\IPRO\nand start editing program there with a text editor:\nnotepad program.c\n\nThe following code should be entered in this file:\n#include <stdio.h>\n\nint main(void) {\n   printf(\"Introduction to Programming\");\n   return 0;\n}\nand save the changes via the File/Save menu or the standard keyboard shortcut Ctrl-S (press the Ctrl key and then, without releasing it, the S key). After that it is necessary to check whether elementary compilation works:\ngcc program.c -o program.exe\n\nThis simplest gcc compiler call integrates compiler and linker functions. The program.c file is compiled. Because of the -o (output) option, it creates an executable file named program.exe which can then be executed with the command\nprogram.exe\nor\nprogram\nIf an error occurred while calling the compiler or starting the program, you should look for the solution in the next section.\n\nBasically, the previous compiler call is internally executed in the same way as the following sequence:\ngcc -c program.c\ngcc program.o -o program.exe\nThe first call, because of the argument or the -c (compile) option, is just a compilation to program.o, which in this case remains stored in the current folder (in the case of an elementary call, that object code is automatically deleted). The second call links the object code with the program libraries and creates the executable program.exe.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "2) Write a program that will read two integers and print a larger number. Store the source code in the test.c file in the ipro folder created in Task 1. Use the Notepad or Notepad ++ editor to edit the program (specify the file name when starting the editor). Translate the program using the GCC compiler, and name the executable file test.exe. Run the program so that:\n1) the numbers are read from the keyboard and the result is printed on the monitor screen\n2) the numbers are read from the keyboard and the result is printed to the output.txt file\n3) numbers are read from the input.txt file previously prepared using a text editor, and the result is printed to the end of the output.txt file, without deleting its previous contents \n\nSolutions\n1)\n1. cd c:\\\n2. mkdir exercise\n3. mkdir exercise\\personal \nmkdir exercise\\ipro \n4. cd exercise\\personal \nmkdir txt \nmkdir pictures\n5. cd c:\\exercise\\personal\\pictures \nnpr: copy c:\\users\\hrvoje\\pictures\\*2013*.jpg  . \n6. cd ..\\txt \n7. dir not.here \n8. notepad life.txt (or notepad++ life.txt)\n9. copy life.txt tmp.txt\ncopy life.txt tmp1.txt\n10. tree \\ \ntemporary suspension of execution: Pause (or Ctrl+S)\nresume execution: any key \n11. tree /f ..\\..\n12. help > help.txt\n13. dir\n14. move help.txt ..\n15. dir .\ndir ..\n16. type ..\\help.txt\n17. del p*\n18. cd ..\\..\\..\n19. rmdir /s C:\\exercise\\personal\\txt \n20. del C:\\exercise\\personal\\pictures\n21. rmdir /s C:\\exercise\\personal\n\n2) cd c:\\exercise\\ipro\nnotepad test.c (or notepad++ test.c)\nEnter the following code in the test.c text file:\n#include <stdio.h>\nint main(void) {\n   int x,y;\n   printf(\"Enter two integers: \");\n   scanf(\"%d %d\", &x, &y);\n   if (x>y) { \n      printf(\"%d\\n\", x);\n   } else {\n      printf(\"%d\\n\", y);\n   }\n   return 0;\n}\n\ngcc -std=c11 -pedantic-errors -Wall -o test.exe test.c\n1) test.exe\n2) test.exe > output.txt\ntype  output.txt\n3) notepad input.txt (or notepad++ input.txt)\nEnter two integers in the character file input.txt, e.g.:\n10 5\n\n5\tOther materials\n5.1\tRecommended reading\n    V. Mornar: Introduction to programming, working version of the textbook\n        The textbook covers the complete material of the subject, and even more than that. The textbook will be available on MS Teams as pdf. An integral part of the textbook is the folder Examples with about ninety programs that can be independently translated and run in the command line or in the development environment VSCode.\n    K. N. King, C Programming: A Modern Approach, Second Edition, W. W. Norton & Company\n        An extensive work (805 pages) that has been accepted as a textbook at hundreds of universities around the world.\n    B. W. Kernighan, D. M. Ritchie: The C Programming Language, Second Edition, Englewood Cliffs, NJ: Prentice Hall\n        A basic book whose authors are the creators of the C programming language from which many generations of programmers have learned the language.\n5.2\tInstructions\n    Instructions for compiling programs written in the programming language C\n        contain a detailed description of the software installation procedures and how to compile and execute the program. Based on these instructions, students must learn to use some of the simple editors (Notepad or Notepad ++) and compile programs using the operating system command line. In addition, students can use these instructions, if they wish, to install and learn the basics of using the integrated development environment VSCode, which greatly facilitates error detection because it has a simple interaction with a specialized program - a debugger.\n    Instructions for using the character interface in Windows\n        basics of using the operating system's character interface (command line). Based on these instructions, students are expected to independently learn several operating system commands listed there: basics of positioning in file system folders, creating, renaming files and folders, redirecting inputs and outputs.\n\n\u00d3 University of Zagreb - Faculty of Electrical Engineering and Computing - Department of Applied Computing\t\nIntroduction to programming\t\tInstructions for using the character interface\n\n\n\n1 Introduction \nThe Windows operating system, for communication with the user, in addition to the graphical user interface (GUI), allows the use of the text (character-based) user interface (CLI - command-line interface, command-line user interface, console user interface, CUI-character user interface) in which the computer is controlled by typing a command in the command line. In this way of communication, the computer first prints a message (prompt) to the user that it is ready to accept the command, after which the user enters the command using the keyboard. The character-based user interface is very commonly used in science, engineering, and industry, and is supported by all of today's important operating systems, such as Unix, Linux, Windows, etc.\nWithin the course Introduction to Programming, the character interface will be used when working with files in which the source and executable codes of the C program are stored, and for translating and executing the C program. \n2 Launching the character interface \nThere are several options for launching a character interface (i.e., opening a character interface window). Here are some options: \nWindows 10: \na) Start  \u00ae\u00a0Type Command \u00ae the menu appears \u00ae select Command Prompt:\n                         \nOlder versions of Windows:\na) \tStart \u00ae\u00a0 All Programs \u00ae\u00a0 Accessories\u00ae\u00a0 Command Prompt\nb) \tStart \u00ae\u00a0 All Programs \u00ae\u00a0 Accessories \u00ae\u00a0 Run\nafter which the window displayed below opens in which it is necessary to enter the cmd command in the box and press the OK button: \n\n\nc) \tStart \u00ae\u00a0type cmd in the search box, after which the window shown under b) will open \nd) \tsimultaneous pressing of the Windows and R keys (Win + R), after which the window shown under b) opens\nIn all versions of Windows, the command prompt window then opens:\n\n3   Writing programs with a simple editor, compiling and executing programs\nThe whole process of writing and compiling programs will be illustrated in the command prompt, where you first need to create a folder where the program file will be stored, and then make it current e.g.\nmkdir C:\\IPRO\ncd C:\\IPRO\nand start editing program there with a text editor:\nnotepad program.c\n\nThe following code should be entered in this file:\n#include <stdio.h>\n\nint main(void) {\n   printf(\"Introduction to Programming\");\n   return 0;\n}\nand save the changes via the File/Save menu or the standard keyboard shortcut Ctrl-S (press the Ctrl key and then, without releasing it, the S key). After that it is necessary to check whether elementary compilation works:\ngcc program.c -o program.exe\n\nThis simplest gcc compiler call integrates compiler and linker functions. The program.c file is compiled. Because of the -o (output) option, it creates an executable file named program.exe which can then be executed with the command\nprogram.exe\nor\nprogram\nIf an error occurred while calling the compiler or starting the program, you should look for the solution in the next section.\n\nBasically, the previous compiler call is internally executed in the same way as the following sequence:\ngcc -c program.c\ngcc program.o -o program.exe\nThe first call, because of the argument or the -c (compile) option, is just a compilation to program.o, which in this case remains stored in the current folder (in the case of an elementary call, that object code is automatically deleted). The second call links the object code with the program libraries and creates the executable program.exe.",
            "time": 262.11,
            "evaluation": {
                "bleu_score": 2.797014204715853e-155,
                "rouge_score": {
                    "precision": 0.05485232067510548,
                    "recall": 0.4219576719576719,
                    "f1": 0.09665200391006841
                },
                "diversity": 0.96,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_5",
            "question": "Explain me how to setup Visual Studio Code for Linux operating system.",
            "answer": "To set up Visual Studio Code on a Linux operating system, follow these steps:\n1. Download and install Visual Studio Code from the official website (https://code.visualstudio.com/download).\n2. Open the terminal and navigate to the folder where you want to create your project.\n3. Install the C/C++ extension by opening the Extensions view in VSC, searching for \"C/C++\", and installing the Microsoft C/C++ extension.\n4. Restart VSC if prompted.\n5. Create a .vscode folder within your project folder.\n6. Inside the .vscode folder, create two JSON files: tasks.json and launch.json.\n7. Configure the environment for simple programs by adding the appropriate code to these JSON files as described in the text.\n8. Install MinGW if not already installed on your Linux system.\n9. Set up the VSC settings for automatic formatting while saving changes, as described in the text.\n10. Adjust the configuration files according to your needs and preferences.",
            "source_documents": [
                {
                    "page_content": "First, you need to install an extension that allows you to run programs in the C or C ++ programming language. In the extension search box, type C / C ++ and then select the Microsoft extension.\nAfter downloading, it is necessary to restart the VSC by pressing a button Reload.\n\nConfigure the environment for simple programs\nUnfortunately, VSC is not yet configured to compile C programs. Configuration can be done through menus, but the simplest way is to create a .vscode subfolder (note that the name begins with a dot) and in this colder, create two files written in Java Script Object Notation, JSON:\ntasks.json\tdescribes the tasks to be performed as part of the program compilation\nlaunch.json\tdescribes how to run the executable program\nFiles are created by selecting the folder within which the files should be created, selecting the appropriate icon and typing in the name of the new file.\nThe following code should be copied to the window on the right in the tasks.json file:\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n        \"label\": \"Build with gcc\",\n        \"type\": \"shell\",\n        \"command\": \"gcc\",\n        \"args\": [\"-g\", \"-std=c11\", \"-pedantic-errors\",\n            \"-Wall\", \"-o\", \"program.exe\", \"${file}\"\n        ]\n    }]\n}\n\nBasically, we are creating a task that will be called Build with gcc (\"label\"), which is an operating system command (\"type\":\"Shell\"), and the specific command that is executed is gcc (\"Command\"). \"args\" is a list of arguments of an external program call. ${file} is the name of the currently open program file, so the program.c is currently open in the window, the previous description will result in the execution of the following operating system command:\ngcc -g -std=c11 -pedantic-errors -Wall -o program.exe program.c",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "4\tWriting and compiling programs in an integrated development environment\nKnowledge of elementary editing of a program by notepad or a similar text editor, compiling programs from the command line, and running programs from the command line, is mandatory and will be tested during laboratory exercises.\nIntegrated Development Environments (IDEs) are used to make writing, compiling, and testing programs easier. In the Introduction to Programming course, we will use Visual Studio Code development environment, because it is an open source program, runs on multiple platforms (Windows, Linux, Mac), the installation package is relatively small compared to other similar environments, installation is fast and can be used for programming in any programming language, provided that a suitable compiler is installed on your computer, such as the MinGW package whose installation and use is described in the previous sections. The following assumes that MinGW is installed in accordance with the instructions in the previous sections.\nInstallation of the environment\nVisual Studio Code (VSC) is downloaded from the link\nhttps://code.visualstudio.com/download\nAfter selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.\nThe VSC desktop treats a single folder within the file system as a project. Therefore, the first action to take is to open the folder in which the program files are or will be located, such as the folder where we tested the compiler gcc (File -> Open Folder...).\nThe VSC toolbar consists of the following icons:\nExplorer (work with files in the currently open folder)\nSearch (search for content in the currently open folder and subfolders)\nSource control (working with GIT version control system)\nDebug (running a program and troubleshooting a program)\nExtensions (installing a VSC extension)",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "int main(void) {\n   if (1) {\n      printf(\"1\");\n   } else {\n      printf(\"2\");\n   }\n}\nThe VSC extension for C/C ++ will format the code with a command Alt-Shift-F.\nThe automatic code formatting while saving changes is built into this extension, but is turned off by default. The automatic code formatting setting while saving changes can be set in File/Preferences/Settings.\nThis, as well as all VSC settings, can be set at the user level (User settings, will be valid in any project/folder) or at the folder level (Workspace settings, will only be valid in the current folder). It is therefore necessary to first indicate the level (in the following example User settings to make the setting valid in other projects as well). Then search for the setting by typing the name of the setting in the search box. Some settings can be edited in the appropriate fields, some, for now (the environment is in constant development) by editing the JSON object. The specific setting is edited by editing the JSON object.\nClick the pencil icon in the line editor.formatOnSave and select true.\nThe default formatting style is somewhat wasteful. While saving the above program code, it will be automatically formatted as follows:\n#include <stdio.h>\nint main(void)\n{\n\tif (1)\n\t{\n\t\tprintf(\"1\");\n\t}\n\telse\n\t{\n\t\tprintf(\"2\");\n\t}\n}\nThis can be changed by adding a file named .clang-format to the folder containing the source code.\nThis file should contain the setting IndentWidth by which we determine the depth of indentation of each level of program statements. It is recommended to indent by 3 letters\nIndentWidth: 3\nThe blank behind the colon is required.\nThe tab width in the VSC settings also needs to be changed to format properly. Go to File -> Preferences -> Settings.\nIn the search box in the window that opens to the right, type a tab and set the Tab size to 3 (default value is 4).",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "5\tVSC configuration files\nThe configuration.zip file contains all the configuration files described in this text. The entire contents of this compressed file should be copied to a folder containing the original programs, for example: C:\\IPRO\nThe folder can then be opened in the VSC and all is ready to edit and compile a program.\nThere are different configurations built into these configuration files, so you need to select the C Launch configuration to be used for compilation and execution.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "First, you need to install an extension that allows you to run programs in the C or C ++ programming language. In the extension search box, type C / C ++ and then select the Microsoft extension.\nAfter downloading, it is necessary to restart the VSC by pressing a button Reload.\n\nConfigure the environment for simple programs\nUnfortunately, VSC is not yet configured to compile C programs. Configuration can be done through menus, but the simplest way is to create a .vscode subfolder (note that the name begins with a dot) and in this colder, create two files written in Java Script Object Notation, JSON:\ntasks.json\tdescribes the tasks to be performed as part of the program compilation\nlaunch.json\tdescribes how to run the executable program\nFiles are created by selecting the folder within which the files should be created, selecting the appropriate icon and typing in the name of the new file.\nThe following code should be copied to the window on the right in the tasks.json file:\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n        \"label\": \"Build with gcc\",\n        \"type\": \"shell\",\n        \"command\": \"gcc\",\n        \"args\": [\"-g\", \"-std=c11\", \"-pedantic-errors\",\n            \"-Wall\", \"-o\", \"program.exe\", \"${file}\"\n        ]\n    }]\n}\n\nBasically, we are creating a task that will be called Build with gcc (\"label\"), which is an operating system command (\"type\":\"Shell\"), and the specific command that is executed is gcc (\"Command\"). \"args\" is a list of arguments of an external program call. ${file} is the name of the currently open program file, so the program.c is currently open in the window, the previous description will result in the execution of the following operating system command:\ngcc -g -std=c11 -pedantic-errors -Wall -o program.exe program.c\n\n4\tWriting and compiling programs in an integrated development environment\nKnowledge of elementary editing of a program by notepad or a similar text editor, compiling programs from the command line, and running programs from the command line, is mandatory and will be tested during laboratory exercises.\nIntegrated Development Environments (IDEs) are used to make writing, compiling, and testing programs easier. In the Introduction to Programming course, we will use Visual Studio Code development environment, because it is an open source program, runs on multiple platforms (Windows, Linux, Mac), the installation package is relatively small compared to other similar environments, installation is fast and can be used for programming in any programming language, provided that a suitable compiler is installed on your computer, such as the MinGW package whose installation and use is described in the previous sections. The following assumes that MinGW is installed in accordance with the instructions in the previous sections.\nInstallation of the environment\nVisual Studio Code (VSC) is downloaded from the link\nhttps://code.visualstudio.com/download\nAfter selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.\nThe VSC desktop treats a single folder within the file system as a project. Therefore, the first action to take is to open the folder in which the program files are or will be located, such as the folder where we tested the compiler gcc (File -> Open Folder...).\nThe VSC toolbar consists of the following icons:\nExplorer (work with files in the currently open folder)\nSearch (search for content in the currently open folder and subfolders)\nSource control (working with GIT version control system)\nDebug (running a program and troubleshooting a program)\nExtensions (installing a VSC extension)\n\nint main(void) {\n   if (1) {\n      printf(\"1\");\n   } else {\n      printf(\"2\");\n   }\n}\nThe VSC extension for C/C ++ will format the code with a command Alt-Shift-F.\nThe automatic code formatting while saving changes is built into this extension, but is turned off by default. The automatic code formatting setting while saving changes can be set in File/Preferences/Settings.\nThis, as well as all VSC settings, can be set at the user level (User settings, will be valid in any project/folder) or at the folder level (Workspace settings, will only be valid in the current folder). It is therefore necessary to first indicate the level (in the following example User settings to make the setting valid in other projects as well). Then search for the setting by typing the name of the setting in the search box. Some settings can be edited in the appropriate fields, some, for now (the environment is in constant development) by editing the JSON object. The specific setting is edited by editing the JSON object.\nClick the pencil icon in the line editor.formatOnSave and select true.\nThe default formatting style is somewhat wasteful. While saving the above program code, it will be automatically formatted as follows:\n#include <stdio.h>\nint main(void)\n{\n\tif (1)\n\t{\n\t\tprintf(\"1\");\n\t}\n\telse\n\t{\n\t\tprintf(\"2\");\n\t}\n}\nThis can be changed by adding a file named .clang-format to the folder containing the source code.\nThis file should contain the setting IndentWidth by which we determine the depth of indentation of each level of program statements. It is recommended to indent by 3 letters\nIndentWidth: 3\nThe blank behind the colon is required.\nThe tab width in the VSC settings also needs to be changed to format properly. Go to File -> Preferences -> Settings.\nIn the search box in the window that opens to the right, type a tab and set the Tab size to 3 (default value is 4).\n\n5\tVSC configuration files\nThe configuration.zip file contains all the configuration files described in this text. The entire contents of this compressed file should be copied to a folder containing the original programs, for example: C:\\IPRO\nThe folder can then be opened in the VSC and all is ready to edit and compile a program.\nThere are different configurations built into these configuration files, so you need to select the C Launch configuration to be used for compilation and execution.",
            "time": 196.73,
            "evaluation": {
                "bleu_score": 0.03142595486114466,
                "rouge_score": {
                    "precision": 0.2670886075949367,
                    "recall": 0.20390464566251673,
                    "f1": 0.2312513064284289
                },
                "diversity": 0.9594594594594594,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "4"
                }
            }
        },
        {
            "question_number": "q_6",
            "question": "Give me the basics of using a debugger in Visual Studio Code.",
            "answer": "To use a debugger in Visual Studio Code, follow these steps:\n1. Open the folder containing your program files in VSC.\n2. Set a breakpoint at the desired execution point by clicking at the beginning of the line.\n3. Compile the program using the Debug menu or pressing F5.\n4. The program will start executing and stop at the set breakpoint.\n5. You can step through the code using Step over (F10), Step into (F11), or Step out (Shift-F11) commands.\n6. Monitor variable values by hovering over them or adding them to the Watch window.",
            "source_documents": [
                {
                    "page_content": "In the above configuration(\"miDebuggerPath\") it is understood that system variable Path contains the folder in which debugger gdb.exe is installed. If this is not the case, the correct absolute path to the file gdb.exe must be entered.\nNow all we have to do is open our source program file (because the configuration specifies that the program currently open in the editor is compiled) select Debug and start the program by pressing Start debugger or simply by pressing the key F5 on the keyboard.\nConsequently, the program will be compiled as described in prelaunch task in tasks.json and then, if compilation is successful, the program will be executed described in launch.json.\nIf the program has been modified in any way in the meantime, mark x after the program name will change into a circle and changes will need to be saved before the compilation with File/Save or Ctrl-S.\nThis action will print the text Introduction to Programming in a new window, which will then close immediately. To prevent the window from closing immediately, a breakpoint should be placed on the last line of the program by clicking the mouse at the very beginning of the line containing the return command.\nIf a new folder is created for another program or programs, .vscode folder should be copied there and all the preparatory actions are done.\nThe basics of working with a debugger\nProgram behavior is easily monitored using debugger. To demonstrate how such a program works, we will replace the content of program.c with\n#include<stdio.h>",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "5\tOther materials\n5.1\tRecommended reading\n    V. Mornar: Introduction to programming, working version of the textbook\n        The textbook covers the complete material of the subject, and even more than that. The textbook will be available on MS Teams as pdf. An integral part of the textbook is the folder Examples with about ninety programs that can be independently translated and run in the command line or in the development environment VSCode.\n    K. N. King, C Programming: A Modern Approach, Second Edition, W. W. Norton & Company\n        An extensive work (805 pages) that has been accepted as a textbook at hundreds of universities around the world.\n    B. W. Kernighan, D. M. Ritchie: The C Programming Language, Second Edition, Englewood Cliffs, NJ: Prentice Hall\n        A basic book whose authors are the creators of the C programming language from which many generations of programmers have learned the language.\n5.2\tInstructions\n    Instructions for compiling programs written in the programming language C\n        contain a detailed description of the software installation procedures and how to compile and execute the program. Based on these instructions, students must learn to use some of the simple editors (Notepad or Notepad ++) and compile programs using the operating system command line. In addition, students can use these instructions, if they wish, to install and learn the basics of using the integrated development environment VSCode, which greatly facilitates error detection because it has a simple interaction with a specialized program - a debugger.\n    Instructions for using the character interface in Windows\n        basics of using the operating system's character interface (command line). Based on these instructions, students are expected to independently learn several operating system commands listed there: basics of positioning in file system folders, creating, renaming files and folders, redirecting inputs and outputs.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "4\tWriting and compiling programs in an integrated development environment\nKnowledge of elementary editing of a program by notepad or a similar text editor, compiling programs from the command line, and running programs from the command line, is mandatory and will be tested during laboratory exercises.\nIntegrated Development Environments (IDEs) are used to make writing, compiling, and testing programs easier. In the Introduction to Programming course, we will use Visual Studio Code development environment, because it is an open source program, runs on multiple platforms (Windows, Linux, Mac), the installation package is relatively small compared to other similar environments, installation is fast and can be used for programming in any programming language, provided that a suitable compiler is installed on your computer, such as the MinGW package whose installation and use is described in the previous sections. The following assumes that MinGW is installed in accordance with the instructions in the previous sections.\nInstallation of the environment\nVisual Studio Code (VSC) is downloaded from the link\nhttps://code.visualstudio.com/download\nAfter selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.\nThe VSC desktop treats a single folder within the file system as a project. Therefore, the first action to take is to open the folder in which the program files are or will be located, such as the folder where we tested the compiler gcc (File -> Open Folder...).\nThe VSC toolbar consists of the following icons:\nExplorer (work with files in the currently open folder)\nSearch (search for content in the currently open folder and subfolders)\nSource control (working with GIT version control system)\nDebug (running a program and troubleshooting a program)\nExtensions (installing a VSC extension)",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "int main(void){\n   int i;\n   i = 0;\n   i = i + 1;\n   printf(\"Value of i: %d\\n\", i);\n   return 0;\n}\nand monitor the execution of that program step by step.\nIn short, we define one variable here, set it\u2019s initial value, increase it by 1, and finally print its final value in a window with accompanying text.\nIn the program, we first set a breakpoint at the statement where to pause the execution, by left-clicking at the very beginning of the corresponding line.\nAfter compilation, the program starts executing and then stops at the breakpoint.\nBringing the mouse cursor over a variable name gives you an insight into its value.\nRemeber definition of a variable only provides memory space, but not a default value.\nDebugger\u2019s toolbar responds with a popup window that lets you see the meaning of each icon together with the keyboard shortcut which triggers the corresponding action and contains the following commands (action names and corresponding shortcuts are listed in parentheses):\nContinue running to the end or next breakpoint (Continue, F5)\nExecute the following statement without entering the function code (Step over, F10)\nExecute the following statement entering the function code (Step into, F11)\nExit the current function (Step out, Shift-F11)\nRestart the program with recompilation (Restart, Ctrl-Shift-F5)\nStop the program (Stop, Shift-F5)\nIf the following statement is executed with the Step over action, the program stops after executing the command, and hovering over the variable name indicates that the content has changed.\nThe state of several variables in the surrounding of statement where the program stopped can be monitored in the Locals window. In larger programs, some variables that are not in immediate surrounding of the current statement may disappear from the Locals window. In such a case, the variable or expression whose value we want to watch constantly can be added to the Watch window.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "In the above configuration(\"miDebuggerPath\") it is understood that system variable Path contains the folder in which debugger gdb.exe is installed. If this is not the case, the correct absolute path to the file gdb.exe must be entered.\nNow all we have to do is open our source program file (because the configuration specifies that the program currently open in the editor is compiled) select Debug and start the program by pressing Start debugger or simply by pressing the key F5 on the keyboard.\nConsequently, the program will be compiled as described in prelaunch task in tasks.json and then, if compilation is successful, the program will be executed described in launch.json.\nIf the program has been modified in any way in the meantime, mark x after the program name will change into a circle and changes will need to be saved before the compilation with File/Save or Ctrl-S.\nThis action will print the text Introduction to Programming in a new window, which will then close immediately. To prevent the window from closing immediately, a breakpoint should be placed on the last line of the program by clicking the mouse at the very beginning of the line containing the return command.\nIf a new folder is created for another program or programs, .vscode folder should be copied there and all the preparatory actions are done.\nThe basics of working with a debugger\nProgram behavior is easily monitored using debugger. To demonstrate how such a program works, we will replace the content of program.c with\n#include<stdio.h>\n\n5\tOther materials\n5.1\tRecommended reading\n    V. Mornar: Introduction to programming, working version of the textbook\n        The textbook covers the complete material of the subject, and even more than that. The textbook will be available on MS Teams as pdf. An integral part of the textbook is the folder Examples with about ninety programs that can be independently translated and run in the command line or in the development environment VSCode.\n    K. N. King, C Programming: A Modern Approach, Second Edition, W. W. Norton & Company\n        An extensive work (805 pages) that has been accepted as a textbook at hundreds of universities around the world.\n    B. W. Kernighan, D. M. Ritchie: The C Programming Language, Second Edition, Englewood Cliffs, NJ: Prentice Hall\n        A basic book whose authors are the creators of the C programming language from which many generations of programmers have learned the language.\n5.2\tInstructions\n    Instructions for compiling programs written in the programming language C\n        contain a detailed description of the software installation procedures and how to compile and execute the program. Based on these instructions, students must learn to use some of the simple editors (Notepad or Notepad ++) and compile programs using the operating system command line. In addition, students can use these instructions, if they wish, to install and learn the basics of using the integrated development environment VSCode, which greatly facilitates error detection because it has a simple interaction with a specialized program - a debugger.\n    Instructions for using the character interface in Windows\n        basics of using the operating system's character interface (command line). Based on these instructions, students are expected to independently learn several operating system commands listed there: basics of positioning in file system folders, creating, renaming files and folders, redirecting inputs and outputs.\n\n4\tWriting and compiling programs in an integrated development environment\nKnowledge of elementary editing of a program by notepad or a similar text editor, compiling programs from the command line, and running programs from the command line, is mandatory and will be tested during laboratory exercises.\nIntegrated Development Environments (IDEs) are used to make writing, compiling, and testing programs easier. In the Introduction to Programming course, we will use Visual Studio Code development environment, because it is an open source program, runs on multiple platforms (Windows, Linux, Mac), the installation package is relatively small compared to other similar environments, installation is fast and can be used for programming in any programming language, provided that a suitable compiler is installed on your computer, such as the MinGW package whose installation and use is described in the previous sections. The following assumes that MinGW is installed in accordance with the instructions in the previous sections.\nInstallation of the environment\nVisual Studio Code (VSC) is downloaded from the link\nhttps://code.visualstudio.com/download\nAfter selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.\nThe VSC desktop treats a single folder within the file system as a project. Therefore, the first action to take is to open the folder in which the program files are or will be located, such as the folder where we tested the compiler gcc (File -> Open Folder...).\nThe VSC toolbar consists of the following icons:\nExplorer (work with files in the currently open folder)\nSearch (search for content in the currently open folder and subfolders)\nSource control (working with GIT version control system)\nDebug (running a program and troubleshooting a program)\nExtensions (installing a VSC extension)\n\nint main(void){\n   int i;\n   i = 0;\n   i = i + 1;\n   printf(\"Value of i: %d\\n\", i);\n   return 0;\n}\nand monitor the execution of that program step by step.\nIn short, we define one variable here, set it\u2019s initial value, increase it by 1, and finally print its final value in a window with accompanying text.\nIn the program, we first set a breakpoint at the statement where to pause the execution, by left-clicking at the very beginning of the corresponding line.\nAfter compilation, the program starts executing and then stops at the breakpoint.\nBringing the mouse cursor over a variable name gives you an insight into its value.\nRemeber definition of a variable only provides memory space, but not a default value.\nDebugger\u2019s toolbar responds with a popup window that lets you see the meaning of each icon together with the keyboard shortcut which triggers the corresponding action and contains the following commands (action names and corresponding shortcuts are listed in parentheses):\nContinue running to the end or next breakpoint (Continue, F5)\nExecute the following statement without entering the function code (Step over, F10)\nExecute the following statement entering the function code (Step into, F11)\nExit the current function (Step out, Shift-F11)\nRestart the program with recompilation (Restart, Ctrl-Shift-F5)\nStop the program (Stop, Shift-F5)\nIf the following statement is executed with the Step over action, the program stops after executing the command, and hovering over the variable name indicates that the content has changed.\nThe state of several variables in the surrounding of statement where the program stopped can be monitored in the Locals window. In larger programs, some variables that are not in immediate surrounding of the current statement may disappear from the Locals window. In such a case, the variable or expression whose value we want to watch constantly can be added to the Watch window.",
            "time": 202.48,
            "evaluation": {
                "bleu_score": 0.02249866028235231,
                "rouge_score": {
                    "precision": 0.4375,
                    "recall": 0.12410760803635724,
                    "f1": 0.19334659322288908
                },
                "diversity": 0.9787234042553191,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_7",
            "question": "How can I create a universal Makefile?",
            "answer": "A Universal Makefile can be created by using advanced functionalities of the make program. This involves defining rules for compiling source files (with extension .c) into object code files (with extension .o), specifying compiler name and options in variables CC and CFLAGS, and allowing for dependencies on header files (with extension .h). The Makefile should be located in the same folder as the source code files.\nFor example:\nCC = gcc\nCFLAGS=-c -g -std=c11 -pedantic-errors -Wall\nSRCS=$(wildcard *.c)\nINCLUDES=$(wildcard *.h)\nOBJS=$(SRCS:.c=.o)\n\nmain.exe: $(OBJS)\n\t$(CC) -o $@ $(OBJS)\n\n$(OBJS) : %.o: %.c $(INCLUDES)\n\t$(CC) $(CFLAGS) -c $<\n\nclean:\n\tdel *.o *.exe",
            "source_documents": [
                {
                    "page_content": "4.1.1\tOptional: Universal Makefile\nIn the previous examples, only the basic functionality of the program make was shown. With knowledge of more advanced functionalities, the details of which we will not dwell into here, it is possible to write Makefile which can be used to compile programs of any complexity, without explicitly specifying individual components and their dependencies. Very superficially explained, all the files with the extension .c are source files for the program, and all the files with the extension .o are object code and are derived from the source code of the same base name. The compiler name and options are stored in variables CC and CFLAGS.\nCC = gcc\nCFLAGS=-c -g -std=c11 -pedantic-errors -Wall\nSRCS=$(wildcard *.c)\nINCLUDES=$(wildcard *.h)\nOBJS=$(SRCS:.c=.o)\n\nmain.exe: $(OBJS)\n\t$(CC) -o $@ $(OBJS)\n\n$(OBJS) : %.o: %.c $(INCLUDES)\n\t$(CC) $(CFLAGS) -c $<\n\nclean:\n\tdel *.o *.exe\nThere last rule allows us to delete all object and executable code files. This, like any other single rule, can be executing by calling the program make specifying the name of the rule to be executed, in this example make clean. The first subsequent make program call will cause all the program modules to be compiled.\nFormatting the code\nProperly formatted code is a prerequisite for the readability of the program. The C compiler will seamlessly compile the following program:\n\n#include <stdio.h>\nint main(void) { if\n(1) { printf (\"1\"); } else {\nprintf (\"2\"); }}\n\nbut such a program it is almost impossible for a human to manage. Let\u2019s compare the previous program with the equivalent but neatly formatted one:\n\n#include <stdio.h>",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "The dependencies are described by rules in the Makefile file, which should be located in the same folder as the source code files.\nMakefile which describes the compilation of program.c to program.exe:\nprogram.exe: program.o\n\tgcc -o program.exe program.o\nprogram.o: program.c\n\tgcc -c -g -std=c11 -pedantic-errors -Wall program.c\nHere we have defined that program.exe (executable code) depends on program.o (object code), and that program.o  depends on program.c. If program.c is changed, this file will become newer than program.o, wich results, due to the option -c (compile), in compilation into object code, which will make the object code newer than the executable one, causing linking.\nIt is important to know that the indentation of a command that is executed for an appropriate rule is mandatory, with a tab character, and that the line describing the dependency of the executable code on the object code must be written first.\nIn practice, there will also be dependencies on the object code file and header (.h) files that are included in the compilation by the preprocessor command #include.\nIf, for example, a program consists of two modules, p1.c i p2.c where the first includes h1.h i h2.h, and the second includes h3.h, this will be defined in the following Makefile:\nprogram.exe: p1.o p2.o\n\tgcc -o program.exe program.o\np1.o: p1.c h1.h h2.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p1.c\np2.o: p2.c h3.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p2.c\ntasks.json must now describe the call of program make. I can be done by replacing the gcc call with a make program call while deleting the argument list (make does not require arguments if dependencies are described in the file Makefile, otherwise the arguments at the call should be  -f name_of_make_file). Alternatively, in tasks.json a new task can be added as follows:\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n            \"label\": \"Build with gcc\",\n            \"type\": \"shell\",\n            \"command\": \"gcc\",",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "The following editors (in addition to Visual Studio Code) are allowed in lab: Notepad and Notepad++. \nNotepad can be run in two ways:\n\u00a8 by specifying only the command notepad,\n\u00a8 by specifying the command notepad followed by the name of the file to be edited (notepad file_name).\nThe same applies to the Notepad ++ editor, but assuming that the folder where Notepad ++ is installed is added to the system variable path (like for gcc, see Instructions For Writing Programs):\n\u00a8 by specifying only the command notepad++,\n\u00a8 by specifying the command notepad++ followed by the name of the file to be edited (notepad++ file_name).\nIf the editor is started without a file name, the file name in which you want to save the typed text will be specified later. However, as txt is the default extension for the file name, it often happens that the file gets an additional txt extension, and care should be taken with the folder in which it will be located. For example, if a file needs to be named ipro.c, it is possible that it should actually be named ipro.c.txt. Therefore, it is recommended to start the editor by specifying the file name (with the possibility of specifying the absolute or relative path):\nnotepad ipro.c\t(the editor opens the ipro.c file located in the working folder)\nnotepad d:\\exercises\\p.c\t(the editor opens the p.c file located in the folder \\exercises on disk D)",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                },
                {
                    "page_content": "that is, a known compiler call which will create program.exe.\nThe only novelty here is an option -g which adds an interaction with the debugger to the executable code.\nIt should be noted that this configuration is only good for programs that consist of a single source file, but therefore allows the same folder contain an unlimited number of such simple programs.\nThe file launch.json should be created in the same way, with the following content\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"C Launch\",\n            \"preLaunchTask\": \"Build with gcc\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceRoot}/program.exe\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceRoot}\",\n            \"environment\": [],\n            \"externalConsole\": true,\n            \"miDebuggerPath\": \"gdb.exe\",\n            \"linux\": {\n                \"MIMode\": \"gdb\"\n            },\n            \"osx\": {\n                \"MIMode\": \"lldb\"\n            },\n            \"windows\": {\n                \"MIMode\": \"gdb\"\n            }\n        }\n    ]\n}\nIn short, we have given the name of the job that must be started before our program is started (\"preLaunchTask\"), the path to our program (\"program\") and the path to the debugger(\"miDebuggerPath\"). The name of the job (\"preLaunchTask\") must match the text in the option \"label\" in tasks.json.  It should be noted that in this case, the character separating the levels of folders in the slash (/) not the backslash (\\).\nIn the above configuration(\"miDebuggerPath\") it is understood that system variable Path contains the folder in which debugger gdb.exe is installed. If this is not the case, the correct absolute path to the file gdb.exe must be entered.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "4.1.1\tOptional: Universal Makefile\nIn the previous examples, only the basic functionality of the program make was shown. With knowledge of more advanced functionalities, the details of which we will not dwell into here, it is possible to write Makefile which can be used to compile programs of any complexity, without explicitly specifying individual components and their dependencies. Very superficially explained, all the files with the extension .c are source files for the program, and all the files with the extension .o are object code and are derived from the source code of the same base name. The compiler name and options are stored in variables CC and CFLAGS.\nCC = gcc\nCFLAGS=-c -g -std=c11 -pedantic-errors -Wall\nSRCS=$(wildcard *.c)\nINCLUDES=$(wildcard *.h)\nOBJS=$(SRCS:.c=.o)\n\nmain.exe: $(OBJS)\n\t$(CC) -o $@ $(OBJS)\n\n$(OBJS) : %.o: %.c $(INCLUDES)\n\t$(CC) $(CFLAGS) -c $<\n\nclean:\n\tdel *.o *.exe\nThere last rule allows us to delete all object and executable code files. This, like any other single rule, can be executing by calling the program make specifying the name of the rule to be executed, in this example make clean. The first subsequent make program call will cause all the program modules to be compiled.\nFormatting the code\nProperly formatted code is a prerequisite for the readability of the program. The C compiler will seamlessly compile the following program:\n\n#include <stdio.h>\nint main(void) { if\n(1) { printf (\"1\"); } else {\nprintf (\"2\"); }}\n\nbut such a program it is almost impossible for a human to manage. Let\u2019s compare the previous program with the equivalent but neatly formatted one:\n\n#include <stdio.h>\n\nThe dependencies are described by rules in the Makefile file, which should be located in the same folder as the source code files.\nMakefile which describes the compilation of program.c to program.exe:\nprogram.exe: program.o\n\tgcc -o program.exe program.o\nprogram.o: program.c\n\tgcc -c -g -std=c11 -pedantic-errors -Wall program.c\nHere we have defined that program.exe (executable code) depends on program.o (object code), and that program.o  depends on program.c. If program.c is changed, this file will become newer than program.o, wich results, due to the option -c (compile), in compilation into object code, which will make the object code newer than the executable one, causing linking.\nIt is important to know that the indentation of a command that is executed for an appropriate rule is mandatory, with a tab character, and that the line describing the dependency of the executable code on the object code must be written first.\nIn practice, there will also be dependencies on the object code file and header (.h) files that are included in the compilation by the preprocessor command #include.\nIf, for example, a program consists of two modules, p1.c i p2.c where the first includes h1.h i h2.h, and the second includes h3.h, this will be defined in the following Makefile:\nprogram.exe: p1.o p2.o\n\tgcc -o program.exe program.o\np1.o: p1.c h1.h h2.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p1.c\np2.o: p2.c h3.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p2.c\ntasks.json must now describe the call of program make. I can be done by replacing the gcc call with a make program call while deleting the argument list (make does not require arguments if dependencies are described in the file Makefile, otherwise the arguments at the call should be  -f name_of_make_file). Alternatively, in tasks.json a new task can be added as follows:\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n            \"label\": \"Build with gcc\",\n            \"type\": \"shell\",\n            \"command\": \"gcc\",\n\nThe following editors (in addition to Visual Studio Code) are allowed in lab: Notepad and Notepad++. \nNotepad can be run in two ways:\n\u00a8 by specifying only the command notepad,\n\u00a8 by specifying the command notepad followed by the name of the file to be edited (notepad file_name).\nThe same applies to the Notepad ++ editor, but assuming that the folder where Notepad ++ is installed is added to the system variable path (like for gcc, see Instructions For Writing Programs):\n\u00a8 by specifying only the command notepad++,\n\u00a8 by specifying the command notepad++ followed by the name of the file to be edited (notepad++ file_name).\nIf the editor is started without a file name, the file name in which you want to save the typed text will be specified later. However, as txt is the default extension for the file name, it often happens that the file gets an additional txt extension, and care should be taken with the folder in which it will be located. For example, if a file needs to be named ipro.c, it is possible that it should actually be named ipro.c.txt. Therefore, it is recommended to start the editor by specifying the file name (with the possibility of specifying the absolute or relative path):\nnotepad ipro.c\t(the editor opens the ipro.c file located in the working folder)\nnotepad d:\\exercises\\p.c\t(the editor opens the p.c file located in the folder \\exercises on disk D)\n\nthat is, a known compiler call which will create program.exe.\nThe only novelty here is an option -g which adds an interaction with the debugger to the executable code.\nIt should be noted that this configuration is only good for programs that consist of a single source file, but therefore allows the same folder contain an unlimited number of such simple programs.\nThe file launch.json should be created in the same way, with the following content\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"C Launch\",\n            \"preLaunchTask\": \"Build with gcc\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceRoot}/program.exe\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceRoot}\",\n            \"environment\": [],\n            \"externalConsole\": true,\n            \"miDebuggerPath\": \"gdb.exe\",\n            \"linux\": {\n                \"MIMode\": \"gdb\"\n            },\n            \"osx\": {\n                \"MIMode\": \"lldb\"\n            },\n            \"windows\": {\n                \"MIMode\": \"gdb\"\n            }\n        }\n    ]\n}\nIn short, we have given the name of the job that must be started before our program is started (\"preLaunchTask\"), the path to our program (\"program\") and the path to the debugger(\"miDebuggerPath\"). The name of the job (\"preLaunchTask\") must match the text in the option \"label\" in tasks.json.  It should be noted that in this case, the character separating the levels of folders in the slash (/) not the backslash (\\).\nIn the above configuration(\"miDebuggerPath\") it is understood that system variable Path contains the folder in which debugger gdb.exe is installed. If this is not the case, the correct absolute path to the file gdb.exe must be entered.",
            "time": 238.24,
            "evaluation": {
                "bleu_score": 0.17461439848985544,
                "rouge_score": {
                    "precision": 0.45476190476190476,
                    "recall": 0.35641698395538685,
                    "f1": 0.39959196376084927
                },
                "diversity": 0.9595959595959596,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "4",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_8",
            "question": "What do I use to log in into Edgar?",
            "answer": "You can access the Edgar system at: https://edgar.fer.hr/\nThe username and password from the AAI-Edu system are used to log in to the system.",
            "source_documents": [
                {
                    "page_content": "Instructions for performing laboratory exercises and tests via the Edgar system\n\n\n1\tEdgar system \nThe Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language. \nThe labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/\nNote: The layout of the graphical user interface elements on the current version of the system Edgar may differ in part from the appearance of the user interface shown in the illustrations later in this document. In case of any ambiguities and/or difficulties when using the system, contact the assistant on duty.\n\n\n1.1\tLogin to the system \nThe username and password from the AAI-Edu system are used to log in to the system. You can access this login mode by clicking on \"login here using AAI\".\nThen you need to enter the AAI username and password in the login fields and click \u201ePRIJAVA\u201c.\nNote: The username from the AAI-Edu system is in the form:\nyour_user_name@your_institution.hr \n\n\n1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.\n\n2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals. \nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.\n\nThe test is commenced by the option \u201eStart exam\u201c.\nTo practice working with the system at home, a demo test has been defined. This test is not graded and can be run an unlimited number of times. The password is not needed. The test is available under \u201cPublic exams\u201d. \n\nLinks at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Only if the print statement is corrected to \nprintf(\"%d %d\\n%d\", a, b, a + b);\n\nthe program will return the correct result for all test cases.\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\n\n2.2\tCompletion of writing and submission of the test for assessment \nAfter completing all the tasks, the test should be submitted for the final assessment by selecting the \"Submit\" option in the upper right corner of the window. The submission is confirmed once again by selecting \"Yes, submit test!\", but can also be canceled by selecting \"No, continue writing\". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.\nThen it is necessary to wait for the completion of the evaluation.\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "Instructions for performing laboratory exercises and tests via the Edgar system\n\n\n1\tEdgar system \nThe Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language. \nThe labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/\nNote: The layout of the graphical user interface elements on the current version of the system Edgar may differ in part from the appearance of the user interface shown in the illustrations later in this document. In case of any ambiguities and/or difficulties when using the system, contact the assistant on duty.\n\n\n1.1\tLogin to the system \nThe username and password from the AAI-Edu system are used to log in to the system. You can access this login mode by clicking on \"login here using AAI\".\nThen you need to enter the AAI username and password in the login fields and click \u201ePRIJAVA\u201c.\nNote: The username from the AAI-Edu system is in the form:\nyour_user_name@your_institution.hr \n\n\n1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.\n\n1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.\n\n2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals. \nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.\n\nThe test is commenced by the option \u201eStart exam\u201c.\nTo practice working with the system at home, a demo test has been defined. This test is not graded and can be run an unlimited number of times. The password is not needed. The test is available under \u201cPublic exams\u201d. \n\nLinks at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.\n\nOnly if the print statement is corrected to \nprintf(\"%d %d\\n%d\", a, b, a + b);\n\nthe program will return the correct result for all test cases.\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\n\n2.2\tCompletion of writing and submission of the test for assessment \nAfter completing all the tasks, the test should be submitted for the final assessment by selecting the \"Submit\" option in the upper right corner of the window. The submission is confirmed once again by selecting \"Yes, submit test!\", but can also be canceled by selecting \"No, continue writing\". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.\nThen it is necessary to wait for the completion of the evaluation.\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
            "time": 186.71,
            "evaluation": {
                "bleu_score": 0.5953307597644484,
                "rouge_score": {
                    "precision": 0.5357142857142858,
                    "recall": 0.6767848699763593,
                    "f1": 0.5743882167443409
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "4",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_9",
            "question": "How does the support system in Edgar work?",
            "answer": "The Ticketing system in Edgar allows students to ask questions related to specific tasks while writing a test. The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks). After the problem has been addressed, a message saying \"Ticket resolved\" appears on the student's screen.",
            "source_documents": [
                {
                    "page_content": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Only if the print statement is corrected to \nprintf(\"%d %d\\n%d\", a, b, a + b);\n\nthe program will return the correct result for all test cases.\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\n\n2.2\tCompletion of writing and submission of the test for assessment \nAfter completing all the tasks, the test should be submitted for the final assessment by selecting the \"Submit\" option in the upper right corner of the window. The submission is confirmed once again by selecting \"Yes, submit test!\", but can also be canceled by selecting \"No, continue writing\". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.\nThen it is necessary to wait for the completion of the evaluation.\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "If errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.\n\nIf the compilation of the program is successful, the program will be run on several pre-prepared test cases. If the printout of the program for a case does not correspond to the expected printout, a certain percentage, determined in advance for that case, is deducted from the total number of points provided for the task. This percentage can be 100% if it is a typical test case, for example if a program that determines whether a given number is within the required interval does not work well for numbers inside or outside the interval, or less than 100% if the test case examines program behavior at the boundaries of the interval. The total deducted percentage of points for a task cannot exceed 100%.\nThe process of writing tasks in the Edgar system will be illustrated by one of the tasks from the demo test, which reads:\nWrite a program that prints the message as in the examples that follow, reads integers a and b, prints them separated by a single space, and below that, prints their sum in a new line.\n\nExample 1:\nHello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7and\u00b7b\u00b7>\u00b715\u00b720\u21b5\n15\u00b720\u21b5\n35\n\nExample 2:\nHello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7and\u00b7b\u00b7>\u00b7-5\u00b720\u21b5\n-5\u00b720\u21b5\n15\n\nMark `\u21b5` in the examples indicates that a jump to new line (line feed) should be printed at that place or that the key Enter or Return should be pressed. Mark `\u00b7` indicates that a space should be printed at that place.\n\nTry to copy-paste the following program into the solution field:\n\n#include <stdio.h>\nint main(void) {\n   int a, b;\n   printf(\"Hello World! Now enter a and b > \");\n   scanf(\"%d %d\", &a, &b);\n   printf(\"%d  %d\", a, b);\n   return 0;\n}",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "With each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\nThe student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.\n\n\n2.1\tTests with program tasks \nImportant: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.\nIn tasks that require writing of a program, in the Edgar system, below the text of the task, there is a field to which the solution (program code) should be pasted. \nThe program code transferred to the Edgar system can be run in the following ways:\n\u2022\tby selecting the option \u201eRun\u201c\n\u2022\twhile the program code field is in focus (the mouse pointer is in the field), by a key combination Ctrl + Enter\n\nIf errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.\n\nOnly if the print statement is corrected to \nprintf(\"%d %d\\n%d\", a, b, a + b);\n\nthe program will return the correct result for all test cases.\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\n\n2.2\tCompletion of writing and submission of the test for assessment \nAfter completing all the tasks, the test should be submitted for the final assessment by selecting the \"Submit\" option in the upper right corner of the window. The submission is confirmed once again by selecting \"Yes, submit test!\", but can also be canceled by selecting \"No, continue writing\". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.\nThen it is necessary to wait for the completion of the evaluation.\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nIf errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.\n\nIf the compilation of the program is successful, the program will be run on several pre-prepared test cases. If the printout of the program for a case does not correspond to the expected printout, a certain percentage, determined in advance for that case, is deducted from the total number of points provided for the task. This percentage can be 100% if it is a typical test case, for example if a program that determines whether a given number is within the required interval does not work well for numbers inside or outside the interval, or less than 100% if the test case examines program behavior at the boundaries of the interval. The total deducted percentage of points for a task cannot exceed 100%.\nThe process of writing tasks in the Edgar system will be illustrated by one of the tasks from the demo test, which reads:\nWrite a program that prints the message as in the examples that follow, reads integers a and b, prints them separated by a single space, and below that, prints their sum in a new line.\n\nExample 1:\nHello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7and\u00b7b\u00b7>\u00b715\u00b720\u21b5\n15\u00b720\u21b5\n35\n\nExample 2:\nHello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7and\u00b7b\u00b7>\u00b7-5\u00b720\u21b5\n-5\u00b720\u21b5\n15\n\nMark `\u21b5` in the examples indicates that a jump to new line (line feed) should be printed at that place or that the key Enter or Return should be pressed. Mark `\u00b7` indicates that a space should be printed at that place.\n\nTry to copy-paste the following program into the solution field:\n\n#include <stdio.h>\nint main(void) {\n   int a, b;\n   printf(\"Hello World! Now enter a and b > \");\n   scanf(\"%d %d\", &a, &b);\n   printf(\"%d  %d\", a, b);\n   return 0;\n}\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\nThe student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.\n\n\n2.1\tTests with program tasks \nImportant: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.\nIn tasks that require writing of a program, in the Edgar system, below the text of the task, there is a field to which the solution (program code) should be pasted. \nThe program code transferred to the Edgar system can be run in the following ways:\n\u2022\tby selecting the option \u201eRun\u201c\n\u2022\twhile the program code field is in focus (the mouse pointer is in the field), by a key combination Ctrl + Enter\n\nIf errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.",
            "time": 202.31,
            "evaluation": {
                "bleu_score": 0.28460445127568657,
                "rouge_score": {
                    "precision": 0.5657894736842106,
                    "recall": 0.28810722580787856,
                    "f1": 0.381555379945388
                },
                "diversity": 0.972972972972973,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_10",
            "question": "Is asking for solutions with the ticketing system ok?",
            "answer": "Yes, it is okay to ask questions about specific tasks using the ticketing system during the test. However, you should not wait for an answer before continuing with the test. The teaching staff will examine your problem as soon as possible and provide an answer.",
            "source_documents": [
                {
                    "page_content": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "3.1\tView own tickets \nOpen and resolved tickets can be viewed the menu option My tickets. \nThis option is useful when the question asked by the student cannot be answered quickly (in time\nduration of the check) because it provides the possibility of subsequent review of the answers of the teaching staff. For example, there is a (fatal) mistake on the part of the teaching staff, and because of that, it is subsequent to all students answer recognized as correct.\nNote: It is not possible to ask questions on the ITP Demo test.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "If errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.\n\nIf the compilation of the program is successful, the program will be run on several pre-prepared test cases. If the printout of the program for a case does not correspond to the expected printout, a certain percentage, determined in advance for that case, is deducted from the total number of points provided for the task. This percentage can be 100% if it is a typical test case, for example if a program that determines whether a given number is within the required interval does not work well for numbers inside or outside the interval, or less than 100% if the test case examines program behavior at the boundaries of the interval. The total deducted percentage of points for a task cannot exceed 100%.\nThe process of writing tasks in the Edgar system will be illustrated by one of the tasks from the demo test, which reads:\nWrite a program that prints the message as in the examples that follow, reads integers a and b, prints them separated by a single space, and below that, prints their sum in a new line.\n\nExample 1:\nHello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7and\u00b7b\u00b7>\u00b715\u00b720\u21b5\n15\u00b720\u21b5\n35\n\nExample 2:\nHello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7and\u00b7b\u00b7>\u00b7-5\u00b720\u21b5\n-5\u00b720\u21b5\n15\n\nMark `\u21b5` in the examples indicates that a jump to new line (line feed) should be printed at that place or that the key Enter or Return should be pressed. Mark `\u00b7` indicates that a space should be printed at that place.\n\nTry to copy-paste the following program into the solution field:\n\n#include <stdio.h>\nint main(void) {\n   int a, b;\n   printf(\"Hello World! Now enter a and b > \");\n   scanf(\"%d %d\", &a, &b);\n   printf(\"%d  %d\", a, b);\n   return 0;\n}",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.\n\n3.1\tView own tickets \nOpen and resolved tickets can be viewed the menu option My tickets. \nThis option is useful when the question asked by the student cannot be answered quickly (in time\nduration of the check) because it provides the possibility of subsequent review of the answers of the teaching staff. For example, there is a (fatal) mistake on the part of the teaching staff, and because of that, it is subsequent to all students answer recognized as correct.\nNote: It is not possible to ask questions on the ITP Demo test.\n\nIf errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.\n\nIf the compilation of the program is successful, the program will be run on several pre-prepared test cases. If the printout of the program for a case does not correspond to the expected printout, a certain percentage, determined in advance for that case, is deducted from the total number of points provided for the task. This percentage can be 100% if it is a typical test case, for example if a program that determines whether a given number is within the required interval does not work well for numbers inside or outside the interval, or less than 100% if the test case examines program behavior at the boundaries of the interval. The total deducted percentage of points for a task cannot exceed 100%.\nThe process of writing tasks in the Edgar system will be illustrated by one of the tasks from the demo test, which reads:\nWrite a program that prints the message as in the examples that follow, reads integers a and b, prints them separated by a single space, and below that, prints their sum in a new line.\n\nExample 1:\nHello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7and\u00b7b\u00b7>\u00b715\u00b720\u21b5\n15\u00b720\u21b5\n35\n\nExample 2:\nHello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7and\u00b7b\u00b7>\u00b7-5\u00b720\u21b5\n-5\u00b720\u21b5\n15\n\nMark `\u21b5` in the examples indicates that a jump to new line (line feed) should be printed at that place or that the key Enter or Return should be pressed. Mark `\u00b7` indicates that a space should be printed at that place.\n\nTry to copy-paste the following program into the solution field:\n\n#include <stdio.h>\nint main(void) {\n   int a, b;\n   printf(\"Hello World! Now enter a and b > \");\n   scanf(\"%d %d\", &a, &b);\n   printf(\"%d  %d\", a, b);\n   return 0;\n}\n\n2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
            "time": 133.93,
            "evaluation": {
                "bleu_score": 0.07343660663917347,
                "rouge_score": {
                    "precision": 0.14444444444444443,
                    "recall": 0.43880090497737556,
                    "f1": 0.21694161120642522
                },
                "diversity": 0.9772727272727273,
                "human_eval": {
                    "expression_and_logic": "3",
                    "accuracy_and_relevance": "1",
                    "overall_quality_and_engagement": "1"
                }
            }
        },
        {
            "question_number": "q_11",
            "question": "What is the duration of the second cycle in weeks?",
            "answer": "The duration of the second cycle is 12 weeks.",
            "source_documents": [
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Introduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.\nIt should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n        It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n    Browsing content on the Internet for additional explanations and examples",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\nIntroduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter\n\n2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam\n\n2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.\nIt should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n        It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n    Browsing content on the Internet for additional explanations and examples",
            "time": 189.54,
            "evaluation": {
                "bleu_score": 0.7506238537503395,
                "rouge_score": {
                    "precision": 0.5555555555555556,
                    "recall": 0.5242424242424242,
                    "f1": 0.5385964912280702
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "2",
                    "overall_quality_and_engagement": "3"
                }
            }
        },
        {
            "question_number": "q_12",
            "question": "What will happen if i dont work continuously?",
            "answer": "If you do not work continuously, it is very likely that your results will suffer significantly. The course material is designed to be learned and understood through a layered approach, with each layer building on the previous ones. If you do not keep up with the material as it is presented, you may find yourself unable to understand or complete more advanced tasks later in the course. Additionally, if you fall behind, it will be difficult to catch up during consultations, as they are meant to clarify ambiguities and help with specific issues rather than teach the entire course from scratch.\n",
            "source_documents": [
                {
                    "page_content": "2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.\nIt should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n        It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n    Browsing content on the Internet for additional explanations and examples",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "The state of several variables in the surrounding of statement where the program stopped can be monitored in the Locals window. In larger programs, some variables that are not in immediate surrounding of the current statement may disappear from the Locals window. In such a case, the variable or expression whose value we want to watch constantly can be added to the Watch window.\nIf variable i is set to 0 in Watch window, after performing the statement i = i + 1, value of variable i in Watch window will be 1.\nIf Step into action is triggered at this point, the debugger will enter printf system function and the statements comprising printf will be shown. This is rarely necessary.  Step out action exits such a function, executing the rest of the commands in the function.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Only if the print statement is corrected to \nprintf(\"%d %d\\n%d\", a, b, a + b);\n\nthe program will return the correct result for all test cases.\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\n\n2.2\tCompletion of writing and submission of the test for assessment \nAfter completing all the tasks, the test should be submitted for the final assessment by selecting the \"Submit\" option in the upper right corner of the window. The submission is confirmed once again by selecting \"Yes, submit test!\", but can also be canceled by selecting \"No, continue writing\". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.\nThen it is necessary to wait for the completion of the evaluation.\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.\nIt should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n        It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n    Browsing content on the Internet for additional explanations and examples\n\nThe state of several variables in the surrounding of statement where the program stopped can be monitored in the Locals window. In larger programs, some variables that are not in immediate surrounding of the current statement may disappear from the Locals window. In such a case, the variable or expression whose value we want to watch constantly can be added to the Watch window.\nIf variable i is set to 0 in Watch window, after performing the statement i = i + 1, value of variable i in Watch window will be 1.\nIf Step into action is triggered at this point, the debugger will enter printf system function and the statements comprising printf will be shown. This is rarely necessary.  Step out action exits such a function, executing the rest of the commands in the function.\n\n2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam\n\nOnly if the print statement is corrected to \nprintf(\"%d %d\\n%d\", a, b, a + b);\n\nthe program will return the correct result for all test cases.\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\n\n2.2\tCompletion of writing and submission of the test for assessment \nAfter completing all the tasks, the test should be submitted for the final assessment by selecting the \"Submit\" option in the upper right corner of the window. The submission is confirmed once again by selecting \"Yes, submit test!\", but can also be canceled by selecting \"No, continue writing\". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.\nThen it is necessary to wait for the completion of the evaluation.\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
            "time": 181.1,
            "evaluation": {
                "bleu_score": 1.4263470288952477e-78,
                "rouge_score": {
                    "precision": 0.14851485148514854,
                    "recall": 0.24019217229902712,
                    "f1": 0.183519104196976
                },
                "diversity": 0.96,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_13",
            "question": "How should i study outside of the lectures if I want to get a good grade?",
            "answer": "To achieve a good grade, it is necessary to spend at least 140 hours on independent work. This includes learning, solving tasks, reading other literature, browsing content on the Internet for additional explanations and examples. It is important to work continuously, every week, due to the layered approach in processing materials.\n\n5\tRecommended literature\nThe recommended literature is published through the IPRO2023 team on the Microsoft Teams platform.\n    The recommended literature includes:\n        \"Introduction to Programming\" by Y. Demchenko and A. Kovalev, 2nd edition, 2019\n        \"C Programming Absolute Beginner's Guide\" by Greg Perry, 2018\n        \"C Primer Plus\" by Stephen Prata, 6th edition, 2015\n        \"The C Programming Language\" by Brian W. Kernighan and Dennis M. Ritchie, 2nd edition, 1988\n    It is recommended to read these books in addition to attending lectures and solving tasks.\n\n6\tExam period\nDuring the exam period, students who did not pass the course during",
            "source_documents": [
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.\nIt should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n        It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n    Browsing content on the Internet for additional explanations and examples",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Introduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam\n\nLectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2\n\n2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.\nIt should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n        It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n    Browsing content on the Internet for additional explanations and examples\n\nIntroduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter",
            "time": 219.33,
            "evaluation": {
                "bleu_score": 9.856439090560402e-79,
                "rouge_score": {
                    "precision": 0.09290540540540541,
                    "recall": 0.24386446886446886,
                    "f1": 0.12921766490457154
                },
                "diversity": 0.9657534246575342,
                "human_eval": {
                    "expression_and_logic": "4",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_14",
            "question": "Which competences are expected to be acquired after completing the subject?",
            "answer": "After completing the subject, students should have acquired basic programming skills in the C language, as well as the ability to create less complex programs. They should also be able to understand and apply fundamental algorithms and data structures, and be familiar with debugging techniques.",
            "source_documents": [
                {
                    "page_content": "2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.\nIt should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n        It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n    Browsing content on the Internet for additional explanations and examples",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Introduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.\nIt should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n        It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n    Browsing content on the Internet for additional explanations and examples\n\nIntroduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter\n\n2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam\n\n2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
            "time": 191.83,
            "evaluation": {
                "bleu_score": 0.11730467025895547,
                "rouge_score": {
                    "precision": 0.25555555555555554,
                    "recall": 0.27976190476190477,
                    "f1": 0.2645917678812416
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_15",
            "question": "How do laboratory exercises work?",
            "answer": "Laboratory exercises in the course Introduction to Programming are performed by students in a FER lab, following precisely prescribed terms. There are four exercises in the 1st cycle (before the midterm exam) and four exercises in the 2nd cycle. Each laboratory exercise lasts approximately 110 minutes and must be completed by the student within the specified time frame. There is no compensation for laboratory exercises in case of absence.\nThe laboratory exercise consists of two parts: solving tasks with multiple choice questions, where a correct answer earns positive points, an incorrect answer earns negative points, and an unanswered question does not earn negative points; and creating one or more programs (algorithm design, coding, testing). In these assignments, there are no negative points.\nStudents work independently on the faculty computer under the supervision of teachers on duty. They have access to the same tools they use to solve tasks on their own computers: Notepad and Notepad++ editors, gcc compiler used via the command line of the operating system, VSCode development environment.\nLaboratory exercises are submitted for assessment using the Edgar system.",
            "source_documents": [
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.\n\n2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals. \nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.\n\nThe test is commenced by the option \u201eStart exam\u201c.\nTo practice working with the system at home, a demo test has been defined. This test is not graded and can be run an unlimited number of times. The password is not needed. The test is available under \u201cPublic exams\u201d. \n\nLinks at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Instructions for performing laboratory exercises and tests via the Edgar system\n\n\n1\tEdgar system \nThe Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language. \nThe labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/\nNote: The layout of the graphical user interface elements on the current version of the system Edgar may differ in part from the appearance of the user interface shown in the illustrations later in this document. In case of any ambiguities and/or difficulties when using the system, contact the assistant on duty.\n\n\n1.1\tLogin to the system \nThe username and password from the AAI-Edu system are used to log in to the system. You can access this login mode by clicking on \"login here using AAI\".\nThen you need to enter the AAI username and password in the login fields and click \u201ePRIJAVA\u201c.\nNote: The username from the AAI-Edu system is in the form:\nyour_user_name@your_institution.hr \n\n\n1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\n1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.\n\n2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals. \nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.\n\nThe test is commenced by the option \u201eStart exam\u201c.\nTo practice working with the system at home, a demo test has been defined. This test is not graded and can be run an unlimited number of times. The password is not needed. The test is available under \u201cPublic exams\u201d. \n\nLinks at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\nInstructions for performing laboratory exercises and tests via the Edgar system\n\n\n1\tEdgar system \nThe Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language. \nThe labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/\nNote: The layout of the graphical user interface elements on the current version of the system Edgar may differ in part from the appearance of the user interface shown in the illustrations later in this document. In case of any ambiguities and/or difficulties when using the system, contact the assistant on duty.\n\n\n1.1\tLogin to the system \nThe username and password from the AAI-Edu system are used to log in to the system. You can access this login mode by clicking on \"login here using AAI\".\nThen you need to enter the AAI username and password in the login fields and click \u201ePRIJAVA\u201c.\nNote: The username from the AAI-Edu system is in the form:\nyour_user_name@your_institution.hr \n\n\n1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.\n\nLectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
            "time": 214.3,
            "evaluation": {
                "bleu_score": 0.1163742926449671,
                "rouge_score": {
                    "precision": 0.31851851851851853,
                    "recall": 0.4843673746655582,
                    "f1": 0.38386120188115685
                },
                "diversity": 0.9497206703910615,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_16",
            "question": "Are there negative points on laboratory exercises?",
            "answer": "No, there are no negative points on laboratory exercises.",
            "source_documents": [
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.\n\n2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals. \nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.\n\nThe test is commenced by the option \u201eStart exam\u201c.\nTo practice working with the system at home, a demo test has been defined. This test is not graded and can be run an unlimited number of times. The password is not needed. The test is available under \u201cPublic exams\u201d. \n\nLinks at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.\n\n1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.\n\n2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals. \nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.\n\nThe test is commenced by the option \u201eStart exam\u201c.\nTo practice working with the system at home, a demo test has been defined. This test is not graded and can be run an unlimited number of times. The password is not needed. The test is available under \u201cPublic exams\u201d. \n\nLinks at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\nLectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
            "time": 139.56,
            "evaluation": {
                "bleu_score": 0.020596389662105096,
                "rouge_score": {
                    "precision": 0.6944444444444444,
                    "recall": 0.12962336338124758,
                    "f1": 0.2181182795698925
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "4",
                    "accuracy_and_relevance": "1",
                    "overall_quality_and_engagement": "1"
                }
            }
        },
        {
            "question_number": "q_17",
            "question": "What should i do with my code before running it in edgar?",
            "answer": "Before running your code in Edgar, you need to prepare and test it outside of Edgar first. This means writing the program (e.g., using Notepad++ or VSC), compiling it (by calling the gcc compiler), resolving any errors and warnings, and thoroughly testing it by executing against different test data. Only when you consider your solution to be entirely correct should you copy-paste the code into Edgar.",
            "source_documents": [
                {
                    "page_content": "With each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\nThe student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.\n\n\n2.1\tTests with program tasks \nImportant: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.\nIn tasks that require writing of a program, in the Edgar system, below the text of the task, there is a field to which the solution (program code) should be pasted. \nThe program code transferred to the Edgar system can be run in the following ways:\n\u2022\tby selecting the option \u201eRun\u201c\n\u2022\twhile the program code field is in focus (the mouse pointer is in the field), by a key combination Ctrl + Enter\n\nIf errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Only if the print statement is corrected to \nprintf(\"%d %d\\n%d\", a, b, a + b);\n\nthe program will return the correct result for all test cases.\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\n\n2.2\tCompletion of writing and submission of the test for assessment \nAfter completing all the tasks, the test should be submitted for the final assessment by selecting the \"Submit\" option in the upper right corner of the window. The submission is confirmed once again by selecting \"Yes, submit test!\", but can also be canceled by selecting \"No, continue writing\". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.\nThen it is necessary to wait for the completion of the evaluation.\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "If errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.\n\nIf the compilation of the program is successful, the program will be run on several pre-prepared test cases. If the printout of the program for a case does not correspond to the expected printout, a certain percentage, determined in advance for that case, is deducted from the total number of points provided for the task. This percentage can be 100% if it is a typical test case, for example if a program that determines whether a given number is within the required interval does not work well for numbers inside or outside the interval, or less than 100% if the test case examines program behavior at the boundaries of the interval. The total deducted percentage of points for a task cannot exceed 100%.\nThe process of writing tasks in the Edgar system will be illustrated by one of the tasks from the demo test, which reads:\nWrite a program that prints the message as in the examples that follow, reads integers a and b, prints them separated by a single space, and below that, prints their sum in a new line.\n\nExample 1:\nHello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7and\u00b7b\u00b7>\u00b715\u00b720\u21b5\n15\u00b720\u21b5\n35\n\nExample 2:\nHello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7and\u00b7b\u00b7>\u00b7-5\u00b720\u21b5\n-5\u00b720\u21b5\n15\n\nMark `\u21b5` in the examples indicates that a jump to new line (line feed) should be printed at that place or that the key Enter or Return should be pressed. Mark `\u00b7` indicates that a space should be printed at that place.\n\nTry to copy-paste the following program into the solution field:\n\n#include <stdio.h>\nint main(void) {\n   int a, b;\n   printf(\"Hello World! Now enter a and b > \");\n   scanf(\"%d %d\", &a, &b);\n   printf(\"%d  %d\", a, b);\n   return 0;\n}",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Try to copy-paste the following program into the solution field:\n\n#include <stdio.h>\nint main(void) {\n   int a, b;\n   printf(\"Hello World! Now enter a and b > \");\n   scanf(\"%d %d\", &a, &b);\n   printf(\"%d  %d\", a, b);\n   return 0;\n}\n\nThis program prints the message `Hello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7i\u00b7b\u00b7>\u00b7`, reads two integers and then prints them separated by two spaces. In addition, it does not print the sum.\nIf such a program is executed, Edgar will report that the result is incorrect for each of the four pre-prepared test cases.\n\nEach row of the table corresponds to one test case. \"Incorrect\" indicates that the printout of the program was not as expected for that test case. The percentage next to the test case indicates what percentage of the predefined number of points for that task is lost if the solution does not pass that test. In this particular case, for any of the test cases in the example above, all points for that task are lost. So, in order to achieve 100% points on a task, the solution must be correct for all test cases prepared for that task. \n\nNow try replacing the statement which prints the results with the following:\nprintf(\"%d %d %d\", a, b, a + b);\n\nThe result of running the program will be \nHello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7and\u00b7b\u00b7>\u00b715\u00b720\u21b5\n15\u00b720\u00b735\n\nThe program prints the correct values of the entered variables and correctly calculates and prints their sum, but this solution is also evaluated as incorrect in all cases, because there is no transition to a new line. One space more or less than required, or one jump to new line more or less than required, is enough for an almost correct solution to fail on all test cases.\n\nOnly if the print statement is corrected to \nprintf(\"%d %d\\n%d\", a, b, a + b);\n\nthe program will return the correct result for all test cases.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "With each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\nThe student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.\n\n\n2.1\tTests with program tasks \nImportant: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.\nIn tasks that require writing of a program, in the Edgar system, below the text of the task, there is a field to which the solution (program code) should be pasted. \nThe program code transferred to the Edgar system can be run in the following ways:\n\u2022\tby selecting the option \u201eRun\u201c\n\u2022\twhile the program code field is in focus (the mouse pointer is in the field), by a key combination Ctrl + Enter\n\nIf errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.\n\nOnly if the print statement is corrected to \nprintf(\"%d %d\\n%d\", a, b, a + b);\n\nthe program will return the correct result for all test cases.\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\n\n2.2\tCompletion of writing and submission of the test for assessment \nAfter completing all the tasks, the test should be submitted for the final assessment by selecting the \"Submit\" option in the upper right corner of the window. The submission is confirmed once again by selecting \"Yes, submit test!\", but can also be canceled by selecting \"No, continue writing\". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.\nThen it is necessary to wait for the completion of the evaluation.\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nIf errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.\n\nIf the compilation of the program is successful, the program will be run on several pre-prepared test cases. If the printout of the program for a case does not correspond to the expected printout, a certain percentage, determined in advance for that case, is deducted from the total number of points provided for the task. This percentage can be 100% if it is a typical test case, for example if a program that determines whether a given number is within the required interval does not work well for numbers inside or outside the interval, or less than 100% if the test case examines program behavior at the boundaries of the interval. The total deducted percentage of points for a task cannot exceed 100%.\nThe process of writing tasks in the Edgar system will be illustrated by one of the tasks from the demo test, which reads:\nWrite a program that prints the message as in the examples that follow, reads integers a and b, prints them separated by a single space, and below that, prints their sum in a new line.\n\nExample 1:\nHello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7and\u00b7b\u00b7>\u00b715\u00b720\u21b5\n15\u00b720\u21b5\n35\n\nExample 2:\nHello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7and\u00b7b\u00b7>\u00b7-5\u00b720\u21b5\n-5\u00b720\u21b5\n15\n\nMark `\u21b5` in the examples indicates that a jump to new line (line feed) should be printed at that place or that the key Enter or Return should be pressed. Mark `\u00b7` indicates that a space should be printed at that place.\n\nTry to copy-paste the following program into the solution field:\n\n#include <stdio.h>\nint main(void) {\n   int a, b;\n   printf(\"Hello World! Now enter a and b > \");\n   scanf(\"%d %d\", &a, &b);\n   printf(\"%d  %d\", a, b);\n   return 0;\n}\n\nTry to copy-paste the following program into the solution field:\n\n#include <stdio.h>\nint main(void) {\n   int a, b;\n   printf(\"Hello World! Now enter a and b > \");\n   scanf(\"%d %d\", &a, &b);\n   printf(\"%d  %d\", a, b);\n   return 0;\n}\n\nThis program prints the message `Hello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7i\u00b7b\u00b7>\u00b7`, reads two integers and then prints them separated by two spaces. In addition, it does not print the sum.\nIf such a program is executed, Edgar will report that the result is incorrect for each of the four pre-prepared test cases.\n\nEach row of the table corresponds to one test case. \"Incorrect\" indicates that the printout of the program was not as expected for that test case. The percentage next to the test case indicates what percentage of the predefined number of points for that task is lost if the solution does not pass that test. In this particular case, for any of the test cases in the example above, all points for that task are lost. So, in order to achieve 100% points on a task, the solution must be correct for all test cases prepared for that task. \n\nNow try replacing the statement which prints the results with the following:\nprintf(\"%d %d %d\", a, b, a + b);\n\nThe result of running the program will be \nHello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7and\u00b7b\u00b7>\u00b715\u00b720\u21b5\n15\u00b720\u00b735\n\nThe program prints the correct values of the entered variables and correctly calculates and prints their sum, but this solution is also evaluated as incorrect in all cases, because there is no transition to a new line. One space more or less than required, or one jump to new line more or less than required, is enough for an almost correct solution to fail on all test cases.\n\nOnly if the print statement is corrected to \nprintf(\"%d %d\\n%d\", a, b, a + b);\n\nthe program will return the correct result for all test cases.",
            "time": 217.8,
            "evaluation": {
                "bleu_score": 0.15684222973465758,
                "rouge_score": {
                    "precision": 0.4588235294117647,
                    "recall": 0.4756158358310115,
                    "f1": 0.46163032568693907
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "4"
                }
            }
        },
        {
            "question_number": "q_18",
            "question": "Where can I find the schedule of the laboratory exercises?",
            "answer": "The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams.",
            "source_documents": [
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.\nIt should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n        It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n    Browsing content on the Internet for additional explanations and examples",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.\n\n2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals. \nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.\n\nThe test is commenced by the option \u201eStart exam\u201c.\nTo practice working with the system at home, a demo test has been defined. This test is not graded and can be run an unlimited number of times. The password is not needed. The test is available under \u201cPublic exams\u201d. \n\nLinks at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "5.3\tOfficial reminder (cheat sheet)\nThe official reminder can be printed on the paper and used freely in lectures and any knowledge test: laboratory exercises, midterm exam, final exam and classical exams. Nothing may be added to the copies of official reminders that you will use in knowledge tests.\n    Official reminder for programming language C -\n        a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system\n\n5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\n2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.\nIt should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n        It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n    Browsing content on the Internet for additional explanations and examples\n\n1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.\n\n2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals. \nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.\n\nThe test is commenced by the option \u201eStart exam\u201c.\nTo practice working with the system at home, a demo test has been defined. This test is not graded and can be run an unlimited number of times. The password is not needed. The test is available under \u201cPublic exams\u201d. \n\nLinks at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\n5.3\tOfficial reminder (cheat sheet)\nThe official reminder can be printed on the paper and used freely in lectures and any knowledge test: laboratory exercises, midterm exam, final exam and classical exams. Nothing may be added to the copies of official reminders that you will use in knowledge tests.\n    Official reminder for programming language C -\n        a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system\n\n5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].",
            "time": 174.56,
            "evaluation": {
                "bleu_score": 0.36885988177840184,
                "rouge_score": {
                    "precision": 0.53125,
                    "recall": 0.44946341575512455,
                    "f1": 0.4857272594487058
                },
                "diversity": 0.9743589743589743,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "4"
                }
            }
        },
        {
            "question_number": "q_19",
            "question": "If I have 0 points from lab excercises, can I pass with a grade of 5?",
            "answer": "No, you cannot pass with a grade of 5 if you have 0 points from laboratory exercises. You need to achieve at least 14 (out of 35 possible) points on the final exam and total points >= 50.",
            "source_documents": [
                {
                    "page_content": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.\n\n2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals. \nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.\n\nThe test is commenced by the option \u201eStart exam\u201c.\nTo practice working with the system at home, a demo test has been defined. This test is not graded and can be run an unlimited number of times. The password is not needed. The test is available under \u201cPublic exams\u201d. \n\nLinks at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2\n\n2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam\n\n1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.\n\n2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals. \nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.\n\nThe test is commenced by the option \u201eStart exam\u201c.\nTo practice working with the system at home, a demo test has been defined. This test is not graded and can be run an unlimited number of times. The password is not needed. The test is available under \u201cPublic exams\u201d. \n\nLinks at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\n2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
            "time": 190.87,
            "evaluation": {
                "bleu_score": 0.5348224091353276,
                "rouge_score": {
                    "precision": 0.5540540540540541,
                    "recall": 0.47406197406197403,
                    "f1": 0.5081140589968038
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "3",
                    "overall_quality_and_engagement": "3"
                }
            }
        },
        {
            "question_number": "q_20",
            "question": "What are my options for consultations?",
            "answer": "Consultations will take place through the MS Teams platform, at times agreed with the teacher.",
            "source_documents": [
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "3.1\tView own tickets \nOpen and resolved tickets can be viewed the menu option My tickets. \nThis option is useful when the question asked by the student cannot be answered quickly (in time\nduration of the check) because it provides the possibility of subsequent review of the answers of the teaching staff. For example, there is a (fatal) mistake on the part of the teaching staff, and because of that, it is subsequent to all students answer recognized as correct.\nNote: It is not possible to ask questions on the ITP Demo test.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "c) \tStart \u00ae\u00a0type cmd in the search box, after which the window shown under b) will open \nd) \tsimultaneous pressing of the Windows and R keys (Win + R), after which the window shown under b) opens\nIn all versions of Windows, the command prompt window then opens:\n\n3 Execution of programs and commands\nStarting a command or program is done by typing its name, arguments (e.g. file name) and options (parameters that modify the operation of the command, and are listed after the / sign), and by pressing the Enter key. Uppercase and lowercase letters are not distinguished in file names, commands and options. So, it doesn't matter if HELP or help is entered, for example.\nThe command is entered after the prompt, which appears when the interface is ready to accept the command from the user. The prompt usually ends with a character >.\nThe following are examples of using individual commands in their basic form. A list of common commands can be obtained by typing the help command. To display additional information about each command, it is necessary to enter help command_name. \nThe running program can be interrupted by pressing the Ctrl and C (Ctrl+C) keys at the same time. \nProgram execution can be paused by pressing the key Pause or a key combination Ctrl+S. To resume running a program stopped in this way, press any key, for example Enter.\nThe exit command terminates the work with the character interface and closes the corresponding window.\nExample:\nhelp help\t(obtaining instructions on the operation of the program help)\n\nhelp tree\t(obtaining instructions on the operation of the tree program; in addition to a brief description of the command, a description of the allowed options is given: /F and /A, so it is possible, for example, to issue the command: tree /f)",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                }
            ],
            "combined_documents": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.\n\n3.1\tView own tickets \nOpen and resolved tickets can be viewed the menu option My tickets. \nThis option is useful when the question asked by the student cannot be answered quickly (in time\nduration of the check) because it provides the possibility of subsequent review of the answers of the teaching staff. For example, there is a (fatal) mistake on the part of the teaching staff, and because of that, it is subsequent to all students answer recognized as correct.\nNote: It is not possible to ask questions on the ITP Demo test.\n\nc) \tStart \u00ae\u00a0type cmd in the search box, after which the window shown under b) will open \nd) \tsimultaneous pressing of the Windows and R keys (Win + R), after which the window shown under b) opens\nIn all versions of Windows, the command prompt window then opens:\n\n3 Execution of programs and commands\nStarting a command or program is done by typing its name, arguments (e.g. file name) and options (parameters that modify the operation of the command, and are listed after the / sign), and by pressing the Enter key. Uppercase and lowercase letters are not distinguished in file names, commands and options. So, it doesn't matter if HELP or help is entered, for example.\nThe command is entered after the prompt, which appears when the interface is ready to accept the command from the user. The prompt usually ends with a character >.\nThe following are examples of using individual commands in their basic form. A list of common commands can be obtained by typing the help command. To display additional information about each command, it is necessary to enter help command_name. \nThe running program can be interrupted by pressing the Ctrl and C (Ctrl+C) keys at the same time. \nProgram execution can be paused by pressing the key Pause or a key combination Ctrl+S. To resume running a program stopped in this way, press any key, for example Enter.\nThe exit command terminates the work with the character interface and closes the corresponding window.\nExample:\nhelp help\t(obtaining instructions on the operation of the program help)\n\nhelp tree\t(obtaining instructions on the operation of the tree program; in addition to a brief description of the command, a description of the allowed options is given: /F and /A, so it is possible, for example, to issue the command: tree /f)",
            "time": 150.02,
            "evaluation": {
                "bleu_score": 0.10793924242286929,
                "rouge_score": {
                    "precision": 0.44999999999999996,
                    "recall": 0.23484917043740572,
                    "f1": 0.3075811625463194
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "4"
                }
            }
        },
        {
            "question_number": "q_21",
            "question": "What happens if I do not pass the course during the continuous monitoring of classes?",
            "answer": "If you do not pass the course during the continuous monitoring of classes, you can take one or more classical exams. The conditions for obtaining a passing grade based on the exam period are described in section 3.2.",
            "source_documents": [
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Only if the print statement is corrected to \nprintf(\"%d %d\\n%d\", a, b, a + b);\n\nthe program will return the correct result for all test cases.\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\n\n2.2\tCompletion of writing and submission of the test for assessment \nAfter completing all the tasks, the test should be submitted for the final assessment by selecting the \"Submit\" option in the upper right corner of the window. The submission is confirmed once again by selecting \"Yes, submit test!\", but can also be canceled by selecting \"No, continue writing\". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.\nThen it is necessary to wait for the completion of the evaluation.\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.\n\nLectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2\n\nOnly if the print statement is corrected to \nprintf(\"%d %d\\n%d\", a, b, a + b);\n\nthe program will return the correct result for all test cases.\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\n\n2.2\tCompletion of writing and submission of the test for assessment \nAfter completing all the tasks, the test should be submitted for the final assessment by selecting the \"Submit\" option in the upper right corner of the window. The submission is confirmed once again by selecting \"Yes, submit test!\", but can also be canceled by selecting \"No, continue writing\". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.\nThen it is necessary to wait for the completion of the evaluation.\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
            "time": 113.48,
            "evaluation": {
                "bleu_score": 0.30394778395171435,
                "rouge_score": {
                    "precision": 0.3333333333333333,
                    "recall": 0.34011499336576734,
                    "f1": 0.33616003479017176
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "3"
                }
            }
        },
        {
            "question_number": "q_22",
            "question": "What will happen if I do not submit the exam on time?",
            "answer": "If you do not submit the exam on time, you will receive a 0 (zero) grade for the exam.",
            "source_documents": [
                {
                    "page_content": "Only if the print statement is corrected to \nprintf(\"%d %d\\n%d\", a, b, a + b);\n\nthe program will return the correct result for all test cases.\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\n\n2.2\tCompletion of writing and submission of the test for assessment \nAfter completing all the tasks, the test should be submitted for the final assessment by selecting the \"Submit\" option in the upper right corner of the window. The submission is confirmed once again by selecting \"Yes, submit test!\", but can also be canceled by selecting \"No, continue writing\". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.\nThen it is necessary to wait for the completion of the evaluation.\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "5.3\tOfficial reminder (cheat sheet)\nThe official reminder can be printed on the paper and used freely in lectures and any knowledge test: laboratory exercises, midterm exam, final exam and classical exams. Nothing may be added to the copies of official reminders that you will use in knowledge tests.\n    Official reminder for programming language C -\n        a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system\n\n5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "Only if the print statement is corrected to \nprintf(\"%d %d\\n%d\", a, b, a + b);\n\nthe program will return the correct result for all test cases.\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\n\n2.2\tCompletion of writing and submission of the test for assessment \nAfter completing all the tasks, the test should be submitted for the final assessment by selecting the \"Submit\" option in the upper right corner of the window. The submission is confirmed once again by selecting \"Yes, submit test!\", but can also be canceled by selecting \"No, continue writing\". Also, the screen will show your solutions to individual tasks, which should be visually inspected before final submission.\nThen it is necessary to wait for the completion of the evaluation.\n\nAfter the evaluation, the summary results of the test will be displayed. Within 10 minutes of submission, the system provides an overview of the assessment of individual tasks. The overview of individual tasks is accessed by selecting the option \u201eReview\u201c.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.\n\n5.3\tOfficial reminder (cheat sheet)\nThe official reminder can be printed on the paper and used freely in lectures and any knowledge test: laboratory exercises, midterm exam, final exam and classical exams. Nothing may be added to the copies of official reminders that you will use in knowledge tests.\n    Official reminder for programming language C -\n        a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system\n\n5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].\n\n2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
            "time": 167.85,
            "evaluation": {
                "bleu_score": 7.906906991230994e-155,
                "rouge_score": {
                    "precision": 0.2631578947368421,
                    "recall": 0.17796052631578949,
                    "f1": 0.20089353819330935
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "2",
                    "overall_quality_and_engagement": "3"
                }
            }
        },
        {
            "question_number": "q_23",
            "question": "Who do I contact if I have questions during the exam?",
            "answer": "If you have any questions or problems while taking the test, you can use the Ticketing system in Edgar. This is a support system that allows students to ask questions related to specific tasks. The teaching staff will examine the problem as soon as possible and answer the student.",
            "source_documents": [
                {
                    "page_content": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "3.1\tView own tickets \nOpen and resolved tickets can be viewed the menu option My tickets. \nThis option is useful when the question asked by the student cannot be answered quickly (in time\nduration of the check) because it provides the possibility of subsequent review of the answers of the teaching staff. For example, there is a (fatal) mistake on the part of the teaching staff, and because of that, it is subsequent to all students answer recognized as correct.\nNote: It is not possible to ask questions on the ITP Demo test.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Introduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.\n\n2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam\n\n3.1\tView own tickets \nOpen and resolved tickets can be viewed the menu option My tickets. \nThis option is useful when the question asked by the student cannot be answered quickly (in time\nduration of the check) because it provides the possibility of subsequent review of the answers of the teaching staff. For example, there is a (fatal) mistake on the part of the teaching staff, and because of that, it is subsequent to all students answer recognized as correct.\nNote: It is not possible to ask questions on the ITP Demo test.\n\nIntroduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter",
            "time": 157.57,
            "evaluation": {
                "bleu_score": 3.4477565487368566e-78,
                "rouge_score": {
                    "precision": 0.2163265306122449,
                    "recall": 0.3898612395929695,
                    "f1": 0.2587719298245614
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_24",
            "question": "If I got 23 points on my laboratory exercises, 7 points on my lectures, 35 points on my midterm exam, and 23 points on my final exam, will I pass?",
            "answer": "Yes, you would have a total of 88 points (23 + 7 + 35 + 23). Since this is greater than or equal to 50, you would pass based on continuous assessment.",
            "source_documents": [
                {
                    "page_content": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "5.3\tOfficial reminder (cheat sheet)\nThe official reminder can be printed on the paper and used freely in lectures and any knowledge test: laboratory exercises, midterm exam, final exam and classical exams. Nothing may be added to the copies of official reminders that you will use in knowledge tests.\n    Official reminder for programming language C -\n        a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system\n\n5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2\n\n2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam\n\n2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\n5.3\tOfficial reminder (cheat sheet)\nThe official reminder can be printed on the paper and used freely in lectures and any knowledge test: laboratory exercises, midterm exam, final exam and classical exams. Nothing may be added to the copies of official reminders that you will use in knowledge tests.\n    Official reminder for programming language C -\n        a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system\n\n5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].",
            "time": 176.92,
            "evaluation": {
                "bleu_score": 5.474726447885893e-155,
                "rouge_score": {
                    "precision": 0.12413793103448276,
                    "recall": 0.4038095238095238,
                    "f1": 0.18142399605814238
                },
                "diversity": 0.967741935483871,
                "human_eval": {
                    "expression_and_logic": "2",
                    "accuracy_and_relevance": "2",
                    "overall_quality_and_engagement": "2"
                }
            }
        },
        {
            "question_number": "q_25",
            "question": "List me the recommended literature.",
            "answer": "V. Mornar: Introduction to programming, working version of the textbook\nK. N. King, C Programming: A Modern Approach, Second Edition, W. W. Norton & Company\nB. W. Kernighan, D. M. Ritchie: The C Programming Language, Second Edition, Englewood Cliffs, NJ: Prentice Hall",
            "source_documents": [
                {
                    "page_content": "5\tOther materials\n5.1\tRecommended reading\n    V. Mornar: Introduction to programming, working version of the textbook\n        The textbook covers the complete material of the subject, and even more than that. The textbook will be available on MS Teams as pdf. An integral part of the textbook is the folder Examples with about ninety programs that can be independently translated and run in the command line or in the development environment VSCode.\n    K. N. King, C Programming: A Modern Approach, Second Edition, W. W. Norton & Company\n        An extensive work (805 pages) that has been accepted as a textbook at hundreds of universities around the world.\n    B. W. Kernighan, D. M. Ritchie: The C Programming Language, Second Edition, Englewood Cliffs, NJ: Prentice Hall\n        A basic book whose authors are the creators of the C programming language from which many generations of programmers have learned the language.\n5.2\tInstructions\n    Instructions for compiling programs written in the programming language C\n        contain a detailed description of the software installation procedures and how to compile and execute the program. Based on these instructions, students must learn to use some of the simple editors (Notepad or Notepad ++) and compile programs using the operating system command line. In addition, students can use these instructions, if they wish, to install and learn the basics of using the integrated development environment VSCode, which greatly facilitates error detection because it has a simple interaction with a specialized program - a debugger.\n    Instructions for using the character interface in Windows\n        basics of using the operating system's character interface (command line). Based on these instructions, students are expected to independently learn several operating system commands listed there: basics of positioning in file system folders, creating, renaming files and folders, redirecting inputs and outputs.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Introduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.\nIt should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n        It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n    Browsing content on the Internet for additional explanations and examples",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "5\tOther materials\n5.1\tRecommended reading\n    V. Mornar: Introduction to programming, working version of the textbook\n        The textbook covers the complete material of the subject, and even more than that. The textbook will be available on MS Teams as pdf. An integral part of the textbook is the folder Examples with about ninety programs that can be independently translated and run in the command line or in the development environment VSCode.\n    K. N. King, C Programming: A Modern Approach, Second Edition, W. W. Norton & Company\n        An extensive work (805 pages) that has been accepted as a textbook at hundreds of universities around the world.\n    B. W. Kernighan, D. M. Ritchie: The C Programming Language, Second Edition, Englewood Cliffs, NJ: Prentice Hall\n        A basic book whose authors are the creators of the C programming language from which many generations of programmers have learned the language.\n5.2\tInstructions\n    Instructions for compiling programs written in the programming language C\n        contain a detailed description of the software installation procedures and how to compile and execute the program. Based on these instructions, students must learn to use some of the simple editors (Notepad or Notepad ++) and compile programs using the operating system command line. In addition, students can use these instructions, if they wish, to install and learn the basics of using the integrated development environment VSCode, which greatly facilitates error detection because it has a simple interaction with a specialized program - a debugger.\n    Instructions for using the character interface in Windows\n        basics of using the operating system's character interface (command line). Based on these instructions, students are expected to independently learn several operating system commands listed there: basics of positioning in file system folders, creating, renaming files and folders, redirecting inputs and outputs.\n\nIntroduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter\n\n2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.\nIt should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n        It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n    Browsing content on the Internet for additional explanations and examples\n\n2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
            "time": 198.18,
            "evaluation": {
                "bleu_score": 0.9225568718886635,
                "rouge_score": {
                    "precision": 0.6951219512195121,
                    "recall": 0.5873590601396911,
                    "f1": 0.5747659598466051
                },
                "diversity": 0.975609756097561,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "2",
                    "overall_quality_and_engagement": "2"
                }
            }
        },
        {
            "question_number": "q_26",
            "question": "If i have a question for the lecturers, what should my email consist of?",
            "answer": "Subject: [IPRO2023] Question regarding lecture material/consultation request\nBody: Please provide assistance with the following issue/request further information about the topic discussed in the lectures/ask for a consultation.",
            "source_documents": [
                {
                    "page_content": "5.3\tOfficial reminder (cheat sheet)\nThe official reminder can be printed on the paper and used freely in lectures and any knowledge test: laboratory exercises, midterm exam, final exam and classical exams. Nothing may be added to the copies of official reminders that you will use in knowledge tests.\n    Official reminder for programming language C -\n        a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system\n\n5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Introduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "5.3\tOfficial reminder (cheat sheet)\nThe official reminder can be printed on the paper and used freely in lectures and any knowledge test: laboratory exercises, midterm exam, final exam and classical exams. Nothing may be added to the copies of official reminders that you will use in knowledge tests.\n    Official reminder for programming language C -\n        a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system\n\n5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].\n\nIntroduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter\n\n2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
            "time": 171.09,
            "evaluation": {
                "bleu_score": 4.535506046608914e-155,
                "rouge_score": {
                    "precision": 0.09333333333333334,
                    "recall": 0.15028499910602539,
                    "f1": 0.09918982397705803
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "3",
                    "overall_quality_and_engagement": "3"
                }
            }
        },
        {
            "question_number": "q_27",
            "question": "What is the course official email address?",
            "answer": "The course official email address is vedran.mornar@fer.hr",
            "source_documents": [
                {
                    "page_content": "Introduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "With each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\nThe student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.\n\n\n2.1\tTests with program tasks \nImportant: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.\nIn tasks that require writing of a program, in the Edgar system, below the text of the task, there is a field to which the solution (program code) should be pasted. \nThe program code transferred to the Edgar system can be run in the following ways:\n\u2022\tby selecting the option \u201eRun\u201c\n\u2022\twhile the program code field is in focus (the mouse pointer is in the field), by a key combination Ctrl + Enter\n\nIf errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "5.3\tOfficial reminder (cheat sheet)\nThe official reminder can be printed on the paper and used freely in lectures and any knowledge test: laboratory exercises, midterm exam, final exam and classical exams. Nothing may be added to the copies of official reminders that you will use in knowledge tests.\n    Official reminder for programming language C -\n        a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system\n\n5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "Introduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter\n\nAfter the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\nThe student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.\n\n\n2.1\tTests with program tasks \nImportant: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.\nIn tasks that require writing of a program, in the Edgar system, below the text of the task, there is a field to which the solution (program code) should be pasted. \nThe program code transferred to the Edgar system can be run in the following ways:\n\u2022\tby selecting the option \u201eRun\u201c\n\u2022\twhile the program code field is in focus (the mouse pointer is in the field), by a key combination Ctrl + Enter\n\nIf errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.\n\n5.3\tOfficial reminder (cheat sheet)\nThe official reminder can be printed on the paper and used freely in lectures and any knowledge test: laboratory exercises, midterm exam, final exam and classical exams. Nothing may be added to the copies of official reminders that you will use in knowledge tests.\n    Official reminder for programming language C -\n        a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system\n\n5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].",
            "time": 162.16,
            "evaluation": {
                "bleu_score": 7.711523862191631e-155,
                "rouge_score": {
                    "precision": 0.225,
                    "recall": 0.17564745196324144,
                    "f1": 0.19035770739418068
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "1",
                    "overall_quality_and_engagement": "1"
                }
            }
        },
        {
            "question_number": "q_28",
            "question": "Give me a list of assistants who conduct laboratory exercises.",
            "answer": "Assistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr",
            "source_documents": [
                {
                    "page_content": "5.3\tOfficial reminder (cheat sheet)\nThe official reminder can be printed on the paper and used freely in lectures and any knowledge test: laboratory exercises, midterm exam, final exam and classical exams. Nothing may be added to the copies of official reminders that you will use in knowledge tests.\n    Official reminder for programming language C -\n        a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system\n\n5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.\n\n2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals. \nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.\n\nThe test is commenced by the option \u201eStart exam\u201c.\nTo practice working with the system at home, a demo test has been defined. This test is not graded and can be run an unlimited number of times. The password is not needed. The test is available under \u201cPublic exams\u201d. \n\nLinks at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "5.3\tOfficial reminder (cheat sheet)\nThe official reminder can be printed on the paper and used freely in lectures and any knowledge test: laboratory exercises, midterm exam, final exam and classical exams. Nothing may be added to the copies of official reminders that you will use in knowledge tests.\n    Official reminder for programming language C -\n        a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system\n\n5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].\n\n2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n    the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\nEach student works independently on the faculty computer, but under the supervision of the teachers on duty. The student has at his disposal the same tools that he uses to solve tasks on his own computer:\n    Notepad and Notepad++ editors, gcc compiler used via command line of the operating system\n    VSCode development environment\nIMPORTANT: regardless of which of the options the student chooses, knowledge of elementary program editing with the Notepad/Notepad++ editor, as well as compiling and running the program from the command line is mandatory!\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\n2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam\n\n1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.\n\n2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals. \nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.\n\nThe test is commenced by the option \u201eStart exam\u201c.\nTo practice working with the system at home, a demo test has been defined. This test is not graded and can be run an unlimited number of times. The password is not needed. The test is available under \u201cPublic exams\u201d. \n\nLinks at the top of the screen are used to navigate between tasks in the tests. In addition to the ordinal number of each task, the status of the task is shown in parentheses. Next to the ordinal number of the questions that have not yet been answered, a minus sign is displayed. If the answer to the question is a software solution that has already been written, it will be marked with </>.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).",
            "time": 179.04,
            "evaluation": {
                "bleu_score": 0,
                "rouge_score": {
                    "precision": 0.0,
                    "recall": 0.0,
                    "f1": 0.0
                },
                "diversity": 1.0,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "3",
                    "overall_quality_and_engagement": "3"
                }
            }
        },
        {
            "question_number": "q_29",
            "question": "What subjects can I enroll in when I finish the introduction to programming?",
            "answer": "After completing the Introduction to Programming, you can enroll in more advanced programming courses such as Data Structures and Algorithms, Object-Oriented Programming, or other specialized programming courses depending on your interests and career goals.",
            "source_documents": [
                {
                    "page_content": "Introduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "4\tWriting and compiling programs in an integrated development environment\nKnowledge of elementary editing of a program by notepad or a similar text editor, compiling programs from the command line, and running programs from the command line, is mandatory and will be tested during laboratory exercises.\nIntegrated Development Environments (IDEs) are used to make writing, compiling, and testing programs easier. In the Introduction to Programming course, we will use Visual Studio Code development environment, because it is an open source program, runs on multiple platforms (Windows, Linux, Mac), the installation package is relatively small compared to other similar environments, installation is fast and can be used for programming in any programming language, provided that a suitable compiler is installed on your computer, such as the MinGW package whose installation and use is described in the previous sections. The following assumes that MinGW is installed in accordance with the instructions in the previous sections.\nInstallation of the environment\nVisual Studio Code (VSC) is downloaded from the link\nhttps://code.visualstudio.com/download\nAfter selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.\nThe VSC desktop treats a single folder within the file system as a project. Therefore, the first action to take is to open the folder in which the program files are or will be located, such as the folder where we tested the compiler gcc (File -> Open Folder...).\nThe VSC toolbar consists of the following icons:\nExplorer (work with files in the currently open folder)\nSearch (search for content in the currently open folder and subfolders)\nSource control (working with GIT version control system)\nDebug (running a program and troubleshooting a program)\nExtensions (installing a VSC extension)",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "5\tOther materials\n5.1\tRecommended reading\n    V. Mornar: Introduction to programming, working version of the textbook\n        The textbook covers the complete material of the subject, and even more than that. The textbook will be available on MS Teams as pdf. An integral part of the textbook is the folder Examples with about ninety programs that can be independently translated and run in the command line or in the development environment VSCode.\n    K. N. King, C Programming: A Modern Approach, Second Edition, W. W. Norton & Company\n        An extensive work (805 pages) that has been accepted as a textbook at hundreds of universities around the world.\n    B. W. Kernighan, D. M. Ritchie: The C Programming Language, Second Edition, Englewood Cliffs, NJ: Prentice Hall\n        A basic book whose authors are the creators of the C programming language from which many generations of programmers have learned the language.\n5.2\tInstructions\n    Instructions for compiling programs written in the programming language C\n        contain a detailed description of the software installation procedures and how to compile and execute the program. Based on these instructions, students must learn to use some of the simple editors (Notepad or Notepad ++) and compile programs using the operating system command line. In addition, students can use these instructions, if they wish, to install and learn the basics of using the integrated development environment VSCode, which greatly facilitates error detection because it has a simple interaction with a specialized program - a debugger.\n    Instructions for using the character interface in Windows\n        basics of using the operating system's character interface (command line). Based on these instructions, students are expected to independently learn several operating system commands listed there: basics of positioning in file system folders, creating, renaming files and folders, redirecting inputs and outputs.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Instructions for performing laboratory exercises and tests via the Edgar system\n\n\n1\tEdgar system \nThe Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language. \nThe labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/\nNote: The layout of the graphical user interface elements on the current version of the system Edgar may differ in part from the appearance of the user interface shown in the illustrations later in this document. In case of any ambiguities and/or difficulties when using the system, contact the assistant on duty.\n\n\n1.1\tLogin to the system \nThe username and password from the AAI-Edu system are used to log in to the system. You can access this login mode by clicking on \"login here using AAI\".\nThen you need to enter the AAI username and password in the login fields and click \u201ePRIJAVA\u201c.\nNote: The username from the AAI-Edu system is in the form:\nyour_user_name@your_institution.hr \n\n\n1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "Introduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n    lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n    the content of the slides, since they are published in advance, don\u2019t need to be copied, but it is advised to take your own notes during lectures\n    actively participate in lectures: solve tasks assigned during lectures, ask teacher for additional clarifications\n    just following lectures and/or reading presentations will certainly not be enough to pass the exam, so pay close attention to the content of the Independent work chapter\n\n4\tWriting and compiling programs in an integrated development environment\nKnowledge of elementary editing of a program by notepad or a similar text editor, compiling programs from the command line, and running programs from the command line, is mandatory and will be tested during laboratory exercises.\nIntegrated Development Environments (IDEs) are used to make writing, compiling, and testing programs easier. In the Introduction to Programming course, we will use Visual Studio Code development environment, because it is an open source program, runs on multiple platforms (Windows, Linux, Mac), the installation package is relatively small compared to other similar environments, installation is fast and can be used for programming in any programming language, provided that a suitable compiler is installed on your computer, such as the MinGW package whose installation and use is described in the previous sections. The following assumes that MinGW is installed in accordance with the instructions in the previous sections.\nInstallation of the environment\nVisual Studio Code (VSC) is downloaded from the link\nhttps://code.visualstudio.com/download\nAfter selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.\nThe VSC desktop treats a single folder within the file system as a project. Therefore, the first action to take is to open the folder in which the program files are or will be located, such as the folder where we tested the compiler gcc (File -> Open Folder...).\nThe VSC toolbar consists of the following icons:\nExplorer (work with files in the currently open folder)\nSearch (search for content in the currently open folder and subfolders)\nSource control (working with GIT version control system)\nDebug (running a program and troubleshooting a program)\nExtensions (installing a VSC extension)\n\n5\tOther materials\n5.1\tRecommended reading\n    V. Mornar: Introduction to programming, working version of the textbook\n        The textbook covers the complete material of the subject, and even more than that. The textbook will be available on MS Teams as pdf. An integral part of the textbook is the folder Examples with about ninety programs that can be independently translated and run in the command line or in the development environment VSCode.\n    K. N. King, C Programming: A Modern Approach, Second Edition, W. W. Norton & Company\n        An extensive work (805 pages) that has been accepted as a textbook at hundreds of universities around the world.\n    B. W. Kernighan, D. M. Ritchie: The C Programming Language, Second Edition, Englewood Cliffs, NJ: Prentice Hall\n        A basic book whose authors are the creators of the C programming language from which many generations of programmers have learned the language.\n5.2\tInstructions\n    Instructions for compiling programs written in the programming language C\n        contain a detailed description of the software installation procedures and how to compile and execute the program. Based on these instructions, students must learn to use some of the simple editors (Notepad or Notepad ++) and compile programs using the operating system command line. In addition, students can use these instructions, if they wish, to install and learn the basics of using the integrated development environment VSCode, which greatly facilitates error detection because it has a simple interaction with a specialized program - a debugger.\n    Instructions for using the character interface in Windows\n        basics of using the operating system's character interface (command line). Based on these instructions, students are expected to independently learn several operating system commands listed there: basics of positioning in file system folders, creating, renaming files and folders, redirecting inputs and outputs.\n\nInstructions for performing laboratory exercises and tests via the Edgar system\n\n\n1\tEdgar system \nThe Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language. \nThe labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/\nNote: The layout of the graphical user interface elements on the current version of the system Edgar may differ in part from the appearance of the user interface shown in the illustrations later in this document. In case of any ambiguities and/or difficulties when using the system, contact the assistant on duty.\n\n\n1.1\tLogin to the system \nThe username and password from the AAI-Edu system are used to log in to the system. You can access this login mode by clicking on \"login here using AAI\".\nThen you need to enter the AAI username and password in the login fields and click \u201ePRIJAVA\u201c.\nNote: The username from the AAI-Edu system is in the form:\nyour_user_name@your_institution.hr \n\n\n1.2\tUsing Edgar for Introduction to Programming \nIn order to get access to the tasks and tests in the course Introduction to Programming for the current academic year in Edgar, it is necessary to select the appropriate course and academic year from the drop-down menus on the right side of the main menu.",
            "time": 186.18,
            "evaluation": {
                "bleu_score": 7.544641259221007e-232,
                "rouge_score": {
                    "precision": 0.02857142857142857,
                    "recall": 0.09587912087912087,
                    "f1": 0.04332129726710496
                },
                "diversity": 0.9696969696969697,
                "human_eval": {
                    "expression_and_logic": "5",
                    "accuracy_and_relevance": "5",
                    "overall_quality_and_engagement": "5"
                }
            }
        },
        {
            "question_number": "q_30",
            "question": "How to get a grade of 6?",
            "answer": "A student must achieve at least 14 points on the final exam during continuous assessment and have a total score of at least 50 points, but not more than 59.9 points.",
            "source_documents": [
                {
                    "page_content": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "With each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\nThe student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.\n\n\n2.1\tTests with program tasks \nImportant: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.\nIn tasks that require writing of a program, in the Edgar system, below the text of the task, there is a field to which the solution (program code) should be pasted. \nThe program code transferred to the Edgar system can be run in the following ways:\n\u2022\tby selecting the option \u201eRun\u201c\n\u2022\twhile the program code field is in focus (the mouse pointer is in the field), by a key combination Ctrl + Enter\n\nIf errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "After the 10-minute period from the submission of the test, the review will be disabled, but the summary status of the test will still be displayed.\n\nAn overview of the summary results of all tests performed so far can be obtained at any time by selecting the option \u201eMy previous exams\u201c.\n\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\t2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\nThe student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.\n\n\n2.1\tTests with program tasks \nImportant: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.\nIn tasks that require writing of a program, in the Edgar system, below the text of the task, there is a field to which the solution (program code) should be pasted. \nThe program code transferred to the Edgar system can be run in the following ways:\n\u2022\tby selecting the option \u201eRun\u201c\n\u2022\twhile the program code field is in focus (the mouse pointer is in the field), by a key combination Ctrl + Enter\n\nIf errors or warnings occur during the compilation of the source code, the error/warning reported by the gcc compiler is shown.\n\n2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n    consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n    classical exams are similar to the midterm exam and the final exam, but, as a rule, are more extensive\n\n\n3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam\n\nLectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
            "time": 180.83,
            "evaluation": {
                "bleu_score": 1.2083860769943533e-231,
                "rouge_score": {
                    "precision": 0.0625,
                    "recall": 0.23888888888888887,
                    "f1": 0.09843622359668572
                },
                "diversity": 0.9666666666666667,
                "human_eval": {
                    "expression_and_logic": "1",
                    "accuracy_and_relevance": "1",
                    "overall_quality_and_engagement": "1"
                }
            }
        }
    ]
}