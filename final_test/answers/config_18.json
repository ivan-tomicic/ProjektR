{
    "config": {
        "retriever_type": "rerank",
        "embeddings_func": "embeddings_2",
        "vectorstore_func": "vectorstore_1",
        "rerank_func": "rerank_1",
        "chunk_size": 500,
        "chunk_overlap": 50,
        "number_of_retrievals": 10,
        "top_number_of_retrievals": 4
    },
    "answers": [
        {
            "question_number": "q_1",
            "question": "What does a compiler do? What does a linker do?",
            "answer": "A compiler translates source code into object code. A linker merges object code files with pre-programmed libraries to create an executable file that can be run directly from the operating system.",
            "source_documents": [
                {
                    "page_content": "b)\tLinking to the executable code is done by a program called the linker. This program merges all the required object code files with the pre-programmed libraries and creates executable code that can be run directly from the operating system.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "a)\tThe translation into object code is done by a program called the compiler. The compiler translates the source file and creates the object code file (usually with the extension .o) that cannot yet be run because it does not yet have links to functions and variables from other object code files and libraries where standard functions (input / output, mathematical functions, etc.) have been prepared.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "This simplest gcc compiler call integrates compiler and linker functions. The program.c file is compiled. Because of the -o (output) option, it creates an executable file named program.exe which can then be executed with the command\nprogram.exe\nor\nprogram\nIf an error occurred while calling the compiler or starting the program, you should look for the solution in the next section.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "Any text editor already installed on the computer can be used to prepare the source code (write the program). The editor must not create additional hidden formatting tags, such as done by Word. An example of such a program is the basic Notepad editor or the slightly improved Notepad++. The compiler and linker are often not part of the operating system and need to be installed. For the purpose of Introduction to programming, ww will install MinGW packages in 32-bit version",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "b)\tLinking to the executable code is done by a program called the linker. This program merges all the required object code files with the pre-programmed libraries and creates executable code that can be run directly from the operating system.\n\na)\tThe translation into object code is done by a program called the compiler. The compiler translates the source file and creates the object code file (usually with the extension .o) that cannot yet be run because it does not yet have links to functions and variables from other object code files and libraries where standard functions (input / output, mathematical functions, etc.) have been prepared.\n\nThis simplest gcc compiler call integrates compiler and linker functions. The program.c file is compiled. Because of the -o (output) option, it creates an executable file named program.exe which can then be executed with the command\nprogram.exe\nor\nprogram\nIf an error occurred while calling the compiler or starting the program, you should look for the solution in the next section.\n\nAny text editor already installed on the computer can be used to prepare the source code (write the program). The editor must not create additional hidden formatting tags, such as done by Word. An example of such a program is the basic Notepad editor or the slightly improved Notepad++. The compiler and linker are often not part of the operating system and need to be installed. For the purpose of Introduction to programming, ww will install MinGW packages in 32-bit version",
            "time": 47.37,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_2",
            "question": "How do I install the MinGW package?",
            "answer": "To install the MinGW package, download the installer mingw-get-setup.exe from http://sourceforge.net/projects/mingw/files/latest/download?source=files. Then execute it, press Install on the first form, Continue on the next one, and then Continue again to start MinGW Installation Manager. Alternatively, you can follow these steps:\n1. Create a folder for MinGW files (e.g., C:\\MinGW)\n2. Download the archive MinGW.zip and extract it into the folder\n3. Set the system variable Path according to instructions\n4. Add the path to the folder where the MinGW package is installed (normally C:\\MinGW\\bin) to the list of folders where executable programs are searched",
            "source_documents": [
                {
                    "page_content": "2\tInstalling MinGW\nThe installer mingw-get-setup.exe will be downloaded automatically from the page http://sourceforge.net/projects/mingw/files/latest/download?source=files.\nThe downloaded program must be executed. On the first form shown, press the Install button. On the next form, press Continue. It will initiate download of MinGW Installation Manager. When downloaded, press Continue to start MinGW Installation Manager.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "An alternative way of installation\nStudents who have problems installing the latest version of MinGW on their Windows computer can try this alternative method:\n1.\tCreate a folder on your computer to place MinGW files (e.g. C:\\MinGW)\n2.\tDownload the archive MinGW.zip from the file repository and extract it into the folder created above\n3.\tSet the system variable Path according to the instructions above",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "A window will open with all the folders where the operating system looks for executable programs, where you need to click New.\nIn the newly created blank field at the bottom of the list, enter the path to the folder where the MinGW package is installed to (normally C:\\MinGW\\bin), and press OK.\nIn older versions of Windows, a window will open. There, in the Variable value field, the text: \";C:\\MinGW\\bin\\\" should be appended to existing text.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "In left column, select Basic Setup. In next column, select (Mark for Installation) item mingw32-base. Next, from the menu, select Installation -> Apply Changes and in the newly opened window, press the button Apply.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "2\tInstalling MinGW\nThe installer mingw-get-setup.exe will be downloaded automatically from the page http://sourceforge.net/projects/mingw/files/latest/download?source=files.\nThe downloaded program must be executed. On the first form shown, press the Install button. On the next form, press Continue. It will initiate download of MinGW Installation Manager. When downloaded, press Continue to start MinGW Installation Manager.\n\nAn alternative way of installation\nStudents who have problems installing the latest version of MinGW on their Windows computer can try this alternative method:\n1.\tCreate a folder on your computer to place MinGW files (e.g. C:\\MinGW)\n2.\tDownload the archive MinGW.zip from the file repository and extract it into the folder created above\n3.\tSet the system variable Path according to the instructions above\n\nA window will open with all the folders where the operating system looks for executable programs, where you need to click New.\nIn the newly created blank field at the bottom of the list, enter the path to the folder where the MinGW package is installed to (normally C:\\MinGW\\bin), and press OK.\nIn older versions of Windows, a window will open. There, in the Variable value field, the text: \";C:\\MinGW\\bin\\\" should be appended to existing text.\n\nIn left column, select Basic Setup. In next column, select (Mark for Installation) item mingw32-base. Next, from the menu, select Installation -> Apply Changes and in the newly opened window, press the button Apply.",
            "time": 67.65,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_3",
            "question": "What are all the ways I can set the System variable Path?",
            "answer": "You can set the system variable Path through a graphical interface in Control Panel or by using a command window with the setx command.",
            "source_documents": [
                {
                    "page_content": "Setting the system variable Path through a graphical interface\nThe system variable Path can be set in Control Panel:\nControl Panel -> System and Security -> System\nYou need to click the link Advanced system settings in in the left menu.\nIn the newly opened window, select the tab Advanced in top menu and then press the button Environment Variables.\nAfter that, choose Path from the list System variables and click Edit.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "2.1.1\tSetting the system variable Path in the command window\nThe system variable Path is easily set in a command window by a command\nsetx Path \"%Path%;C:\\MinGW\\Bin\"\nThe setx command written in this way sets the new value of the variable Path by adding text  ;C:\\MinGW\\Bin to it's old value.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "After the installation is completed, the system variable Path must be set by adding a path to the folder bin of the MinGW package. This system variable contains a list of folders where the operating system looks for executable programs that the user attempts to run by specifying their name.\nIf MinGW is installed with the default settings, the path to the folder bin will be C:\\MinGW\\bin.\nThis can be done in several ways, but the simplest way to do it is in the command prompt.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "The absolute path starts with the disk label and the base folder, after which all folders are listed up to the folder where the file is located. For example, if the file list.txt is in a folder \\users\\ana on disk C, the absolute path to it is C:\\users\\ana\\list.txt. \nRelative path depends on the working folder. You can also use special tags when specifying the relative path to the file:\n.\tindicates the working folder \n..\tindicates a folder superior to the working folder",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                }
            ],
            "combined_documents": "Setting the system variable Path through a graphical interface\nThe system variable Path can be set in Control Panel:\nControl Panel -> System and Security -> System\nYou need to click the link Advanced system settings in in the left menu.\nIn the newly opened window, select the tab Advanced in top menu and then press the button Environment Variables.\nAfter that, choose Path from the list System variables and click Edit.\n\n2.1.1\tSetting the system variable Path in the command window\nThe system variable Path is easily set in a command window by a command\nsetx Path \"%Path%;C:\\MinGW\\Bin\"\nThe setx command written in this way sets the new value of the variable Path by adding text  ;C:\\MinGW\\Bin to it's old value.\n\nAfter the installation is completed, the system variable Path must be set by adding a path to the folder bin of the MinGW package. This system variable contains a list of folders where the operating system looks for executable programs that the user attempts to run by specifying their name.\nIf MinGW is installed with the default settings, the path to the folder bin will be C:\\MinGW\\bin.\nThis can be done in several ways, but the simplest way to do it is in the command prompt.\n\nThe absolute path starts with the disk label and the base folder, after which all folders are listed up to the folder where the file is located. For example, if the file list.txt is in a folder \\users\\ana on disk C, the absolute path to it is C:\\users\\ana\\list.txt. \nRelative path depends on the working folder. You can also use special tags when specifying the relative path to the file:\n.\tindicates the working folder \n..\tindicates a folder superior to the working folder",
            "time": 53.33,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_4",
            "question": "How do I translate and execute a simple program using shell commands?",
            "answer": "To translate and execute a simple program using shell commands, follow these steps:\n1. Create a folder where the program file will be stored, e.g., mkdir C:\\IPRO.\n2. Make it the current directory, e.g., cd C:\\IPRO.\n3. Edit the program with a text editor, e.g., notepad program.c.\n4. Enter the following code in the file: #include <stdio.h>\n5. Save and close the file.\n6. Compile the program using the command: gcc -std=c11 -pedantic-errors -Wall program.c -o program.exe\n7. Execute the compiled program by typing its name, e.g., program.exe.",
            "source_documents": [
                {
                    "page_content": "The command that translates the program with the options listed above looks like this:\n\ngcc -std=c11 -pedantic-errors -Wall program.c -o program.exe",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "The program, written in symbolic language and stored in a file with the extension .c, needs to be converted to commands understandable to the processor, or executable machine code (in Windows operating system, files with the extension .exe, in Unix / Linux operating systems, the format of the extension is not prescribed). The conversion process is carried out in two steps (the concept of preprocessing and assembly code creation will be omitted here because it is indivisible as part of",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "3   Writing programs with a simple editor, compiling and executing programs\nThe whole process of writing and compiling programs will be illustrated in the command prompt, where you first need to create a folder where the program file will be stored, and then make it current e.g.\nmkdir C:\\IPRO\ncd C:\\IPRO\nand start editing program there with a text editor:\nnotepad program.c\n\nThe following code should be entered in this file:\n#include <stdio.h>",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "3 Execution of programs and commands\nStarting a command or program is done by typing its name, arguments (e.g. file name) and options (parameters that modify the operation of the command, and are listed after the / sign), and by pressing the Enter key. Uppercase and lowercase letters are not distinguished in file names, commands and options. So, it doesn't matter if HELP or help is entered, for example.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCommandPrompt.txt"
                }
            ],
            "combined_documents": "The command that translates the program with the options listed above looks like this:\n\ngcc -std=c11 -pedantic-errors -Wall program.c -o program.exe\n\nThe program, written in symbolic language and stored in a file with the extension .c, needs to be converted to commands understandable to the processor, or executable machine code (in Windows operating system, files with the extension .exe, in Unix / Linux operating systems, the format of the extension is not prescribed). The conversion process is carried out in two steps (the concept of preprocessing and assembly code creation will be omitted here because it is indivisible as part of\n\n3   Writing programs with a simple editor, compiling and executing programs\nThe whole process of writing and compiling programs will be illustrated in the command prompt, where you first need to create a folder where the program file will be stored, and then make it current e.g.\nmkdir C:\\IPRO\ncd C:\\IPRO\nand start editing program there with a text editor:\nnotepad program.c\n\nThe following code should be entered in this file:\n#include <stdio.h>\n\n3 Execution of programs and commands\nStarting a command or program is done by typing its name, arguments (e.g. file name) and options (parameters that modify the operation of the command, and are listed after the / sign), and by pressing the Enter key. Uppercase and lowercase letters are not distinguished in file names, commands and options. So, it doesn't matter if HELP or help is entered, for example.",
            "time": 65.42,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_5",
            "question": "Explain me how to setup Visual Studio Code for Linux operating system.",
            "answer": "To set up VSC on a Linux operating system, follow these steps:\n1. Download the installer from https://code.visualstudio.com/download.\n2. Select the appropriate platform (Linux) and download the installer.\n3. Run the installer and complete the installation process.\n4. Launch VSC after successful installation.\n5. Install the C/C++ extension by searching for \"C/C++\" in the extension search box, selecting the Microsoft extension, and restarting VSC with a button Reload.\n6. Create a .vscode subfolder and two JSON files (tasks.json and launch.json) to configure the environment for simple programs.",
            "source_documents": [
                {
                    "page_content": "Installation of the environment\nVisual Studio Code (VSC) is downloaded from the link\nhttps://code.visualstudio.com/download\nAfter selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "contain a detailed description of the software installation procedures and how to compile and execute the program. Based on these instructions, students must learn to use some of the simple editors (Notepad or Notepad ++) and compile programs using the operating system command line. In addition, students can use these instructions, if they wish, to install and learn the basics of using the integrated development environment VSCode, which greatly facilitates error detection because it",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "First, you need to install an extension that allows you to run programs in the C or C ++ programming language. In the extension search box, type C / C ++ and then select the Microsoft extension.\nAfter downloading, it is necessary to restart the VSC by pressing a button Reload.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "Configure the environment for simple programs\nUnfortunately, VSC is not yet configured to compile C programs. Configuration can be done through menus, but the simplest way is to create a .vscode subfolder (note that the name begins with a dot) and in this colder, create two files written in Java Script Object Notation, JSON:\ntasks.json\tdescribes the tasks to be performed as part of the program compilation\nlaunch.json\tdescribes how to run the executable program",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "Installation of the environment\nVisual Studio Code (VSC) is downloaded from the link\nhttps://code.visualstudio.com/download\nAfter selecting the platform, downloading and running the installer and successfully completing the installation, VSC is ready to launch.\n\ncontain a detailed description of the software installation procedures and how to compile and execute the program. Based on these instructions, students must learn to use some of the simple editors (Notepad or Notepad ++) and compile programs using the operating system command line. In addition, students can use these instructions, if they wish, to install and learn the basics of using the integrated development environment VSCode, which greatly facilitates error detection because it\n\nFirst, you need to install an extension that allows you to run programs in the C or C ++ programming language. In the extension search box, type C / C ++ and then select the Microsoft extension.\nAfter downloading, it is necessary to restart the VSC by pressing a button Reload.\n\nConfigure the environment for simple programs\nUnfortunately, VSC is not yet configured to compile C programs. Configuration can be done through menus, but the simplest way is to create a .vscode subfolder (note that the name begins with a dot) and in this colder, create two files written in Java Script Object Notation, JSON:\ntasks.json\tdescribes the tasks to be performed as part of the program compilation\nlaunch.json\tdescribes how to run the executable program",
            "time": 60.25,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_6",
            "question": "Give me the basics of using a debugger in Visual Studio Code.",
            "answer": "To use a debugger in Visual Studio Code, follow these basic steps:\n1. Place a breakpoint at the desired location in your code by clicking on the left margin or pressing F9.\n2. Open the Debug panel (View > Debug).\n3. Choose a configuration for your debugging session from the dropdown menu in the Debug toolbar.\n4. Click the \"Start Debugger\" button or press F5 to begin debugging.\n5. Use the debugger's toolbar icons (Continue, Step Over, and Step Into) to control program execution.\n6. Explore variables and watch expressions using the Debug panel.",
            "source_documents": [
                {
                    "page_content": "The basics of working with a debugger\nProgram behavior is easily monitored using debugger. To demonstrate how such a program works, we will replace the content of program.c with\n#include<stdio.h>",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "This action will print the text Introduction to Programming in a new window, which will then close immediately. To prevent the window from closing immediately, a breakpoint should be placed on the last line of the program by clicking the mouse at the very beginning of the line containing the return command.\nIf a new folder is created for another program or programs, .vscode folder should be copied there and all the preparatory actions are done.\nThe basics of working with a debugger",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "Debugger\u2019s toolbar responds with a popup window that lets you see the meaning of each icon together with the keyboard shortcut which triggers the corresponding action and contains the following commands (action names and corresponding shortcuts are listed in parentheses):\nContinue running to the end or next breakpoint (Continue, F5)\nExecute the following statement without entering the function code (Step over, F10)\nExecute the following statement entering the function code (Step into, F11)",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "In the above configuration(\"miDebuggerPath\") it is understood that system variable Path contains the folder in which debugger gdb.exe is installed. If this is not the case, the correct absolute path to the file gdb.exe must be entered.\nNow all we have to do is open our source program file (because the configuration specifies that the program currently open in the editor is compiled) select Debug and start the program by pressing Start debugger or simply by pressing the key F5 on the keyboard.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "The basics of working with a debugger\nProgram behavior is easily monitored using debugger. To demonstrate how such a program works, we will replace the content of program.c with\n#include<stdio.h>\n\nThis action will print the text Introduction to Programming in a new window, which will then close immediately. To prevent the window from closing immediately, a breakpoint should be placed on the last line of the program by clicking the mouse at the very beginning of the line containing the return command.\nIf a new folder is created for another program or programs, .vscode folder should be copied there and all the preparatory actions are done.\nThe basics of working with a debugger\n\nDebugger\u2019s toolbar responds with a popup window that lets you see the meaning of each icon together with the keyboard shortcut which triggers the corresponding action and contains the following commands (action names and corresponding shortcuts are listed in parentheses):\nContinue running to the end or next breakpoint (Continue, F5)\nExecute the following statement without entering the function code (Step over, F10)\nExecute the following statement entering the function code (Step into, F11)\n\nIn the above configuration(\"miDebuggerPath\") it is understood that system variable Path contains the folder in which debugger gdb.exe is installed. If this is not the case, the correct absolute path to the file gdb.exe must be entered.\nNow all we have to do is open our source program file (because the configuration specifies that the program currently open in the editor is compiled) select Debug and start the program by pressing Start debugger or simply by pressing the key F5 on the keyboard.",
            "time": 63.59,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_7",
            "question": "How can I create a universal Makefile?",
            "answer": "A universal Makefile is not possible, as it depends on the specific project structure and dependencies of each individual program. However, you can create a generic Makefile that can be adapted to different projects by defining rules for common tasks like compiling source files and linking object files into an executable. This generic Makefile can then be customized for each specific project by adding or modifying the rules as needed.",
            "source_documents": [
                {
                    "page_content": "Files are created by selecting the folder within which the files should be created, selecting the appropriate icon and typing in the name of the new file.\nThe following code should be copied to the window on the right in the tasks.json file:\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n        \"label\": \"Build with gcc\",\n        \"type\": \"shell\",\n        \"command\": \"gcc\",\n        \"args\": [\"-g\", \"-std=c11\", \"-pedantic-errors\",\n            \"-Wall\", \"-o\", \"program.exe\", \"${file}\"\n        ]\n    }]\n}",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "With the existence of the file .clang-format, the program will be formatted optimally when saved, in terms of the number of program lines consumed and its readability:\n#include <stdio.h>\nint main(void) {\n   if (1) {\n      printf(\"1\");\n   } else {\n      printf(\"2\");\n   }\n}\nIt is also possible to enter the BasedOnStyle setting in this file to determine the formatting style. Allowed values are LLVM (this is also the default value), Google, Chromium, Mozilla and WebKit.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "In the previous examples, only the basic functionality of the program make was shown. With knowledge of more advanced functionalities, the details of which we will not dwell into here, it is possible to write Makefile which can be used to compile programs of any complexity, without explicitly specifying individual components and their dependencies. Very superficially explained, all the files with the extension .c are source files for the program, and all the files with the extension .o are",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "If, for example, a program consists of two modules, p1.c i p2.c where the first includes h1.h i h2.h, and the second includes h3.h, this will be defined in the following Makefile:\nprogram.exe: p1.o p2.o\n\tgcc -o program.exe program.o\np1.o: p1.c h1.h h2.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p1.c\np2.o: p2.c h3.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p2.c",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                }
            ],
            "combined_documents": "Files are created by selecting the folder within which the files should be created, selecting the appropriate icon and typing in the name of the new file.\nThe following code should be copied to the window on the right in the tasks.json file:\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [{\n        \"label\": \"Build with gcc\",\n        \"type\": \"shell\",\n        \"command\": \"gcc\",\n        \"args\": [\"-g\", \"-std=c11\", \"-pedantic-errors\",\n            \"-Wall\", \"-o\", \"program.exe\", \"${file}\"\n        ]\n    }]\n}\n\nWith the existence of the file .clang-format, the program will be formatted optimally when saved, in terms of the number of program lines consumed and its readability:\n#include <stdio.h>\nint main(void) {\n   if (1) {\n      printf(\"1\");\n   } else {\n      printf(\"2\");\n   }\n}\nIt is also possible to enter the BasedOnStyle setting in this file to determine the formatting style. Allowed values are LLVM (this is also the default value), Google, Chromium, Mozilla and WebKit.\n\nIn the previous examples, only the basic functionality of the program make was shown. With knowledge of more advanced functionalities, the details of which we will not dwell into here, it is possible to write Makefile which can be used to compile programs of any complexity, without explicitly specifying individual components and their dependencies. Very superficially explained, all the files with the extension .c are source files for the program, and all the files with the extension .o are\n\nIf, for example, a program consists of two modules, p1.c i p2.c where the first includes h1.h i h2.h, and the second includes h3.h, this will be defined in the following Makefile:\nprogram.exe: p1.o p2.o\n\tgcc -o program.exe program.o\np1.o: p1.c h1.h h2.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p1.c\np2.o: p2.c h3.h\n\tgcc -c -g -std=c11 -pedantic-errors -Wall p2.c",
            "time": 72.25,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_8",
            "question": "What do I use to log in into Edgar?",
            "answer": "To log in to Edgar, you need a username and password provided by your instructor or the course administrator.",
            "source_documents": [
                {
                    "page_content": "The labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Note: The layout of the graphical user interface elements on the current version of the system Edgar may differ in part from the appearance of the user interface shown in the illustrations later in this document. In case of any ambiguities and/or difficulties when using the system, contact the assistant on duty.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "1\tEdgar system \nThe Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Important: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "The labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/\n\nNote: The layout of the graphical user interface elements on the current version of the system Edgar may differ in part from the appearance of the user interface shown in the illustrations later in this document. In case of any ambiguities and/or difficulties when using the system, contact the assistant on duty.\n\n1\tEdgar system \nThe Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language.\n\nImportant: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.",
            "time": 39.5,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_9",
            "question": "How does the support system in Edgar work?",
            "answer": "The support system in Edgar is called Ticketing system. It allows students to ask questions related to specific tasks while writing tests. To use the system, click on the \"yellow tools\" icon in the upper right corner of the question page.",
            "source_documents": [
                {
                    "page_content": "3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "1\tEdgar system \nThe Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "The labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "In the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\n1\tEdgar system \nThe Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language.\n\nThe labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.",
            "time": 48.8,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_10",
            "question": "Is asking for solutions with the ticketing system ok?",
            "answer": "No, asking for solutions is not allowed in the Ticketing system. The purpose of this system is to clarify doubts or ask questions related to a specific task, not to request the solution directly.",
            "source_documents": [
                {
                    "page_content": "3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "After the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "3.1\tView own tickets \nOpen and resolved tickets can be viewed the menu option My tickets. \nThis option is useful when the question asked by the student cannot be answered quickly (in time\nduration of the check) because it provides the possibility of subsequent review of the answers of the teaching staff. For example, there is a (fatal) mistake on the part of the teaching staff, and because of that, it is subsequent to all students answer recognized as correct.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\nAfter the the problem has been addresses, a message saying \"Ticket resolved\" appears on the student's screen.\n\t4. The student can then return to the appropriate question and check for the answer. The answer can be viewed by clicking on the \"green cloud\" icon. Remark: Only after the teaching staff answers the question related to the task, the student can ask the next question about the same task if necessary.\n\n3.1\tView own tickets \nOpen and resolved tickets can be viewed the menu option My tickets. \nThis option is useful when the question asked by the student cannot be answered quickly (in time\nduration of the check) because it provides the possibility of subsequent review of the answers of the teaching staff. For example, there is a (fatal) mistake on the part of the teaching staff, and because of that, it is subsequent to all students answer recognized as correct.\n\n2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.",
            "time": 40.94,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_11",
            "question": "What is the duration of the second cycle in weeks?",
            "answer": "The duration of the second cycle is 10 weeks.",
            "source_documents": [
                {
                    "page_content": "lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "It should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "lectures in the 2nd cycle, December 4th, 2023 - January 24th, 2024.\nDuring the lectures, the planned material is presented with the help of Powerpoint slides, solve tasks, discuss, conduct ad hoc surveys and knowledge tests which can be used by students to determine knowledge and self-assessment\n    slides that will be presented at lectures are available through the IPRO2023 team on the Microsoft Teams platform\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n\n2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n\nIt should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning",
            "time": 51.03,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_12",
            "question": "What will happen if i dont work continuously?",
            "answer": "If you do not work continuously, your results may suffer significantly. The layered approach in processing materials requires continuous effort every week to ensure a good understanding of the subject matter. Campaign work, where you plan to do no work for several weeks and then try to catch up all at once, is likely to result in poor performance.",
            "source_documents": [
                {
                    "page_content": "It should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "If an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Exit the current function (Step out, Shift-F11)\nRestart the program with recompilation (Restart, Ctrl-Shift-F5)\nStop the program (Stop, Shift-F5)\nIf the following statement is executed with the Step over action, the program stops after executing the command, and hovering over the variable name indicates that the content has changed.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "#include <stdio.h>\nint main(void) {\n   int a, b;\n   printf(\"Hello World! Now enter a and b > \");\n   scanf(\"%d %d\", &a, &b);\n   printf(\"%d  %d\", a, b);\n   return 0;\n}\n\nThis program prints the message `Hello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7i\u00b7b\u00b7>\u00b7`, reads two integers and then prints them separated by two spaces. In addition, it does not print the sum.\nIf such a program is executed, Edgar will report that the result is incorrect for each of the four pre-prepared test cases.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "It should be noted that 140 hours, when distributed on all teaching weeks, equal to an average of approximately 10 hours of independent work per week. Due to the layered approach in the processing of materials, it is very important to work continuously, every week. Campaign work (e.g. \"I won\u2019t do anything for three weeks and then I\u2019ll make up for it all at once\") on this subject will almost certainly end in very poor results.\nIndependent work includes:\n    Learning\n\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\nExit the current function (Step out, Shift-F11)\nRestart the program with recompilation (Restart, Ctrl-Shift-F5)\nStop the program (Stop, Shift-F5)\nIf the following statement is executed with the Step over action, the program stops after executing the command, and hovering over the variable name indicates that the content has changed.\n\n#include <stdio.h>\nint main(void) {\n   int a, b;\n   printf(\"Hello World! Now enter a and b > \");\n   scanf(\"%d %d\", &a, &b);\n   printf(\"%d  %d\", a, b);\n   return 0;\n}\n\nThis program prints the message `Hello\u00b7World!\u00b7Now\u00b7enter\u00b7a\u00b7i\u00b7b\u00b7>\u00b7`, reads two integers and then prints them separated by two spaces. In addition, it does not print the sum.\nIf such a program is executed, Edgar will report that the result is incorrect for each of the four pre-prepared test cases.",
            "time": 59.52,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_13",
            "question": "How should i study outside of the lectures if I want to get a good grade?",
            "answer": "To study outside of lectures for a good grade, you should:\n1. Read other literature (see chapter Recommended reading)\n2. Solve published assignments for exercises in addition to lectures.\n3. Test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications.\n4. Use the internet as a resource for learning.",
            "source_documents": [
                {
                    "page_content": "It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Independent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)\n\nLectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\n2\tForms of teaching\n2.1\tLectures\nThe lectured present theoretical assumptions and explains concepts that are supported by numerous explanations and examples. There will be short tests given during most lectures which will count towards the final grade.\nLectures take place in two cycles. After the first cycle, midterm exams are held, and after the second\ncycle final exams.\n    lectures in the 1st cycle, October 2nd - November 15th, 2023.\n\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).",
            "time": 57.25,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_14",
            "question": "Which competences are expected to be acquired after completing the subject?",
            "answer": "After completing the subject, students are expected to acquire the following competences:\n- Ability to understand and apply fundamental programming concepts and principles\n- Skills in designing, implementing, and testing algorithms and data structures\n- Proficiency in using an integrated development environment for writing and compiling programs\n- Knowledge of debugging and error detection techniques\n- Ability to work independently on tasks and projects\n- Ability to perform well in written exams and laboratory exercises\n- Understanding of the C programming language and its applications",
            "source_documents": [
                {
                    "page_content": "Independent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "4\tWriting and compiling programs in an integrated development environment\nKnowledge of elementary editing of a program by notepad or a similar text editor, compiling programs from the command line, and running programs from the command line, is mandatory and will be tested during laboratory exercises.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "Independent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n\n4\tWriting and compiling programs in an integrated development environment\nKnowledge of elementary editing of a program by notepad or a similar text editor, compiling programs from the command line, and running programs from the command line, is mandatory and will be tested during laboratory exercises.\n\n2.2\tIndependent work\nThe course is performed with a load of 7 ECTS credits, which means that the total student engagement required to successfully master the material is estimated at approximately 7 x 30 = 210 hours. It is envisaged that:\n    50 hours will be spent on attending classes,\n    20 hours will be spent participating in laboratory exercises and attending exams,\n    the remaining time, i.e. at least 140 hours, must be spent on independent work.\n\n2.5\tKnowledge tests\nDuring the continuous assessment process, two written exams are taken: midterm exam and final exam.\n    exact time is TBD\n    part of the tasks can be in the form of questions, part of the tasks can be based on choosing the correct answer, but most of the tasks are related to solving a given problem in the programming language C.\n    tasks are solved on a computer at FER",
            "time": 56.52,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_15",
            "question": "How do laboratory exercises work?",
            "answer": "Laboratory exercises consist of two parts: solving multiple choice questions and creating one or more programs. The schedule, topics, and points for each exercise will be published on Teams beforehand. Students submit their solutions during laboratory exercises via the Edgar system.",
            "source_documents": [
                {
                    "page_content": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Laboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "The system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "The labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\n\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.\n\nThe labs contain program tasks that are solved and tested in the Notepad editor (++) or the VSC development environment, and the final solution is transferred (copy-paste) to the Edgar system.\nYou can access the Edgar system at:   https://edgar.fer.hr/",
            "time": 41.25,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_16",
            "question": "Are there negative points on laboratory exercises?",
            "answer": "Yes, there are negative points in the first part of the laboratory exercise, which consists of multiple choice questions. An incorrect answer obtains negative points, while an unanswered question does not earn negative points.",
            "source_documents": [
                {
                    "page_content": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "If the compilation of the program is successful, the program will be run on several pre-prepared test cases. If the printout of the program for a case does not correspond to the expected printout, a certain percentage, determined in advance for that case, is deducted from the total number of points provided for the task. This percentage can be 100% if it is a typical test case, for example if a program that determines whether a given number is within the required interval does not work well for",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Each row of the table corresponds to one test case. \"Incorrect\" indicates that the printout of the program was not as expected for that test case. The percentage next to the test case indicates what percentage of the predefined number of points for that task is lost if the solution does not pass that test. In this particular case, for any of the test cases in the example above, all points for that task are lost. So, in order to achieve 100% points on a task, the solution must be correct for all",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "With each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\n\nIf the compilation of the program is successful, the program will be run on several pre-prepared test cases. If the printout of the program for a case does not correspond to the expected printout, a certain percentage, determined in advance for that case, is deducted from the total number of points provided for the task. This percentage can be 100% if it is a typical test case, for example if a program that determines whether a given number is within the required interval does not work well for\n\nEach row of the table corresponds to one test case. \"Incorrect\" indicates that the printout of the program was not as expected for that test case. The percentage next to the test case indicates what percentage of the predefined number of points for that task is lost if the solution does not pass that test. In this particular case, for any of the test cases in the example above, all points for that task are lost. So, in order to achieve 100% points on a task, the solution must be correct for all\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).",
            "time": 42.39,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_17",
            "question": "What should i do with my code before running it in edgar?",
            "answer": "Before running your code in Edgar, you need to prepare and test it outside of Edgar. This means writing the program (using a text editor like Notepad++ or VSC), compiling it (by calling the gcc compiler), resolving all errors and warnings, and thoroughly testing it by executing against different test data. Once you are confident that your solution is correct, you can copy-paste the code into Edgar and run it using the \"Run\" option or Ctrl + Enter key combination.",
            "source_documents": [
                {
                    "page_content": "Important: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "In tasks that require writing of a program, in the Edgar system, below the text of the task, there is a field to which the solution (program code) should be pasted. \nThe program code transferred to the Edgar system can be run in the following ways:\n\u2022\tby selecting the option \u201eRun\u201c\n\u2022\twhile the program code field is in focus (the mouse pointer is in the field), by a key combination Ctrl + Enter",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "In the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "The process of writing tasks in the Edgar system will be illustrated by one of the tasks from the demo test, which reads:\nWrite a program that prints the message as in the examples that follow, reads integers a and b, prints them separated by a single space, and below that, prints their sum in a new line.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "Important: The program task must first be prepared and tested outside Edgar. This means that before submitting a solution to the Edgar system, the program needs to be written (eg with the Notepad/++ editor or in the VSC), compiled (by calling the gcc compiler), all errors and warnings must be resolved, and the program should be thoroughly tested by executing against different test data. Only when you consider your solution to be entirely correct, you should copy-paste the code into Edgar.\n\nIn tasks that require writing of a program, in the Edgar system, below the text of the task, there is a field to which the solution (program code) should be pasted. \nThe program code transferred to the Edgar system can be run in the following ways:\n\u2022\tby selecting the option \u201eRun\u201c\n\u2022\twhile the program code field is in focus (the mouse pointer is in the field), by a key combination Ctrl + Enter\n\nIn the event of an unforeseen circumstance (eg power failure), Edgar allows the current contents of the solution field to be stored:\n\u2022\tExplicitly - the contents of the field can be explicitly saved by clicking the \"Save\" button in the upper right corner (below the \"Run\" button).\n\u2022\tImplicitly - Edgar automatically saves the contents of the field each time it is started with the \"Run\" option. Therefore, \"Save\" should only be used if you have written program code and have not run it.\n\nThe process of writing tasks in the Edgar system will be illustrated by one of the tasks from the demo test, which reads:\nWrite a program that prints the message as in the examples that follow, reads integers a and b, prints them separated by a single space, and below that, prints their sum in a new line.",
            "time": 62.31,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_18",
            "question": "Where can I find the schedule of the laboratory exercises?",
            "answer": "The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams.",
            "source_documents": [
                {
                    "page_content": "Laboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "Laboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\n2\tExams \nNote: Official cheat-sheet printed on paper may be used in laboratory exercises. It will also be available in Edgar as a last question in the laboratory exercises and exams:\n\u2022\tCheat sheet for C\nKnowledge tests in laboratory exercises are accessed using a password. Knowledge tests are only available in a pre-set time intervals.\n\n2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n\nthe laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.",
            "time": 49.34,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_19",
            "question": "If I have 0 points from lab excercises, can I pass with a grade of 5?",
            "answer": "No",
            "source_documents": [
                {
                    "page_content": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Laboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Conditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\n\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\nLectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
            "time": 51.81,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_20",
            "question": "What are my options for consultations?",
            "answer": "You can consult with the teacher through MS Teams at agreed times. Additionally, you can view your own tickets in the menu option My tickets to see open and resolved questions.",
            "source_documents": [
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "3.1\tView own tickets \nOpen and resolved tickets can be viewed the menu option My tickets. \nThis option is useful when the question asked by the student cannot be answered quickly (in time\nduration of the check) because it provides the possibility of subsequent review of the answers of the teaching staff. For example, there is a (fatal) mistake on the part of the teaching staff, and because of that, it is subsequent to all students answer recognized as correct.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n\nconsultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n3.1\tView own tickets \nOpen and resolved tickets can be viewed the menu option My tickets. \nThis option is useful when the question asked by the student cannot be answered quickly (in time\nduration of the check) because it provides the possibility of subsequent review of the answers of the teaching staff. For example, there is a (fatal) mistake on the part of the teaching staff, and because of that, it is subsequent to all students answer recognized as correct.\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page",
            "time": 42.15,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_21",
            "question": "What happens if I do not pass the course during the continuous monitoring of classes?",
            "answer": "If you fail to pass the course during the continuous monitoring of classes, you can take one or more classical exams.",
            "source_documents": [
                {
                    "page_content": "tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "If an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "The student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD\n\n3.2\tOn classical exams\nFor students who did not pass the exam during the continuous assessment, the total number of points is obtained by summing the points obtained in laboratory exercises during the continuous assessment and points obtained in the written part of the exam\n    total number of points = number of lab points + number of points on the exam\n\nLaboratory exercises\t30 points\tthere is no threshold\nExam\t70 points\ttreshold is 35 points\n\nIf an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\nThe student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.",
            "time": 43.98,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_22",
            "question": "What will happen if I do not submit the exam on time?",
            "answer": "If you do not submit the exam on time, you will receive a timeout recording in the system, which means that the test can be canceled later.",
            "source_documents": [
                {
                    "page_content": "If an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "The student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "With each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "If an interrupt occurs, the test can later be re-accessed. By selecting the option \"Start exam (or continue ongoing exam)\" from the main menu, the system will display all tests that you have started but have not submitted, as well as the due time for the completion of the test (Available until). By entering the appropriate password, work on the interrupted test continues.\n\nThe student is obliged to submit the test for assessment by the end of the countdown, but it will be possible to submit the test for assessment in a reasonable time after the expiration. This timeout, however, will be recorded in the system, so the test can be canceled later.\nIn the upper left corner (next to the test name) there is a button for selecting the layout of the screen.\n\nWith each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\nconsultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.",
            "time": 41.84,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_23",
            "question": "Who do I contact if I have questions during the exam?",
            "answer": "If you have questions during the exam, you should use the Ticketing system provided by Edgar. This system allows you to ask questions related to specific tasks while writing the test.",
            "source_documents": [
                {
                    "page_content": "consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "consultation should be requested as soon as ambiguities arise that you are unable to resolve on your own or with the help of colleagues. Do not postpone the consultation until just before the midterm exam, final exam or exam - at that point it will most likely be too late.\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page\n\n2.4\tConsultations\nStudents have the opportunity to consult with the teacher. Consultations will take place through the MS Teams platform, at times agreed with the teacher.\n    the teacher will be happy to additionally explain the material to you during the consultation, but will not teach it again\n\n2. Enter a description of the problem in the window that appears and confirm it by clicking Yes, raise ticket. Then continue with the test,  without waiting for an answer.\n\t3.The teaching staff will examine the problem as soon as possible and answer the student. While waiting for an answer, the student is not able to send additional messages related to the same task (he can send messages about other tasks) - the icon turns red, and an hourglass icon appears next to it.",
            "time": 42.9,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_24",
            "question": "If I got 23 points on my laboratory exercises, 7 points on my lectures, 35 points on my midterm exam, and 23 points on my final exam, will I pass?",
            "answer": "No",
            "source_documents": [
                {
                    "page_content": "3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Laboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "3\tConditions for obtaining a passing grade\n3.1\tDuring the continuous assessment\nThe total number of points gained during the continuous assessment is obtained by adding the points gained at lectures, points gained in laboratory exercises and points gained in the midterm exam and the final exam:\n    total number of points = number of points at lectures + number of lab points + number of points on intermediate exam + number of points on final exam\n\nLectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50\n\nLaboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\nthe laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.",
            "time": 48.7,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_25",
            "question": "List me the recommended literature.",
            "answer": "The recommended literature includes:\n1. K. N. King, C Programming: A Modern Approach, Second Edition, W. W. Norton & Company\n2. B. W. Kernighan, D. M. Ritchie: The C Programming Language, Second Edition, Englewood Cliffs, NJ: Prentice Hall\n3. V. Mornar: Introduction to programming, working version of the textbook",
            "source_documents": [
                {
                    "page_content": "K. N. King, C Programming: A Modern Approach, Second Edition, W. W. Norton & Company\n        An extensive work (805 pages) that has been accepted as a textbook at hundreds of universities around the world.\n    B. W. Kernighan, D. M. Ritchie: The C Programming Language, Second Edition, Englewood Cliffs, NJ: Prentice Hall\n        A basic book whose authors are the creators of the C programming language from which many generations of programmers have learned the language.\n5.2\tInstructions",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Independent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "5\tOther materials\n5.1\tRecommended reading\n    V. Mornar: Introduction to programming, working version of the textbook\n        The textbook covers the complete material of the subject, and even more than that. The textbook will be available on MS Teams as pdf. An integral part of the textbook is the folder Examples with about ninety programs that can be independently translated and run in the command line or in the development environment VSCode.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "It is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "K. N. King, C Programming: A Modern Approach, Second Edition, W. W. Norton & Company\n        An extensive work (805 pages) that has been accepted as a textbook at hundreds of universities around the world.\n    B. W. Kernighan, D. M. Ritchie: The C Programming Language, Second Edition, Englewood Cliffs, NJ: Prentice Hall\n        A basic book whose authors are the creators of the C programming language from which many generations of programmers have learned the language.\n5.2\tInstructions\n\nIndependent work includes:\n    Learning\n        Slides from the lectures\n        Your own notes\n        Reading other literature (see chapter Recommended reading)\n        Internet\n    Solving tasks\n        solving a large number of tasks on your own computer acquires the necessary skills (simple algorithm design, code writing, translation, error detection, testing) which are tested in laboratory exercises and written tests (midterm, final exam, exam).\n\n5\tOther materials\n5.1\tRecommended reading\n    V. Mornar: Introduction to programming, working version of the textbook\n        The textbook covers the complete material of the subject, and even more than that. The textbook will be available on MS Teams as pdf. An integral part of the textbook is the folder Examples with about ninety programs that can be independently translated and run in the command line or in the development environment VSCode.\n\nIt is therefore of the utmost importance:\n        solve published assignments for exercises in addition to lectures (published at the same time as lectures)\n        test examples of programs and excerpts from lectures, modify these examples yourself, notice the effects of modifications (you can copy the program code of examples from lectures from PDF versions of published lectures)\n    Reading other literature (see chapter Other materials - Recommended reading)",
            "time": 61.97,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_26",
            "question": "If i have a question for the lecturers, what should my email consist of?",
            "answer": "If you have a question for the lecturers, please start the subject line with [IPRO2023] and send your email to Prof. dr. sc. Vedran Mornar (vedran.mornar@fer.hr) or Assistant Melita Fertalj (melita.fertalj@fer.hr).",
            "source_documents": [
                {
                    "page_content": "5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Also, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "a very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].\n\nAlso, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\na very useful tool with information that teachers feel as unnecessary to memorize. It is recommended to use the official reminder both in lectures and during independent work, in order to get acquainted with where some information can be found, which facilitates the use of reminders in knowledge tests.\n        on a copy of the official reminder nothing should be added\n        this reminder will be available in digital form (pdf file) at the laboratory exercises in the Edgar system\n\n3\tTicketing system\nIn order to facilitate communication between students and teaching staff during the writing of tests, Edgar offers a support system called Ticketing system. In case of doubt about the accuracy of the solution or something else, the student can ask a question related to a specific task.\nUsing the system while writing the test is described below.\n\t1. Click on the \"yellow tools\" icon  in the upper right corner of the question page",
            "time": 47.32,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_27",
            "question": "What is the course official email address?",
            "answer": "The course official email address is vedran.mornar@fer.hr.",
            "source_documents": [
                {
                    "page_content": "Also, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "Additional compiler options to use in the Introduction to Programming course are:\n-std=c11 \u2013 a parameter that ensures compilation compliant to ISO/IEC 9899:2011 standard (there is a newer ISO/IEC 9899:2018 standard, option -c++17, but gcc currently only applies it to C++.\n-pedantic-errors \u2013 a parameter that ensures generation of errors if the code is not strictly compliant to the standard\n-Wall \u2013 a parameter that requires printing of detailed warnings",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "tasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "Also, in case of need, students will receive the notification by e-mail, therefore you should check your email inbox @fer.hr.\n\n5.4\tLecturers\nLecturer\nProf. dr. sc. Vedran Mornar, vedran.mornar@fer.hr\n\nAssistant: Melita Fertalj, mag. Ing., melita.fertalj@fer.hr\nIf communicating via email, please start subject with [IPRO2023].\n\nAdditional compiler options to use in the Introduction to Programming course are:\n-std=c11 \u2013 a parameter that ensures compilation compliant to ISO/IEC 9899:2011 standard (there is a newer ISO/IEC 9899:2018 standard, option -c++17, but gcc currently only applies it to C++.\n-pedantic-errors \u2013 a parameter that ensures generation of errors if the code is not strictly compliant to the standard\n-Wall \u2013 a parameter that requires printing of detailed warnings\n\ntasks are solved on a computer at FER\n    exams are graded by Edgar, but these points do not have to be final; final points are assigned by teachers after reviewing student solutions\n    there is no compensation for midterm exams and final exams in case of absence\nStudents who fail to pass the course during the continuous monitoring of classes, can take one or more classical exams.\n    exact time is TBD",
            "time": 40.32,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_28",
            "question": "Give me a list of assistants who conduct laboratory exercises.",
            "answer": "I don't know the names of the assistants who conduct laboratory exercises.",
            "source_documents": [
                {
                    "page_content": "Laboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "the laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "The system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "Laboratory exercise includes the development of one or more programs (algorithm design, coding, testing). The exact schedule by dates, topics and number of program tasks per exercise, and the maximum number of points that can be obtained in each exercise will be published on time, at least a week before the exercises, on Teams. Students will submit solutions to their tasks during laboratory exercises via the Edgar system. Instructions for that will be available on time.\n\n2.3\tLaboratory exercises with knowledge tests\nAll students perform laboratory exercises in a FER lab, in precisely prescribed terms:\n    four exercises in the 1st cycle (i.e., before the midterm exam) and four exercises in the 2nd cycle\n    the duration of one laboratory exercise is approximately 110 minutes\n    laboratory exercises must be completed by the student in the specified time\n    there is no compensation for laboratory exercises in case of absence\n\nthe laboratory exercise consists of two parts:\n        solving tasks in which the correct one must be chosen from among several offered answers (\"multiple choice questions\").  A correct answer obtains positive points, an incorrect answer obtains negative points. An unanswered question does not earn negative points.\n        creation of one or more programs (algorithm design, coding, testing). In these assignments there are no negative points.\n\nThe system then asks the user to enter a password to access the exam. In the lab exercises, you will learn the passwords for the exams from the assistant on duty just before you start writing each exam.",
            "time": 41.35,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_29",
            "question": "What subjects can I enroll in when I finish the introduction to programming?",
            "answer": "After completing the Introduction to Programming course, you may consider enrolling in more advanced programming courses or other computer science-related subjects depending on your interests and goals.",
            "source_documents": [
                {
                    "page_content": "Integrated Development Environments (IDEs) are used to make writing, compiling, and testing programs easier. In the Introduction to Programming course, we will use Visual Studio Code development environment, because it is an open source program, runs on multiple platforms (Windows, Linux, Mac), the installation package is relatively small compared to other similar environments, installation is fast and can be used for programming in any programming language, provided that a suitable compiler is",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "Introduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "1\tIntroduction\nElectronic computer programs are prepared in a symbolic, human-understandable programming language. In the course Introduction to programming, for this purpose will use the C programming language.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForCompilingPrograms.txt"
                },
                {
                    "page_content": "1\tEdgar system \nThe Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language.",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                }
            ],
            "combined_documents": "Integrated Development Environments (IDEs) are used to make writing, compiling, and testing programs easier. In the Introduction to Programming course, we will use Visual Studio Code development environment, because it is an open source program, runs on multiple platforms (Windows, Linux, Mac), the installation package is relatively small compared to other similar environments, installation is fast and can be used for programming in any programming language, provided that a suitable compiler is\n\nIntroduction to programming: A guide for students\n1\tIntroduction\nThe aim of the course is to adopt the basic concepts of programming and gain the ability to create less complex programs in the programming language C.\nLecture slides, instructions, recommended literature, official reminders, and other materials are published through the IPRO2023 team on the Microsoft Teams platform.\n\n1\tIntroduction\nElectronic computer programs are prepared in a symbolic, human-understandable programming language. In the course Introduction to programming, for this purpose will use the C programming language.\n\n1\tEdgar system \nThe Edgar system is used for automatic assessment of tests of theoretical and practical knowledge of the course Introduction to Programming. In this course, you will encounter programming tasks, where for a given problem it is necessary to write a program solution in the C programming language.",
            "time": 39.24,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        },
        {
            "question_number": "q_30",
            "question": "How to get a grade of 6?",
            "answer": "To obtain a grade of 6, you need to achieve at least 42 (out of 70 possible) points on the written exam and have total points equal to or greater than 58.",
            "source_documents": [
                {
                    "page_content": "With each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Conditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                },
                {
                    "page_content": "If the compilation of the program is successful, the program will be run on several pre-prepared test cases. If the printout of the program for a case does not correspond to the expected printout, a certain percentage, determined in advance for that case, is deducted from the total number of points provided for the task. This percentage can be 100% if it is a typical test case, for example if a program that determines whether a given number is within the required interval does not work well for",
                    "source_file": "english_docs_od_mentora_txt\\InstructionsForLabs.txt"
                },
                {
                    "page_content": "Lectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50",
                    "source_file": "english_docs_od_mentora_txt\\StudentGuide.txt"
                }
            ],
            "combined_documents": "With each task, information is shown regarding the points that the student earns for correct, unanswered and incorrect answer.\n\nIn the upper right corner there is a clock that counts down the time until the end of writing the test, a picture of the student and the \"Submit\" button which is used to submit the entire test for the final assessment (not individual tasks!).\n\nConditions for obtaining a passing grade in the exam period:\n    achieved a threshold of at least 35 (out of 70 possible) points on the written exam and\n    total points \uf0b3 50\n\n\n4\tScoring thresholds for determining final grades\nStudents who meet the requirements for obtaining a passing grade based on continuous assessment or on the exam period receive a grade based on the following table:\n[87.5, 100]\tExcellent - 5\n[75, 87.5)\tVery good- 4\n[62.5, 75)\tGood - 3\n[50, 62.5)\tSufficient - 2\n\nIf the compilation of the program is successful, the program will be run on several pre-prepared test cases. If the printout of the program for a case does not correspond to the expected printout, a certain percentage, determined in advance for that case, is deducted from the total number of points provided for the task. This percentage can be 100% if it is a typical test case, for example if a program that determines whether a given number is within the required interval does not work well for\n\nLectures    10 points   there is no threshold\nLaboratory exercises\t30 points\tthere is no threshold\nMidterm exam\t25 points\tthere is no threshold\nFinal exam\t35 points\ttreshold is 14 points\n\nConditions for obtaining a passing grade based on continuous assessment:\n    achieved a threshold of at least 14 (out of 35 possible) points on the final exam and\n    total points >= 50",
            "time": 57.12,
            "evaluation": {
                "bleu_score": -100000,
                "rouge_score": {
                    "precision": -100000,
                    "recall": -100000,
                    "f1": -100000
                },
                "diversity": -100000,
                "human_eval": {
                    "expression_and_logic": "_",
                    "accuracy_and_relevance": "_",
                    "overall_quality_and_engagement": "_"
                }
            }
        }
    ]
}